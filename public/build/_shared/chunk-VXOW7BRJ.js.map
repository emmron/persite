{
  "version": 3,
  "sources": ["../../../app/data/AFLManager/teams.ts", "../../../app/data/AFLManager/players.ts", "../../../app/data/AFLManager/gameState.ts", "../../../app/components/AFLManager/GameInitialization.tsx", "../../../app/components/AFLManager/Dashboard.tsx", "../../../app/components/AFLManager/TeamManagement.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\data\\\\AFLManager\\\\teams.ts\"\n);\nimport.meta.hot.lastModified = \"1747543677776.288\";\n}\n// REMIX HMR END\n\n// AFL Teams data\r\n\r\nexport interface Team {\r\n  id: string;\r\n  name: string;\r\n  shortName: string;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n  homeGround: string;\r\n  attributes: {\r\n    attack: number;\r\n    midfield: number;\r\n    defense: number;\r\n    coaching: number;\r\n  };\r\n  logo?: string;\r\n}\r\n\r\nexport const teams: Team[] = [\r\n  {\r\n    id: \"1\",\r\n    name: \"Adelaide Crows\",\r\n    shortName: \"Crows\",\r\n    colors: {\r\n      primary: \"#002b5c\",\r\n      secondary: \"#e21937\",\r\n    },\r\n    homeGround: \"Adelaide Oval\",\r\n    attributes: {\r\n      attack: 75,\r\n      midfield: 78,\r\n      defense: 76,\r\n      coaching: 77,\r\n    },\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"Brisbane Lions\",\r\n    shortName: \"Lions\",\r\n    colors: {\r\n      primary: \"#7C1E31\",\r\n      secondary: \"#0054A4\",\r\n    },\r\n    homeGround: \"Gabba\",\r\n    attributes: {\r\n      attack: 88,\r\n      midfield: 86,\r\n      defense: 85,\r\n      coaching: 87,\r\n    },\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"Carlton\",\r\n    shortName: \"Blues\",\r\n    colors: {\r\n      primary: \"#0e1e2d\",\r\n      secondary: \"#ffffff\",\r\n    },\r\n    homeGround: \"Marvel Stadium\",\r\n    attributes: {\r\n      attack: 82,\r\n      midfield: 84,\r\n      defense: 80,\r\n      coaching: 83,\r\n    },\r\n  },\r\n  {\r\n    id: \"4\",\r\n    name: \"Collingwood\",\r\n    shortName: \"Magpies\",\r\n    colors: {\r\n      primary: \"#000000\",\r\n      secondary: \"#ffffff\",\r\n    },\r\n    homeGround: \"MCG\",\r\n    attributes: {\r\n      attack: 86,\r\n      midfield: 87,\r\n      defense: 85,\r\n      coaching: 88,\r\n    },\r\n  },\r\n  {\r\n    id: \"5\",\r\n    name: \"Essendon\",\r\n    shortName: \"Bombers\",\r\n    colors: {\r\n      primary: \"#CC2031\",\r\n      secondary: \"#000000\",\r\n    },\r\n    homeGround: \"Marvel Stadium\",\r\n    attributes: {\r\n      attack: 79,\r\n      midfield: 78,\r\n      defense: 77,\r\n      coaching: 76,\r\n    },\r\n  },\r\n  {\r\n    id: \"6\",\r\n    name: \"Fremantle\",\r\n    shortName: \"Dockers\",\r\n    colors: {\r\n      primary: \"#2a0d54\",\r\n      secondary: \"#ffffff\",\r\n    },\r\n    homeGround: \"Optus Stadium\",\r\n    attributes: {\r\n      attack: 76,\r\n      midfield: 79,\r\n      defense: 82,\r\n      coaching: 78,\r\n    },\r\n  },\r\n  {\r\n    id: \"7\",\r\n    name: \"Geelong Cats\",\r\n    shortName: \"Cats\",\r\n    colors: {\r\n      primary: \"#1c3c63\",\r\n      secondary: \"#ffffff\",\r\n    },\r\n    homeGround: \"GMHBA Stadium\",\r\n    attributes: {\r\n      attack: 84,\r\n      midfield: 85,\r\n      defense: 86,\r\n      coaching: 89,\r\n    },\r\n  },\r\n  {\r\n    id: \"8\",\r\n    name: \"Gold Coast Suns\",\r\n    shortName: \"Suns\",\r\n    colors: {\r\n      primary: \"#E5002B\",\r\n      secondary: \"#FFCD00\",\r\n    },\r\n    homeGround: \"Metricon Stadium\",\r\n    attributes: {\r\n      attack: 74,\r\n      midfield: 75,\r\n      defense: 73,\r\n      coaching: 74,\r\n    },\r\n  },\r\n  {\r\n    id: \"9\",\r\n    name: \"Greater Western Sydney\",\r\n    shortName: \"Giants\",\r\n    colors: {\r\n      primary: \"#F26522\",\r\n      secondary: \"#FFFFFF\",\r\n    },\r\n    homeGround: \"GIANTS Stadium\",\r\n    attributes: {\r\n      attack: 80,\r\n      midfield: 81,\r\n      defense: 79,\r\n      coaching: 80,\r\n    },\r\n  },\r\n  {\r\n    id: \"10\",\r\n    name: \"Hawthorn\",\r\n    shortName: \"Hawks\",\r\n    colors: {\r\n      primary: \"#4D2004\",\r\n      secondary: \"#FFC700\",\r\n    },\r\n    homeGround: \"MCG\",\r\n    attributes: {\r\n      attack: 77,\r\n      midfield: 76,\r\n      defense: 78,\r\n      coaching: 81,\r\n    },\r\n  },\r\n  {\r\n    id: \"11\",\r\n    name: \"Melbourne\",\r\n    shortName: \"Demons\",\r\n    colors: {\r\n      primary: \"#0B1C3F\",\r\n      secondary: \"#DE0316\",\r\n    },\r\n    homeGround: \"MCG\",\r\n    attributes: {\r\n      attack: 83,\r\n      midfield: 85,\r\n      defense: 84,\r\n      coaching: 84,\r\n    },\r\n  },\r\n  {\r\n    id: \"12\",\r\n    name: \"North Melbourne\",\r\n    shortName: \"Kangaroos\",\r\n    colors: {\r\n      primary: \"#003F98\",\r\n      secondary: \"#FFFFFF\",\r\n    },\r\n    homeGround: \"Marvel Stadium\",\r\n    attributes: {\r\n      attack: 70,\r\n      midfield: 71,\r\n      defense: 72,\r\n      coaching: 73,\r\n    },\r\n  },\r\n  {\r\n    id: \"13\",\r\n    name: \"Port Adelaide\",\r\n    shortName: \"Power\",\r\n    colors: {\r\n      primary: \"#008AAB\",\r\n      secondary: \"#000000\",\r\n    },\r\n    homeGround: \"Adelaide Oval\",\r\n    attributes: {\r\n      attack: 82,\r\n      midfield: 83,\r\n      defense: 81,\r\n      coaching: 82,\r\n    },\r\n  },\r\n  {\r\n    id: \"14\",\r\n    name: \"Richmond\",\r\n    shortName: \"Tigers\",\r\n    colors: {\r\n      primary: \"#FFD200\",\r\n      secondary: \"#000000\",\r\n    },\r\n    homeGround: \"MCG\",\r\n    attributes: {\r\n      attack: 81,\r\n      midfield: 80,\r\n      defense: 79,\r\n      coaching: 83,\r\n    },\r\n  },\r\n  {\r\n    id: \"15\",\r\n    name: \"St Kilda\",\r\n    shortName: \"Saints\",\r\n    colors: {\r\n      primary: \"#ED1B2F\",\r\n      secondary: \"#FFFFFF\",\r\n    },\r\n    homeGround: \"Marvel Stadium\",\r\n    attributes: {\r\n      attack: 78,\r\n      midfield: 77,\r\n      defense: 76,\r\n      coaching: 75,\r\n    },\r\n  },\r\n  {\r\n    id: \"16\",\r\n    name: \"Sydney Swans\",\r\n    shortName: \"Swans\",\r\n    colors: {\r\n      primary: \"#ED171F\",\r\n      secondary: \"#FFFFFF\",\r\n    },\r\n    homeGround: \"SCG\",\r\n    attributes: {\r\n      attack: 85,\r\n      midfield: 86,\r\n      defense: 83,\r\n      coaching: 86,\r\n    },\r\n  },\r\n  {\r\n    id: \"17\",\r\n    name: \"West Coast Eagles\",\r\n    shortName: \"Eagles\",\r\n    colors: {\r\n      primary: \"#003087\",\r\n      secondary: \"#F2A900\",\r\n    },\r\n    homeGround: \"Optus Stadium\",\r\n    attributes: {\r\n      attack: 75,\r\n      midfield: 74,\r\n      defense: 76,\r\n      coaching: 77,\r\n    },\r\n  },\r\n  {\r\n    id: \"18\",\r\n    name: \"Western Bulldogs\",\r\n    shortName: \"Bulldogs\",\r\n    colors: {\r\n      primary: \"#0C2340\",\r\n      secondary: \"#E31837\",\r\n    },\r\n    homeGround: \"Marvel Stadium\",\r\n    attributes: {\r\n      attack: 81,\r\n      midfield: 83,\r\n      defense: 80,\r\n      coaching: 82,\r\n    },\r\n  },\r\n];\r\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\data\\\\AFLManager\\\\players.ts\"\n);\nimport.meta.hot.lastModified = \"1747543677775.9856\";\n}\n// REMIX HMR END\n\n// AFL Players data\r\n\r\nexport type Position = \r\n  | \"Forward\" \r\n  | \"Midfielder\" \r\n  | \"Defender\" \r\n  | \"Ruck\" \r\n  | \"Utility\";\r\n\r\nexport interface PlayerStats {\r\n  games: number;\r\n  goals: number;\r\n  behinds: number;\r\n  disposals: number;\r\n  marks: number;\r\n  tackles: number;\r\n}\r\n\r\nexport interface Player {\r\n  id: string;\r\n  name: string;\r\n  teamId: string;\r\n  age: number;\r\n  height: number; // in cm\r\n  weight: number; // in kg\r\n  position: Position;\r\n  attributes: {\r\n    // General attributes (0-100)\r\n    speed: number;\r\n    strength: number;\r\n    stamina: number;\r\n    agility: number;\r\n    intelligence: number;\r\n    \r\n    // Position-specific attributes (0-100)\r\n    kicking: number;\r\n    marking: number;\r\n    handball: number;\r\n    tackling: number;\r\n    \r\n    // Forward-specific\r\n    goalkicking?: number;\r\n    crumbing?: number;\r\n    \r\n    // Midfielder-specific\r\n    clearances?: number;\r\n    insidePlay?: number;\r\n    \r\n    // Defender-specific\r\n    intercept?: number;\r\n    rebound?: number;\r\n    \r\n    // Ruck-specific\r\n    tapwork?: number;\r\n    followUp?: number;\r\n  };\r\n  form: number; // 0-100\r\n  fitness: number; // 0-100\r\n  morale: number; // 0-100\r\n  value: number; // in thousands of dollars\r\n  contract: {\r\n    yearsRemaining: number;\r\n    salary: number; // yearly salary in thousands\r\n  };\r\n  stats: PlayerStats;\r\n}\r\n\r\n// This is a sample of players - in a real game, we would have hundreds\r\nexport const players: Player[] = [\r\n  // Adelaide Crows players\r\n  {\r\n    id: \"p1\",\r\n    name: \"Taylor Walker\",\r\n    teamId: \"1\",\r\n    age: 33,\r\n    height: 194,\r\n    weight: 100,\r\n    position: \"Forward\",\r\n    attributes: {\r\n      speed: 70,\r\n      strength: 85,\r\n      stamina: 75,\r\n      agility: 65,\r\n      intelligence: 85,\r\n      kicking: 88,\r\n      marking: 85,\r\n      handball: 75,\r\n      tackling: 65,\r\n      goalkicking: 90,\r\n      crumbing: 60\r\n    },\r\n    form: 80,\r\n    fitness: 85,\r\n    morale: 75,\r\n    value: 650,\r\n    contract: {\r\n      yearsRemaining: 1,\r\n      salary: 550\r\n    },\r\n    stats: {\r\n      games: 0,\r\n      goals: 0,\r\n      behinds: 0,\r\n      disposals: 0,\r\n      marks: 0,\r\n      tackles: 0\r\n    }\r\n  },\r\n  \r\n  // Brisbane Lions players\r\n  {\r\n    id: \"p19\",\r\n    name: \"Lachie Neale\",\r\n    teamId: \"2\",\r\n    age: 30,\r\n    height: 177,\r\n    weight: 80,\r\n    position: \"Midfielder\",\r\n    attributes: {\r\n      speed: 80,\r\n      strength: 75,\r\n      stamina: 90,\r\n      agility: 85,\r\n      intelligence: 95,\r\n      kicking: 85,\r\n      marking: 75,\r\n      handball: 92,\r\n      tackling: 85,\r\n      clearances: 95,\r\n      insidePlay: 90\r\n    },\r\n    form: 90,\r\n    fitness: 90,\r\n    morale: 85,\r\n    value: 1200,\r\n    contract: {\r\n      yearsRemaining: 3,\r\n      salary: 900\r\n    },\r\n    stats: {\r\n      games: 0,\r\n      goals: 0,\r\n      behinds: 0,\r\n      disposals: 0,\r\n      marks: 0,\r\n      tackles: 0\r\n    }\r\n  },\r\n  \r\n  // Collingwood players\r\n  {\r\n    id: \"p37\",\r\n    name: \"Nick Daicos\",\r\n    teamId: \"4\",\r\n    age: 21,\r\n    height: 183,\r\n    weight: 80,\r\n    position: \"Midfielder\",\r\n    attributes: {\r\n      speed: 85,\r\n      strength: 70,\r\n      stamina: 85,\r\n      agility: 90,\r\n      intelligence: 90,\r\n      kicking: 92,\r\n      marking: 80,\r\n      handball: 85,\r\n      tackling: 75,\r\n      clearances: 85,\r\n      insidePlay: 80\r\n    },\r\n    form: 95,\r\n    fitness: 95,\r\n    morale: 90,\r\n    value: 1500,\r\n    contract: {\r\n      yearsRemaining: 5,\r\n      salary: 800\r\n    },\r\n    stats: {\r\n      games: 0,\r\n      goals: 0,\r\n      behinds: 0,\r\n      disposals: 0,\r\n      marks: 0,\r\n      tackles: 0\r\n    }\r\n  },\r\n  \r\n  // Sydney Swans players\r\n  {\r\n    id: \"p160\",\r\n    name: \"Isaac Heeney\",\r\n    teamId: \"16\",\r\n    age: 27,\r\n    height: 185,\r\n    weight: 85,\r\n    position: \"Forward\",\r\n    attributes: {\r\n      speed: 85,\r\n      strength: 80,\r\n      stamina: 85,\r\n      agility: 90,\r\n      intelligence: 85,\r\n      kicking: 85,\r\n      marking: 90,\r\n      handball: 80,\r\n      tackling: 75,\r\n      goalkicking: 85,\r\n      crumbing: 80\r\n    },\r\n    form: 90,\r\n    fitness: 90,\r\n    morale: 85,\r\n    value: 1100,\r\n    contract: {\r\n      yearsRemaining: 4,\r\n      salary: 850\r\n    },\r\n    stats: {\r\n      games: 0,\r\n      goals: 0,\r\n      behinds: 0,\r\n      disposals: 0,\r\n      marks: 0,\r\n      tackles: 0\r\n    }\r\n  },\r\n  \r\n  // West Coast Eagles players\r\n  {\r\n    id: \"p170\",\r\n    name: \"Oscar Allen\",\r\n    teamId: \"17\",\r\n    age: 24,\r\n    height: 192,\r\n    weight: 90,\r\n    position: \"Forward\",\r\n    attributes: {\r\n      speed: 75,\r\n      strength: 80,\r\n      stamina: 80,\r\n      agility: 75,\r\n      intelligence: 80,\r\n      kicking: 80,\r\n      marking: 90,\r\n      handball: 75,\r\n      tackling: 70,\r\n      goalkicking: 85,\r\n      crumbing: 65\r\n    },\r\n    form: 85,\r\n    fitness: 90,\r\n    morale: 75,\r\n    value: 900,\r\n    contract: {\r\n      yearsRemaining: 3,\r\n      salary: 700\r\n    },\r\n    stats: {\r\n      games: 0,\r\n      goals: 0,\r\n      behinds: 0,\r\n      disposals: 0,\r\n      marks: 0,\r\n      tackles: 0\r\n    }\r\n  }\r\n];\r\n\r\n// Function to generate more players for each team\r\nexport function generatePlayersForTeam(teamId: string, count: number = 22): Player[] {\r\n  const positions: Position[] = [\"Forward\", \"Midfielder\", \"Defender\", \"Ruck\", \"Utility\"];\r\n  const players: Player[] = [];\r\n  \r\n  const firstNames = [\r\n    \"Jack\", \"Tom\", \"Josh\", \"Sam\", \"Ben\", \"Jake\", \"Luke\", \"Liam\", \"James\", \"Will\", \r\n    \"Max\", \"Charlie\", \"Harry\", \"Alex\", \"Zach\", \"Ollie\", \"Bailey\", \"Callum\", \"Darcy\", \"Isaac\"\r\n  ];\r\n  \r\n  const lastNames = [\r\n    \"Smith\", \"Jones\", \"Brown\", \"Wilson\", \"Taylor\", \"Johnson\", \"White\", \"Martin\", \"Anderson\", \"Thompson\",\r\n    \"Walker\", \"Harris\", \"Lewis\", \"Robinson\", \"Young\", \"Clark\", \"Mitchell\", \"Thomas\", \"King\", \"Cameron\"\r\n  ];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n    const position = positions[Math.floor(Math.random() * positions.length)];\r\n    \r\n    const baseAttributes = {\r\n      speed: 60 + Math.floor(Math.random() * 30),\r\n      strength: 60 + Math.floor(Math.random() * 30),\r\n      stamina: 60 + Math.floor(Math.random() * 30),\r\n      agility: 60 + Math.floor(Math.random() * 30),\r\n      intelligence: 60 + Math.floor(Math.random() * 30),\r\n      kicking: 60 + Math.floor(Math.random() * 30),\r\n      marking: 60 + Math.floor(Math.random() * 30),\r\n      handball: 60 + Math.floor(Math.random() * 30),\r\n      tackling: 60 + Math.floor(Math.random() * 30),\r\n    };\r\n    \r\n    // Add position-specific attributes\r\n    let positionAttributes = {};\r\n    switch (position) {\r\n      case \"Forward\":\r\n        positionAttributes = {\r\n          goalkicking: 70 + Math.floor(Math.random() * 25),\r\n          crumbing: 60 + Math.floor(Math.random() * 30)\r\n        };\r\n        break;\r\n      case \"Midfielder\":\r\n        positionAttributes = {\r\n          clearances: 70 + Math.floor(Math.random() * 25),\r\n          insidePlay: 70 + Math.floor(Math.random() * 25)\r\n        };\r\n        break;\r\n      case \"Defender\":\r\n        positionAttributes = {\r\n          intercept: 70 + Math.floor(Math.random() * 25),\r\n          rebound: 70 + Math.floor(Math.random() * 25)\r\n        };\r\n        break;\r\n      case \"Ruck\":\r\n        positionAttributes = {\r\n          tapwork: 70 + Math.floor(Math.random() * 25),\r\n          followUp: 70 + Math.floor(Math.random() * 25)\r\n        };\r\n        break;\r\n      case \"Utility\":\r\n        // Utilities are all-rounders\r\n        positionAttributes = {};\r\n        break;\r\n    }\r\n    \r\n    const player: Player = {\r\n      id: `gen_${teamId}_${i}`,\r\n      name: `${firstName} ${lastName}`,\r\n      teamId,\r\n      age: 18 + Math.floor(Math.random() * 15),\r\n      height: 175 + Math.floor(Math.random() * 25),\r\n      weight: 75 + Math.floor(Math.random() * 25),\r\n      position,\r\n      attributes: {\r\n        ...baseAttributes,\r\n        ...positionAttributes\r\n      },\r\n      form: 60 + Math.floor(Math.random() * 30),\r\n      fitness: 70 + Math.floor(Math.random() * 30),\r\n      morale: 60 + Math.floor(Math.random() * 30),\r\n      value: 200 + Math.floor(Math.random() * 800),\r\n      contract: {\r\n        yearsRemaining: 1 + Math.floor(Math.random() * 4),\r\n        salary: 150 + Math.floor(Math.random() * 600)\r\n      },\r\n      stats: {\r\n        games: 0,\r\n        goals: 0,\r\n        behinds: 0,\r\n        disposals: 0,\r\n        marks: 0,\r\n        tackles: 0\r\n      }\r\n    };\r\n    \r\n    players.push(player);\r\n  }\r\n  \r\n  return players;\r\n}\r\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\data\\\\AFLManager\\\\gameState.ts\"\n);\nimport.meta.hot.lastModified = \"1747543677774.515\";\n}\n// REMIX HMR END\n\n// Game State Management for AFL Manager\r\n\r\nimport { Team, teams as allTeamsData } from \"./teams\";\r\nimport { Player, players as allPlayersData } from \"./players\";\r\nimport {\r\n  SeasonPhase,\r\n  SpecialRound,\r\n  FormRecord,\r\n  PerformanceTrend,\r\n  PlayerDevelopmentRecord,\r\n  TeamComparison,\r\n  KeyEvent\r\n} from \"./calendarTypes\";\r\n\r\nexport interface LadderPosition {\r\n  teamId: string;\r\n  played: number;\r\n  wins: number;\r\n  losses: number;\r\n  draws: number;\r\n  pointsFor: number;\r\n  pointsAgainst: number;\r\n  percentage: number;\r\n  points: number;\r\n}\r\n\r\nexport interface MatchScore {\r\n  goals: number;\r\n  behinds: number;\r\n  total: number;\r\n}\r\n\r\nexport interface MatchEvent {\r\n  type: \"goal\" | \"behind\" | \"injury\" | \"substitution\" | \"quarter\" | \"final\";\r\n  teamId?: string;\r\n  playerId?: string;\r\n  quarter?: number;\r\n  message: string;\r\n  timestamp: number; // seconds into the match\r\n}\r\n\r\nexport interface MatchStats {\r\n  disposals: Record<string, number>; // playerId: count\r\n  marks: Record<string, number>;\r\n  tackles: Record<string, number>;\r\n  goals: Record<string, number>;\r\n  behinds: Record<string, number>;\r\n}\r\n\r\nexport interface Match {\r\n  id: string;\r\n  round: number;\r\n  homeTeamId: string;\r\n  awayTeamId: string;\r\n  venue: string;\r\n  date: string;\r\n  completed: boolean;\r\n  specialEvent?: string; // For special rounds like \"ANZAC Day\" or \"Dreamtime at the 'G\"\r\n  result?: {\r\n    homeScore: MatchScore;\r\n    awayScore: MatchScore;\r\n    events: MatchEvent[];\r\n    stats: MatchStats;\r\n  };\r\n}\r\n\r\nexport type ObjectiveType = \r\n  | \"ladder_position\" \r\n  | \"win_count\" \r\n  | \"develop_players\" \r\n  | \"finals\" \r\n  | \"premiership\";\r\n\r\nexport interface Objective {\r\n  type: ObjectiveType;\r\n  description: string;\r\n  target: number | string;\r\n  reward: number; // financial reward in thousands\r\n  completed: boolean;\r\n}\r\n\r\nexport interface GameSettings {\r\n  difficulty: \"easy\" | \"medium\" | \"hard\";\r\n  matchSimSpeed: \"slow\" | \"medium\" | \"fast\";\r\n  injuryFrequency: \"low\" | \"medium\" | \"high\";\r\n  transferActivity: \"low\" | \"medium\" | \"high\";\r\n}\r\n\r\nexport type TrainingFocus = \r\n  | \"attack\" \r\n  | \"defense\" \r\n  | \"fitness\" \r\n  | \"teamwork\" \r\n  | \"set_pieces\" \r\n  | \"recovery\";\r\n\r\nexport interface TrainingSession {\r\n  id: string;\r\n  date: string;\r\n  focus: TrainingFocus;\r\n  intensity: \"light\" | \"medium\" | \"intense\";\r\n  playerIds: string[];\r\n  completed: boolean;\r\n}\r\n\r\nexport interface PressConference {\r\n  id: string;\r\n  date: string;\r\n  topic: string;\r\n  questions: {\r\n    question: string;\r\n    options: string[];\r\n    selectedAnswer?: string;\r\n  }[];\r\n  completed: boolean;\r\n  impact?: {\r\n    morale?: number;\r\n    fanSupport?: number;\r\n    boardConfidence?: number;\r\n  };\r\n}\r\n\r\nexport interface UserPrompt {\r\n  id: string;\r\n  type: 'information' | 'decision'; // Information (e.g., event occurred) or Decision (e.g., draft pick)\r\n  title: string;\r\n  message: string;\r\n  relatedEntityId?: string; // e.g., player ID for injury, event ID for calendar event\r\n  // For decisions, options would be provided\r\n  // options?: { text: string; actionId: string; payload?: any }[]; \r\n  // For now, prompts are informational and will be cleared, or require specific handling outside this system.\r\n  requiresAcknowledgement?: boolean; // If true, user must actively dismiss it.\r\n}\r\n\r\nexport interface GameState {\r\n  initialized: boolean;\r\n  userTeamId: string | null;\r\n  currentSeason: number;\r\n  currentRound: number;\r\n  currentDate: string; // ISO date string\r\n  currentDayOfWeek: number; // 0 for Sunday, 1 for Monday, ..., 6 for Saturday\r\n  seasonFixtures: Match[];\r\n  ladder: LadderPosition[];\r\n  objectives: Objective[];\r\n  finances: {\r\n    balance: number; // in thousands\r\n    weeklyWage: number;\r\n    sponsorships: number;\r\n    matchDayRevenue: number;\r\n    merchandiseRevenue: number;\r\n  };\r\n  settings: GameSettings;\r\n  lastUpdated: string; // ISO date string\r\n  trainingSessions: TrainingSession[];\r\n  pressConferences: PressConference[];\r\n  morale: number; // Team morale (0-100)\r\n  fanSupport: number; // Fan support (0-100)\r\n  boardConfidence: number; // Board confidence (0-100)\r\n  \r\n  // New properties for enhanced Calendar\r\n  seasonPhases: SeasonPhase[];\r\n  currentPhase: string; // \"pre_season\", \"regular_season\", \"finals\", \"off_season\"\r\n  seasonProgress: number; // 0-100%\r\n  specialRounds: SpecialRound[];\r\n  \r\n  // New properties for enhanced Dashboard\r\n  formGuide: FormRecord[];\r\n  performanceTrends: PerformanceTrend[];\r\n  playerDevelopment: PlayerDevelopmentRecord[];\r\n  teamComparisons: TeamComparison[];\r\n\r\n  // New properties for interactive match flow\r\n  activeMatchId?: string | null;\r\n  matchDayPhase?: \"none\" | \"pre_match\" | \"live_match\" | \"post_match\";\r\n\r\n  // New properties for calendar overhaul iteration 1\r\n  lastDailySummary: string[] | null;\r\n  userPrompts: UserPrompt[]; \r\n}\r\n\r\n// Initial game state\r\nexport const initialGameState: GameState = {\r\n  initialized: false,\r\n  userTeamId: null,\r\n  currentSeason: 2025,\r\n  currentRound: 1,\r\n  currentDate: \"2025-03-01\", // Start of season\r\n  currentDayOfWeek: new Date(\"2025-03-01\").getDay(), // Calculate initial day of week\r\n  seasonFixtures: [],\r\n  ladder: [],\r\n  objectives: [],\r\n  finances: {\r\n    balance: 0,\r\n    weeklyWage: 0,\r\n    sponsorships: 0,\r\n    matchDayRevenue: 0,\r\n    merchandiseRevenue: 0\r\n  },\r\n  settings: {\r\n    difficulty: \"medium\",\r\n    matchSimSpeed: \"medium\",\r\n    injuryFrequency: \"medium\",\r\n    transferActivity: \"medium\"\r\n  },\r\n  lastUpdated: new Date().toISOString(),\r\n  trainingSessions: [],\r\n  pressConferences: [],\r\n  morale: 75,\r\n  fanSupport: 75,\r\n  boardConfidence: 75,\r\n  \r\n  // Initialize new calendar properties\r\n  seasonPhases: [],\r\n  currentPhase: \"pre_season\",\r\n  seasonProgress: 0,\r\n  specialRounds: [],\r\n  \r\n  // Initialize new dashboard properties\r\n  formGuide: [],\r\n  performanceTrends: [],\r\n  playerDevelopment: [],\r\n  teamComparisons: [],\r\n  activeMatchId: null,\r\n  matchDayPhase: \"none\",\r\n  lastDailySummary: null,\r\n  userPrompts: [],\r\n};\r\n\r\n// Generate a full season of fixtures with realistic AFL season structure\r\nexport function generateFixtures(teams: Team[], season: number): Match[] {\r\n  const fixtures: Match[] = [];\r\n  const totalRounds = 23; // Standard AFL season length\r\n\r\n  // Generate round dates based on AFL season structure\r\n  const roundDates = generateRoundDates(season);\r\n  \r\n  // Define traditional rivalries and blockbuster matches\r\n  const rivalries = [\r\n    { team1: \"collingwood\", team2: \"essendon\" }, // ANZAC Day\r\n    { team1: \"richmond\", team2: \"essendon\" }, // Dreamtime at the 'G\r\n    { team1: \"collingwood\", team2: \"carlton\" }, // Traditional rivalry\r\n    { team1: \"west-coast\", team2: \"fremantle\" }, // Western Derby\r\n    { team1: \"adelaide\", team2: \"port-adelaide\" }, // Showdown\r\n    { team1: \"sydney\", team2: \"gws\" }, // Sydney Derby\r\n    { team1: \"geelong\", team2: \"hawthorn\" }, // Easter Monday\r\n    { team1: \"brisbane\", team2: \"gold-coast\" }, // QClash\r\n    { team1: \"melbourne\", team2: \"collingwood\" }, // Queen's Birthday\r\n  ];\r\n  \r\n  // For each round\r\n  for (let round = 1; round <= totalRounds; round++) {\r\n    // Start with all teams available for this round\r\n    const availableTeams = [...teams];\r\n    const roundMatches: Match[] = [];\r\n    \r\n    // First, schedule any special rivalries for this round\r\n    if (round === 6) { // ANZAC Day round\r\n      scheduleRivalryMatch(availableTeams, roundMatches, \"collingwood\", \"essendon\", round, roundDates[round-1], \"MCG\", \"ANZAC Day Match\");\r\n    }\r\n    \r\n    if (round === 10) { // Indigenous Round (Sir Doug Nicholls Round)\r\n      scheduleRivalryMatch(availableTeams, roundMatches, \"richmond\", \"essendon\", round, roundDates[round-1], \"MCG\", \"Dreamtime at the 'G\");\r\n    }\r\n    \r\n    if (round === 13) { // Queen's Birthday\r\n      scheduleRivalryMatch(availableTeams, roundMatches, \"melbourne\", \"collingwood\", round, roundDates[round-1], \"MCG\", \"Queen's Birthday Match\");\r\n    }\r\n    \r\n    // Fill the rest of the round with random matches\r\n    while (availableTeams.length >= 2) {\r\n      const homeTeamIndex = Math.floor(Math.random() * availableTeams.length);\r\n      const homeTeam = availableTeams[homeTeamIndex];\r\n      availableTeams.splice(homeTeamIndex, 1);\r\n      \r\n      const awayTeamIndex = Math.floor(Math.random() * availableTeams.length);\r\n      const awayTeam = availableTeams[awayTeamIndex];\r\n      availableTeams.splice(awayTeamIndex, 1);\r\n      \r\n      roundMatches.push({\r\n        id: `match_${round}_${homeTeam.id}_${awayTeam.id}`,\r\n        round,\r\n        homeTeamId: homeTeam.id,\r\n        awayTeamId: awayTeam.id,\r\n        venue: homeTeam.homeGround,\r\n        date: roundDates[round-1],\r\n        completed: false\r\n      });\r\n    }\r\n    \r\n    fixtures.push(...roundMatches);\r\n  }\r\n  \r\n  return fixtures;\r\n}\r\n\r\n// Helper function to generate realistic round dates for an AFL season\r\nfunction generateRoundDates(year: number): string[] {\r\n  const roundDates: string[] = [];\r\n  \r\n  // Season typically starts in late March and ends in August\r\n  const startDate = new Date(`${year}-03-15`); // Mid-March start\r\n  \r\n  // Generate a date for each round\r\n  for (let i = 0; i < 23; i++) {\r\n    const roundDate = new Date(startDate);\r\n    // Add 7 days for each round\r\n    roundDate.setDate(startDate.getDate() + (i * 7));\r\n    \r\n    // Format as YYYY-MM-DD\r\n    const formattedDate = roundDate.toISOString().split('T')[0];\r\n    roundDates.push(formattedDate);\r\n  }\r\n  \r\n  return roundDates;\r\n}\r\n\r\n// Helper function to schedule rivalry matches\r\nfunction scheduleRivalryMatch(\r\n  availableTeams: Team[],\r\n  roundMatches: Match[],\r\n  team1Id: string,\r\n  team2Id: string,\r\n  round: number,\r\n  date: string,\r\n  venue: string,\r\n  description?: string\r\n): void {\r\n  // Find the teams\r\n  const team1Index = availableTeams.findIndex(t => t.id === team1Id);\r\n  const team2Index = availableTeams.findIndex(t => t.id === team2Id);\r\n  \r\n  // If both teams are available, schedule the rivalry match\r\n  if (team1Index !== -1 && team2Index !== -1) {\r\n    const team1 = availableTeams[team1Index];\r\n    const team2 = availableTeams[team2Index];\r\n    \r\n    // Remove teams from available list\r\n    availableTeams.splice(Math.max(team1Index, team2Index), 1);\r\n    availableTeams.splice(Math.min(team1Index, team2Index), 1);\r\n    \r\n    // Create the match\r\n    roundMatches.push({\r\n      id: `match_${round}_${team1.id}_${team2.id}`,\r\n      round,\r\n      homeTeamId: team1.id,\r\n      awayTeamId: team2.id,\r\n      venue: venue || team1.homeGround,\r\n      date,\r\n      completed: false,\r\n      specialEvent: description\r\n    });\r\n  }\r\n}\r\n\r\n// Initialize ladder\r\nexport function initializeLadder(teams: Team[]): LadderPosition[] {\r\n  return teams.map(team => ({\r\n    teamId: team.id,\r\n    played: 0,\r\n    wins: 0,\r\n    losses: 0,\r\n    draws: 0,\r\n    pointsFor: 0,\r\n    pointsAgainst: 0,\r\n    percentage: 0,\r\n    points: 0\r\n  }));\r\n}\r\n\r\n// Generate objectives based on team strength\r\nexport function generateObjectives(team: Team): Objective[] {\r\n  const objectives: Objective[] = [];\r\n  \r\n  // Calculate team overall rating\r\n  const overallRating = (\r\n    team.attributes.attack + \r\n    team.attributes.midfield + \r\n    team.attributes.defense + \r\n    team.attributes.coaching\r\n  ) / 4;\r\n  \r\n  // Set objectives based on team strength\r\n  if (overallRating >= 85) {\r\n    // Top team - premiership contender\r\n    objectives.push({\r\n      type: \"ladder_position\",\r\n      description: \"Finish in the top 4\",\r\n      target: 4,\r\n      reward: 500,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"finals\",\r\n      description: \"Reach the Grand Final\",\r\n      target: \"grand_final\",\r\n      reward: 1000,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"premiership\",\r\n      description: \"Win the Premiership\",\r\n      target: \"win\",\r\n      reward: 2000,\r\n      completed: false\r\n    });\r\n  } else if (overallRating >= 80) {\r\n    // Strong team - finals contender\r\n    objectives.push({\r\n      type: \"ladder_position\",\r\n      description: \"Finish in the top 8\",\r\n      target: 8,\r\n      reward: 400,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"finals\",\r\n      description: \"Win a finals match\",\r\n      target: \"win_final\",\r\n      reward: 800,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"win_count\",\r\n      description: \"Win at least 14 matches\",\r\n      target: 14,\r\n      reward: 600,\r\n      completed: false\r\n    });\r\n  } else if (overallRating >= 75) {\r\n    // Mid-table team - pushing for finals\r\n    objectives.push({\r\n      type: \"ladder_position\",\r\n      description: \"Finish in the top 10\",\r\n      target: 10,\r\n      reward: 300,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"win_count\",\r\n      description: \"Win at least 12 matches\",\r\n      target: 12,\r\n      reward: 500,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"develop_players\",\r\n      description: \"Develop 3 players under 23 by +5 rating points\",\r\n      target: 3,\r\n      reward: 400,\r\n      completed: false\r\n    });\r\n  } else {\r\n    // Rebuilding team - development focus\r\n    objectives.push({\r\n      type: \"ladder_position\",\r\n      description: \"Avoid finishing in the bottom 4\",\r\n      target: 14,\r\n      reward: 300,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"win_count\",\r\n      description: \"Win at least 8 matches\",\r\n      target: 8,\r\n      reward: 400,\r\n      completed: false\r\n    });\r\n    \r\n    objectives.push({\r\n      type: \"develop_players\",\r\n      description: \"Develop 5 players under 23 by +5 rating points\",\r\n      target: 5,\r\n      reward: 500,\r\n      completed: false\r\n    });\r\n  }\r\n  \r\n  return objectives;\r\n}\r\n\r\n// Generate season phases based on the current year\r\nexport function generateSeasonPhases(year: number): SeasonPhase[] {\r\n  return [\r\n    {\r\n      id: \"off_season\",\r\n      name: \"Off-Season\",\r\n      startDate: `${year-1}-10-01`,\r\n      endDate: `${year}-02-28`,\r\n      description: \"Off-season period including draft and trade periods\",\r\n      color: \"#9c27b0\",\r\n      keyEvents: [\r\n        {\r\n          id: \"trade_period\",\r\n          name: \"Trade Period\",\r\n          date: `${year-1}-10-10`,\r\n          type: \"trade\",\r\n          description: \"10-day trading period\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"list_lodgment\",\r\n          name: \"List Lodgment Deadline\",\r\n          date: `${year-1}-10-31`,\r\n          type: \"milestone\",\r\n          description: \"Final list submissions due\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"national_draft\",\r\n          name: \"National Draft\",\r\n          date: `${year-1}-11-25`,\r\n          type: \"draft\",\r\n          description: \"National Draft day\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"rookie_draft\",\r\n          name: \"Rookie Draft\",\r\n          date: `${year-1}-11-26`,\r\n          type: \"draft\",\r\n          description: \"Rookie Draft day\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"preseason_draft\",\r\n          name: \"Pre-Season Draft\",\r\n          date: `${year-1}-12-03`,\r\n          type: \"draft\",\r\n          description: \"Pre-Season Draft day\",\r\n          completed: false\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"pre_season\",\r\n      name: \"Pre-Season\",\r\n      startDate: `${year}-01-01`,\r\n      endDate: `${year}-03-15`,\r\n      description: \"Pre-season competitions and preparation\",\r\n      color: \"#ff9800\",\r\n      keyEvents: [\r\n        {\r\n          id: \"training_block_1\",\r\n          name: \"Training Block 1\",\r\n          date: `${year}-01-10`,\r\n          type: \"training\",\r\n          description: \"Endurance and strength focus\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"training_block_2\",\r\n          name: \"Training Block 2\",\r\n          date: `${year}-02-01`,\r\n          type: \"training\",\r\n          description: \"Skills and tactical development\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"practice_match_1\",\r\n          name: \"Practice Match 1\",\r\n          date: `${year}-02-20`,\r\n          type: \"match\",\r\n          description: \"First pre-season match\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"practice_match_2\",\r\n          name: \"Practice Match 2\",\r\n          date: `${year}-02-27`,\r\n          type: \"match\",\r\n          description: \"Second pre-season match\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"captain_selection\",\r\n          name: \"Captain Selection\",\r\n          date: `${year}-03-01`,\r\n          type: \"milestone\",\r\n          description: \"Selection of team captain and leadership group\",\r\n          completed: false\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"regular_season\",\r\n      name: \"Regular Season\",\r\n      startDate: `${year}-03-16`,\r\n      endDate: `${year}-08-31`,\r\n      description: \"Home and away season - 23 rounds\",\r\n      color: \"#2196f3\",\r\n      keyEvents: [\r\n        {\r\n          id: \"season_start\",\r\n          name: \"Season Start\",\r\n          date: `${year}-03-16`,\r\n          type: \"milestone\",\r\n          description: \"Start of the regular season\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"anzac_day\",\r\n          name: \"ANZAC Day\",\r\n          date: `${year}-04-25`,\r\n          type: \"special_round\",\r\n          description: \"ANZAC Day commemorative matches\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"indigenous_round\",\r\n          name: \"Sir Doug Nicholls Round\",\r\n          date: `${year}-05-25`,\r\n          type: \"special_round\",\r\n          description: \"Celebrating Indigenous players and culture\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"mid_season_draft\",\r\n          name: \"Mid-Season Draft\",\r\n          date: `${year}-06-01`,\r\n          type: \"draft\",\r\n          description: \"Mid-season draft for injury replacements\",\r\n          completed: false\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"finals\",\r\n      name: \"Finals Series\",\r\n      startDate: `${year}-09-01`,\r\n      endDate: `${year}-09-30`,\r\n      description: \"Finals series including Grand Final\",\r\n      color: \"#f44336\",\r\n      keyEvents: [\r\n        {\r\n          id: \"qualifying_finals\",\r\n          name: \"Qualifying & Elimination Finals\",\r\n          date: `${year}-09-05`,\r\n          type: \"match\",\r\n          description: \"Week 1 of Finals\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"semi_finals\",\r\n          name: \"Semi Finals\",\r\n          date: `${year}-09-12`,\r\n          type: \"match\",\r\n          description: \"Week 2 of Finals\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"preliminary_finals\",\r\n          name: \"Preliminary Finals\",\r\n          date: `${year}-09-19`,\r\n          type: \"match\",\r\n          description: \"Week 3 of Finals\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: \"grand_final\",\r\n          name: \"Grand Final\",\r\n          date: `${year}-09-27`,\r\n          type: \"match\",\r\n          description: \"AFL Grand Final\",\r\n          completed: false\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n}\r\n\r\n// Generate special rounds for the season\r\nexport function generateSpecialRounds(year: number): SpecialRound[] {\r\n  return [\r\n    {\r\n      id: \"anzac_round\",\r\n      name: \"ANZAC Round\",\r\n      round: 6,\r\n      startDate: `${year}-04-24`,\r\n      endDate: `${year}-04-26`,\r\n      description: \"Commemorating ANZAC Day with special matches\",\r\n      iconPath: \"/afl-images/anzac-round.png\"\r\n    },\r\n    {\r\n      id: \"indigenous_round\",\r\n      name: \"Sir Doug Nicholls Round\",\r\n      round: 10,\r\n      startDate: `${year}-05-24`,\r\n      endDate: `${year}-05-26`,\r\n      description: \"Celebrating Indigenous players and culture\",\r\n      iconPath: \"/afl-images/indigenous-round.png\"\r\n    },\r\n    {\r\n      id: \"rivalry_round\",\r\n      name: \"Rivalry Round\",\r\n      round: 15,\r\n      startDate: `${year}-06-28`,\r\n      endDate: `${year}-06-30`,\r\n      description: \"Featuring traditional club rivalries\",\r\n      iconPath: \"/afl-images/rivalry-round.png\"\r\n    },\r\n    {\r\n      id: \"multicultural_round\",\r\n      name: \"Multicultural Round\",\r\n      round: 18,\r\n      startDate: `${year}-07-19`,\r\n      endDate: `${year}-07-21`,\r\n      description: \"Celebrating diversity in Australian Football\",\r\n      iconPath: \"/afl-images/multicultural-round.png\"\r\n    }\r\n  ];\r\n}\r\n\r\n// Initialize player development records from player data\r\nexport function initializePlayerDevelopment(players: Player[], teamId: string): PlayerDevelopmentRecord[] {\r\n  return players\r\n    .filter(player => player.teamId === teamId)\r\n    .map(player => {\r\n      // Calculate average of all player attributes\r\n      const attributeValues = [\r\n        player.attributes.speed,\r\n        player.attributes.strength,\r\n        player.attributes.stamina,\r\n        player.attributes.agility,\r\n        player.attributes.intelligence,\r\n        player.attributes.kicking,\r\n        player.attributes.marking,\r\n        player.attributes.handball,\r\n        player.attributes.tackling\r\n      ];\r\n      \r\n      // Add optional attributes if they exist\r\n      if (player.attributes.goalkicking) attributeValues.push(player.attributes.goalkicking);\r\n      if (player.attributes.crumbing) attributeValues.push(player.attributes.crumbing);\r\n      if (player.attributes.clearances) attributeValues.push(player.attributes.clearances);\r\n      if (player.attributes.insidePlay) attributeValues.push(player.attributes.insidePlay);\r\n      if (player.attributes.intercept) attributeValues.push(player.attributes.intercept);\r\n      if (player.attributes.rebound) attributeValues.push(player.attributes.rebound);\r\n      if (player.attributes.tapwork) attributeValues.push(player.attributes.tapwork);\r\n      if (player.attributes.followUp) attributeValues.push(player.attributes.followUp);\r\n      \r\n      // Calculate overall rating as the average of all attributes\r\n      const overallRating = Math.floor(\r\n        attributeValues.reduce((sum, val) => sum + val, 0) / attributeValues.length\r\n      );\r\n      \r\n      // Calculate potential based on age - younger players have higher potential\r\n      const potentialModifier = Math.max(0, 25 - player.age);\r\n      const potentialRating = Math.min(99, overallRating + potentialModifier);\r\n      \r\n      return {\r\n        playerId: player.id,\r\n        name: player.name,\r\n        position: player.position,\r\n        age: player.age,\r\n        startOfSeasonRating: overallRating,\r\n        currentRating: overallRating,\r\n        potentialRating: potentialRating,\r\n        attributeChanges: {}\r\n      };\r\n    });\r\n}\r\n\r\n// Initialize game state with a selected team\r\nexport function initializeGameState(teamId: string, teams: Team[], players: Player[]): GameState {\r\n  const selectedTeam = teams.find(team => team.id === teamId);\r\n  \r\n  if (!selectedTeam) {\r\n    throw new Error(\"Invalid team selected\");\r\n  }\r\n  \r\n  const fixtures = generateFixtures(teams, 2025);\r\n  const ladder = initializeLadder(teams);\r\n  const objectives = generateObjectives(selectedTeam);\r\n  \r\n  // Calculate team finances based on team attributes\r\n  const teamRating = (\r\n    selectedTeam.attributes.attack + \r\n    selectedTeam.attributes.midfield + \r\n    selectedTeam.attributes.defense + \r\n    selectedTeam.attributes.coaching\r\n  ) / 4;\r\n  \r\n  // Calculate weekly wage\r\n  const teamPlayers = players.filter(player => player.teamId === teamId);\r\n  const weeklyWage = teamPlayers.reduce((total, player) => total + player.contract.salary / 52, 0);\r\n  \r\n  // Generate initial press conference\r\n  const initialPressConference: PressConference = {\r\n    id: \"initial_press_conference\",\r\n    date: \"2025-03-01\",\r\n    topic: \"Season Expectations\",\r\n    questions: [\r\n      {\r\n        question: \"What are your expectations for the season?\",\r\n        options: [\r\n          \"We're aiming for the premiership.\",\r\n          \"We want to make the finals.\",\r\n          \"We're focusing on development this season.\",\r\n          \"I prefer not to set specific targets.\"\r\n        ]\r\n      },\r\n      {\r\n        question: \"How would you describe your coaching style?\",\r\n        options: [\r\n          \"Attacking and aggressive.\",\r\n          \"Balanced and adaptable.\",\r\n          \"Defensive and disciplined.\",\r\n          \"Player-focused and developmental.\"\r\n        ]\r\n      },\r\n      {\r\n        question: \"What's your plan for developing young talent?\",\r\n        options: [\r\n          \"Give them game time immediately.\",\r\n          \"Gradually integrate them with experienced players.\",\r\n          \"Focus on training before giving them matches.\",\r\n          \"Loan them out to get experience elsewhere.\"\r\n        ]\r\n      }\r\n    ],\r\n    completed: false\r\n  };\r\n  \r\n  // Generate season phases and special rounds\r\n  const seasonPhases = generateSeasonPhases(2025);\r\n  const specialRounds = generateSpecialRounds(2025);\r\n  \r\n  // Initialize player development\r\n  const playerDevelopment = initializePlayerDevelopment(players, teamId);\r\n  \r\n  const initialDate = \"2025-03-01\";\r\n\r\n  return {\r\n    initialized: true,\r\n    userTeamId: teamId,\r\n    currentSeason: 2025,\r\n    currentRound: 1,\r\n    currentDate: initialDate,\r\n    currentDayOfWeek: new Date(initialDate).getDay(),\r\n    seasonFixtures: fixtures,\r\n    ladder,\r\n    objectives,\r\n    finances: {\r\n      balance: 5000 + (teamRating - 70) * 100, // Base 5M with adjustment for team quality\r\n      weeklyWage: Math.round(weeklyWage),\r\n      sponsorships: 1000 + (teamRating - 70) * 50,\r\n      matchDayRevenue: 500 + (teamRating - 70) * 25,\r\n      merchandiseRevenue: 300 + (teamRating - 70) * 20\r\n    },\r\n    settings: {\r\n      difficulty: \"medium\",\r\n      matchSimSpeed: \"medium\",\r\n      injuryFrequency: \"medium\",\r\n      transferActivity: \"medium\"\r\n    },\r\n    lastUpdated: new Date().toISOString(),\r\n    trainingSessions: [],\r\n    pressConferences: [initialPressConference],\r\n    morale: 75,\r\n    fanSupport: 75,\r\n    boardConfidence: 75,\r\n    \r\n    // Initialize new calendar properties\r\n    seasonPhases,\r\n    currentPhase: \"pre_season\",\r\n    seasonProgress: 0,\r\n    specialRounds,\r\n    \r\n    // Initialize new dashboard properties\r\n    formGuide: [],\r\n    performanceTrends: [],\r\n    playerDevelopment,\r\n    teamComparisons: [],\r\n    activeMatchId: null,\r\n    matchDayPhase: \"none\",\r\n    lastDailySummary: null,\r\n    userPrompts: [],\r\n  };\r\n}\r\n\r\n// --- START OF NEW MATCH SIMULATION AND LADDER LOGIC ---\r\n\r\n/**\r\n * Simulates a single match outcome based on team attributes.\r\n * For now, player stats (MatchStats) and detailed events are not generated.\r\n */\r\nfunction simulateMatch(\r\n  matchToSimulate: Match,\r\n  homeTeam: Team,\r\n  awayTeam: Team\r\n): NonNullable<Match['result']> { // Ensure result is not undefined\r\n  const homeAdvantage = 5; // Small advantage for home team\r\n\r\n  // Base score potential on team attributes (simplified)\r\n  let homeScorePotential =\r\n    homeTeam.attributes.attack * (Math.random() * 0.6 + 0.7) + // Attack strength\r\n    homeTeam.attributes.midfield * (Math.random() * 0.4 + 0.3) + // Midfield control\r\n    (Math.random() * 20) + // Random factor\r\n    homeAdvantage;\r\n  \r\n  let awayScorePotential =\r\n    awayTeam.attributes.attack * (Math.random() * 0.6 + 0.7) + // Attack strength\r\n    awayTeam.attributes.midfield * (Math.random() * 0.4 + 0.3) + // Midfield control\r\n    (Math.random() * 20); // Random factor\r\n\r\n  // Adjust based on defense (opponent's defense reduces potential)\r\n  homeScorePotential -= awayTeam.attributes.defense * (Math.random() * 0.3);\r\n  awayScorePotential -= homeTeam.attributes.defense * (Math.random() * 0.3);\r\n  \r\n  // Ensure potential is not negative\r\n  homeScorePotential = Math.max(0, homeScorePotential);\r\n  awayScorePotential = Math.max(0, awayScorePotential);\r\n\r\n  // Convert potential to goals (e.g., every 8-10 points of potential is a goal)\r\n  const homeGoals = Math.floor(homeScorePotential / (Math.random() * 3 + 7)); \r\n  const awayGoals = Math.floor(awayScorePotential / (Math.random() * 3 + 7));\r\n\r\n  // Behinds: typically similar to or slightly more than goals\r\n  const homeBehinds = Math.floor(homeGoals * (Math.random() * 0.8 + 0.7) + (Math.random() * 5));\r\n  const awayBehinds = Math.floor(awayGoals * (Math.random() * 0.8 + 0.7) + (Math.random() * 5));\r\n\r\n  const homeTotalScore = homeGoals * 6 + homeBehinds;\r\n  const awayTotalScore = awayGoals * 6 + awayBehinds;\r\n\r\n  return {\r\n    homeScore: { goals: homeGoals, behinds: homeBehinds, total: homeTotalScore },\r\n    awayScore: { goals: awayGoals, behinds: awayBehinds, total: awayTotalScore },\r\n    events: [ // Basic event to signify match completion\r\n      { type: \"final\", message: `Final Siren: ${homeTeam.name} ${homeTotalScore} vs ${awayTeam.name} ${awayTotalScore}`, timestamp: 0 }\r\n    ],\r\n    stats: { // Player stats are not simulated in this basic version\r\n      disposals: {},\r\n      marks: {},\r\n      tackles: {},\r\n      goals: {},\r\n      behinds: {}\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Updates the ladder based on a single completed match.\r\n */\r\nfunction updateLadderAfterMatch(\r\n  currentLadder: LadderPosition[],\r\n  completedMatch: Match,\r\n  homeTeamId: string,\r\n  awayTeamId: string\r\n): LadderPosition[] {\r\n  if (!completedMatch.result) {\r\n    console.error(\"Match result missing for ladder update:\", completedMatch);\r\n    return currentLadder;\r\n  }\r\n\r\n  const { homeScore, awayScore } = completedMatch.result;\r\n  const newLadder = currentLadder.map(pos => ({ ...pos })); // Deep copy\r\n\r\n  const homeTeamLadderPos = newLadder.find(p => p.teamId === homeTeamId);\r\n  const awayTeamLadderPos = newLadder.find(p => p.teamId === awayTeamId);\r\n\r\n  if (homeTeamLadderPos) {\r\n    homeTeamLadderPos.played += 1;\r\n    homeTeamLadderPos.pointsFor += homeScore.total;\r\n    homeTeamLadderPos.pointsAgainst += awayScore.total;\r\n  } else {\r\n    console.error(`Ladder position not found for home team ID: ${homeTeamId}`);\r\n  }\r\n\r\n  if (awayTeamLadderPos) {\r\n    awayTeamLadderPos.played += 1;\r\n    awayTeamLadderPos.pointsFor += awayScore.total;\r\n    awayTeamLadderPos.pointsAgainst += homeScore.total;\r\n  } else {\r\n     console.error(`Ladder position not found for away team ID: ${awayTeamId}`);\r\n  }\r\n\r\n  if (homeTeamLadderPos && awayTeamLadderPos) {\r\n    if (homeScore.total > awayScore.total) { // Home win\r\n      homeTeamLadderPos.wins += 1;\r\n      homeTeamLadderPos.points += 4;\r\n      awayTeamLadderPos.losses += 1;\r\n    } else if (awayScore.total > homeScore.total) { // Away win\r\n      awayTeamLadderPos.wins += 1;\r\n      awayTeamLadderPos.points += 4;\r\n      homeTeamLadderPos.losses += 1;\r\n    } else { // Draw\r\n      homeTeamLadderPos.draws += 1;\r\n      homeTeamLadderPos.points += 2;\r\n      awayTeamLadderPos.draws += 1;\r\n      awayTeamLadderPos.points += 2;\r\n    }\r\n\r\n    // Recalculate percentage\r\n    homeTeamLadderPos.percentage = homeTeamLadderPos.pointsAgainst === 0 ? (homeTeamLadderPos.pointsFor > 0 ? 9999 : 0) : (homeTeamLadderPos.pointsFor / homeTeamLadderPos.pointsAgainst) * 100;\r\n    awayTeamLadderPos.percentage = awayTeamLadderPos.pointsAgainst === 0 ? (awayTeamLadderPos.pointsFor > 0 ? 9999 : 0) : (awayTeamLadderPos.pointsFor / awayTeamLadderPos.pointsAgainst) * 100;\r\n  }\r\n  \r\n  return newLadder;\r\n}\r\n\r\n// Helper function to process all scheduled matches for a given date\r\nfunction processScheduledMatches(\r\n  currentFixtures: Match[],\r\n  currentDate: string,\r\n  allTeams: Team[],\r\n  dailySummary: string[]\r\n): { updatedFixtures: Match[]; newlyCompleted: Match[] } {\r\n  const newlyCompleted: Match[] = [];\r\n  let matchesProcessedToday = 0;\r\n  const updatedFixtures = currentFixtures.map(match => {\r\n    if (match.date === currentDate && !match.completed) {\r\n      const homeTeam = allTeams.find(t => t.id === match.homeTeamId);\r\n      const awayTeam = allTeams.find(t => t.id === match.awayTeamId);\r\n      let simulatedResult: NonNullable<Match['result']>;\r\n\r\n      if (homeTeam && awayTeam) {\r\n        simulatedResult = simulateMatch(match, homeTeam, awayTeam);\r\n        dailySummary.push(`Match ${match.id} simulated. ${homeTeam.name} ${simulatedResult.homeScore.total} vs ${awayTeam.name} ${simulatedResult.awayScore.total}`);\r\n        matchesProcessedToday++;\r\n      } else {\r\n        dailySummary.push(`Error: Could not find home or away team for match: ${match.id}`);\r\n        simulatedResult = { // Default forfeit result\r\n          homeScore: { goals: 0, behinds: 0, total: 0 },\r\n          awayScore: { goals: 0, behinds: 0, total: 0 },\r\n          events: [{type: \"final\", message: \"Match forfeited due to missing team data.\", timestamp: 0}],\r\n          stats: { disposals: {}, marks: {}, tackles: {}, goals: {}, behinds: {} }\r\n        };\r\n      }\r\n      const completedMatch = { ...match, result: simulatedResult, completed: true };\r\n      newlyCompleted.push(completedMatch);\r\n      return completedMatch;\r\n    }\r\n    return match;\r\n  });\r\n  if (matchesProcessedToday === 0 && newlyCompleted.length === 0) {\r\n    dailySummary.push(\"No matches scheduled or processed today.\");\r\n  }\r\n  return { updatedFixtures, newlyCompleted };\r\n}\r\n\r\n// Helper function to update the ladder based on newly completed matches\r\nfunction updateLadderForCompletedMatches(\r\n  currentLadder: LadderPosition[],\r\n  newlyCompletedMatches: Match[],\r\n  dailySummary: string[]\r\n): LadderPosition[] {\r\n  let updatedLadder = [...currentLadder.map(l => ({...l}))]; \r\n  if (newlyCompletedMatches.length > 0) {\r\n    newlyCompletedMatches.forEach(completedMatch => {\r\n      updatedLadder = updateLadderAfterMatch(updatedLadder, completedMatch, completedMatch.homeTeamId, completedMatch.awayTeamId);\r\n    });\r\n    dailySummary.push(`Ladder updated reflecting ${newlyCompletedMatches.length} completed match(es).`);\r\n  }\r\n  return updatedLadder;\r\n}\r\n\r\n// Helper function to handle user-specific events if their match was today\r\nfunction handleUserTeamMatchDayEvents(\r\n  currentState: GameState, \r\n  newlyCompletedMatches: Match[],\r\n  allTeams: Team[],\r\n  dailySummary: string[]\r\n): GameState {\r\n  const userTeamId = currentState.userTeamId;\r\n  if (!userTeamId) return currentState;\r\n\r\n  const userMatchJustCompleted = newlyCompletedMatches.find(\r\n    m => m.homeTeamId === userTeamId || m.awayTeamId === userTeamId\r\n  );\r\n\r\n  if (userMatchJustCompleted) {\r\n    if (userMatchJustCompleted.round > currentState.currentRound) {\r\n      currentState.currentRound = userMatchJustCompleted.round;\r\n      dailySummary.push(`Advanced to Round ${currentState.currentRound}.`);\r\n    }\r\n    const opponentId = userMatchJustCompleted.homeTeamId === userTeamId \r\n      ? userMatchJustCompleted.awayTeamId \r\n      : userMatchJustCompleted.homeTeamId;\r\n    const opponent = allTeams.find(t => t.id === opponentId);\r\n    const userTeam = allTeams.find(t => t.id === userTeamId);\r\n\r\n    // Generate post-match press conference only if not already existing for this match\r\n    const presserId = `post_match_${userMatchJustCompleted.id}`;\r\n    if (!currentState.pressConferences.some(pc => pc.id === presserId)) {\r\n      currentState.pressConferences.push({\r\n        id: presserId,\r\n        date: currentState.currentDate, // Should be current game date\r\n        topic: `Post-Match: ${userTeam?.name || 'Your Team'} vs ${opponent?.name || 'Opponent'}`,\r\n        questions: [\r\n          {\r\n            question: \"What are your thoughts on the team's performance today?\",\r\n            options: [\"Very pleased, a great effort.\", \"A mixed bag, some positives and negatives.\", \"Disappointed, we need to improve.\", \"No comment right now.\"]\r\n          },\r\n        ],\r\n        completed: false\r\n      });\r\n      dailySummary.push(`Post-match press conference scheduled for ${userTeam?.name || 'Your Team'}.`);\r\n    }\r\n  }\r\n  return currentState; \r\n}\r\n\r\n// Helper function to process training sessions for the day\r\nfunction processTrainingSessions(currentState: GameState, dailySummary: string[]): GameState {\r\n  const trainingToday = currentState.trainingSessions.find(\r\n    session => session.date === currentState.currentDate && !session.completed\r\n  );\r\n  \r\n  if (trainingToday) {\r\n    currentState.trainingSessions = currentState.trainingSessions.map(session =>\r\n      session.id === trainingToday.id ? { ...session, completed: true } : session\r\n    );\r\n    \r\n\r\n    // Simplified training effects\r\n    let moraleBoost = 0;\r\n    switch (trainingToday.focus) {\r\n      case \"attack\": moraleBoost = 1; break;\r\n      case \"defense\": moraleBoost = 1; break;\r\n      case \"fitness\": moraleBoost = 2; break;\r\n      case \"teamwork\": moraleBoost = 3; break;\r\n      case \"set_pieces\": moraleBoost = 1; break;\r\n      case \"recovery\": moraleBoost = 2; break;\r\n    }\r\n    currentState.morale = Math.min(100, Math.max(0, currentState.morale + moraleBoost));\r\n  }\r\n  return currentState; // Return the modified state\r\n}\r\n\r\n// Helper function to apply random events and metric decay\r\nfunction applyRandomEventsAndDecay(currentState: GameState, dailySummary: string[]): GameState {\r\n  const randomEvent = Math.random();\r\n  let eventDescription: string | null = null;\r\n  if (randomEvent > 0.95) { // Rare positive event\r\n    currentState.morale = Math.min(100, currentState.morale + 5);\r\n    currentState.fanSupport = Math.min(100, currentState.fanSupport + 3);\r\n    eventDescription = \"Unexpected boost in team morale and fan support!\";\r\n  } else if (randomEvent > 0.90) { // Uncommon positive event\r\n    currentState.morale = Math.min(100, currentState.morale + 2);\r\n    currentState.fanSupport = Math.min(100, currentState.fanSupport + 1);\r\n    eventDescription = \"Minor positive vibe around the club today.\";\r\n  } else if (randomEvent < 0.05) { // Rare negative event\r\n    currentState.morale = Math.max(0, currentState.morale - 5);\r\n    currentState.fanSupport = Math.max(0, currentState.fanSupport - 3);\r\n    eventDescription = \"A tough day, morale and fan support took a hit.\";\r\n  } else if (randomEvent < 0.10) { // Uncommon negative event\r\n    currentState.morale = Math.max(0, currentState.morale - 2);\r\n    currentState.fanSupport = Math.max(0, currentState.fanSupport - 1);\r\n    eventDescription = \"Slight dip in morale and fan support.\";\r\n  }\r\n\r\n  if (eventDescription) {\r\n    dailySummary.push(`Random Event: ${eventDescription}`);\r\n  }\r\n\r\n  // Natural decay - these are subtle, maybe don't log unless significant or for debugging\r\n  const oldMorale = currentState.morale;\r\n  currentState.morale = Math.max(0, currentState.morale - 0.2);\r\n  // if (oldMorale - currentState.morale > 0.1) dailySummary.push(\"Slight natural decay in team morale.\");\r\n  \r\n  currentState.fanSupport = Math.max(0, currentState.fanSupport - 0.1);\r\n  currentState.boardConfidence = Math.max(0, currentState.boardConfidence - 0.1);\r\n  \r\n  return currentState;\r\n}\r\n\r\n// Helper function to process key calendar events for the day\r\nfunction processKeyEvents(currentState: GameState, dailySummary: string[]): GameState {\r\n  const today = currentState.currentDate;\r\n  const currentPhaseDetails = currentState.seasonPhases.find(p => p.id === currentState.currentPhase);\r\n\r\n  if (currentPhaseDetails) {\r\n    currentPhaseDetails.keyEvents.forEach(event => {\r\n      if (event.date === today && !event.completed) {\r\n        dailySummary.push(`Key Event Today: ${event.name} (${event.type}) - ${event.description}`);\r\n        event.completed = true; // Mark as completed in the newState structure\r\n\r\n        // Example of generating a user prompt for a key event\r\n        if (event.type === 'draft' || event.type === 'trade') {\r\n          currentState.userPrompts.push({\r\n            id: `prompt_${event.id}_${Date.now()}`,\r\n            type: 'decision', // Or 'information'\r\n            title: event.name,\r\n            message: `Today is ${event.name}. Prepare for ${event.description}.`,\r\n            relatedEntityId: event.id,\r\n            requiresAcknowledgement: true,\r\n          });\r\n          dailySummary.push(`User prompt generated for ${event.name}.`);\r\n        }\r\n        // Add more specific handling for other event types if needed\r\n      }\r\n    });\r\n  }\r\n\r\n  currentState.specialRounds.forEach(round => {\r\n    if (round.startDate === today) { // Assuming special rounds trigger on their start date\r\n      dailySummary.push(`Special Round Starting: ${round.name} - ${round.description}`);\r\n      // Potentially add UserPrompt or other logic for special rounds\r\n    }\r\n  });\r\n  \r\n  return currentState;\r\n}\r\n\r\n// Helper function to check for and handle season phase transitions\r\nfunction checkPhaseTransition(currentState: GameState, dailySummary: string[]): GameState {\r\n  const today = new Date(currentState.currentDate);\r\n  const currentPhaseDetails = currentState.seasonPhases.find(p => p.id === currentState.currentPhase);\r\n\r\n  if (!currentPhaseDetails) {\r\n    dailySummary.push(\"Error: Current season phase details not found. Cannot check for transition.\");\r\n    return currentState;\r\n  }\r\n\r\n  const currentPhaseEndDate = new Date(currentPhaseDetails.endDate);\r\n\r\n  if (today > currentPhaseEndDate) {\r\n    let nextPhaseId = \"\";\r\n    let newSeason = currentState.currentSeason;\r\n\r\n    switch (currentState.currentPhase) {\r\n      case \"pre_season\":\r\n        nextPhaseId = \"regular_season\";\r\n        break;\r\n      case \"regular_season\":\r\n        const teamLadderPos = currentState.ladder.find(lp => lp.teamId === currentState.userTeamId);\r\n        // Ensure ladder is sorted before finding rank\r\n        const sortedLadder = [...currentState.ladder].sort((a,b) => {\r\n            if (b.points !== a.points) return b.points - a.points;\r\n            return b.percentage - a.percentage;\r\n        });\r\n        const rank = sortedLadder.findIndex(lp => lp.teamId === currentState.userTeamId) + 1;\r\n\r\n        if (teamLadderPos && rank > 0 && rank <= 8) { \r\n            nextPhaseId = \"finals\";\r\n             dailySummary.push(\"Regular season ended. Qualified for Finals!\");\r\n        } else {\r\n            nextPhaseId = \"off_season\";\r\n             dailySummary.push(\"Regular season ended. Did not qualify for finals. Moving to Off-Season.\");\r\n        }\r\n        break;\r\n      case \"finals\":\r\n        nextPhaseId = \"off_season\";\r\n        dailySummary.push(\"Finals series concluded. Moving to Off-Season.\");\r\n        // TODO: Add logic here to check if user won premiership and generate a special prompt/event\r\n        break;\r\n      case \"off_season\":\r\n        nextPhaseId = \"pre_season\";\r\n        newSeason = currentState.currentSeason + 1;\r\n        dailySummary.push(`Transitioning to new season: ${newSeason}.`);\r\n        currentState.currentSeason = newSeason;\r\n        currentState.currentRound = 1; \r\n        currentState.seasonPhases = generateSeasonPhases(newSeason);\r\n        currentState.seasonFixtures = generateFixtures(allTeamsData, newSeason);\r\n        currentState.ladder = initializeLadder(allTeamsData);\r\n        currentState.specialRounds = generateSpecialRounds(newSeason);\r\n        // Use imported allPlayersData for initializing player development\r\n        currentState.playerDevelopment = initializePlayerDevelopment(allPlayersData, currentState.userTeamId || \"\"); \r\n        // Remove newSeason from generateObjectives call if it only takes team\r\n        const userTeamForObjectives = allTeamsData.find(t => t.id === currentState.userTeamId);\r\n        if (userTeamForObjectives) {\r\n            currentState.objectives = generateObjectives(userTeamForObjectives);\r\n        } else {\r\n            dailySummary.push(\"Error: Could not find user team to generate new season objectives.\");\r\n            currentState.objectives = [];\r\n        }\r\n        currentState.userPrompts = [];\r\n        currentState.trainingSessions = currentState.trainingSessions.filter(ts => !ts.completed);\r\n        dailySummary.push(`New season ${newSeason} setup: Fixtures, Ladder, Objectives, and Phases regenerated.`);\r\n        break;\r\n      default:\r\n        dailySummary.push(`Unknown current phase: ${currentState.currentPhase}. Cannot transition.`);\r\n        return currentState;\r\n    }\r\n    \r\n    const nextPhaseDetails = currentState.seasonPhases.find(p => p.id === nextPhaseId);\r\n    if (nextPhaseDetails) {\r\n      currentState.currentPhase = nextPhaseId;\r\n      dailySummary.push(`Transitioned to new phase: ${nextPhaseDetails.name}.`);\r\n    } else {\r\n      dailySummary.push(`Error: Could not find details for next phase: ${nextPhaseId}.`);\r\n    }\r\n  }\r\n  return currentState;\r\n}\r\n\r\nexport function advanceGameDay(gameState: GameState, allTeams: Team[]): { newState: GameState; dailySummary: string[] } {\r\n  let newState = JSON.parse(JSON.stringify(gameState)); \r\n  const dailySummary: string[] = [];\r\n\r\n  newState.userPrompts = newState.userPrompts.filter((prompt: UserPrompt) => prompt.requiresAcknowledgement || prompt.type === 'decision');\r\n\r\n  const newCurrentDate = new Date(newState.currentDate);\r\n  newCurrentDate.setDate(newCurrentDate.getDate() + 1);\r\n  newState.currentDate = newCurrentDate.toISOString().split('T')[0];\r\n  newState.currentDayOfWeek = newCurrentDate.getDay();\r\n  newState.lastUpdated = new Date().toISOString();\r\n  dailySummary.push(`Date advanced to ${newState.currentDate} (Day ${newState.currentDayOfWeek}).`);\r\n\r\n  const matchProcessingResult = processScheduledMatches(\r\n    newState.seasonFixtures,\r\n    newState.currentDate, \r\n    allTeams,\r\n    dailySummary \r\n  );\r\n  newState.seasonFixtures = matchProcessingResult.updatedFixtures;\r\n  const newlyCompletedToday = matchProcessingResult.newlyCompleted;\r\n\r\n  if (newlyCompletedToday.length > 0) {\r\n    newState.ladder = updateLadderForCompletedMatches(newState.ladder, newlyCompletedToday, dailySummary);\r\n  }\r\n  \r\n  newState = handleUserTeamMatchDayEvents(newState, newlyCompletedToday, allTeams, dailySummary);\r\n  newState = processTrainingSessions(newState, dailySummary);\r\n  newState = processKeyEvents(newState, dailySummary);\r\n  newState = checkPhaseTransition(newState, dailySummary);\r\n  newState = applyRandomEventsAndDecay(newState, dailySummary);\r\n\r\n  if (newState.userTeamId && newlyCompletedToday.every(m => m.homeTeamId !== newState.userTeamId && m.awayTeamId !== newState.userTeamId)) {\r\n    const userTeamNextMatch = newState.seasonFixtures.find(\r\n      (match: Match) => !match.completed && (match.homeTeamId === newState.userTeamId || match.awayTeamId === newState.userTeamId) && new Date(match.date) >= new Date(newState.currentDate)\r\n    );\r\n    if (userTeamNextMatch && userTeamNextMatch.round > newState.currentRound && newState.currentPhase === 'regular_season') {\r\n      const userGamesThisRoundPending = newState.seasonFixtures.some(\r\n        (match: Match) => !match.completed && match.round === newState.currentRound && (match.homeTeamId === newState.userTeamId || match.awayTeamId === newState.userTeamId)\r\n      );\r\n      if (!userGamesThisRoundPending) {\r\n         newState.currentRound = userTeamNextMatch.round;\r\n         dailySummary.push(`Advanced to Round ${newState.currentRound} based on upcoming fixtures.`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  newState.lastDailySummary = [...dailySummary]; \r\n\r\n  return { newState, dailySummary };\r\n}\r\n\r\n// Schedule a training session\r\nexport function scheduleTraining(\r\n  gameState: GameState, \r\n  date: string, \r\n  focus: TrainingFocus, \r\n  intensity: \"light\" | \"medium\" | \"intense\",\r\n  playerIds: string[]\r\n): GameState {\r\n  const newState = { ...gameState };\r\n  const newTrainingSession: TrainingSession = {\r\n    id: `training_${Date.now()}`,\r\n    date,\r\n    focus,\r\n    intensity,\r\n    playerIds,\r\n    completed: false\r\n  };\r\n  newState.trainingSessions = [...gameState.trainingSessions, newTrainingSession];\r\n  newState.lastUpdated = new Date().toISOString();\r\n  return newState;\r\n}\r\n\r\n// Complete a press conference\r\nexport function completePresser(\r\n  gameState: GameState,\r\n  presserId: string,\r\n  answers: string[]\r\n): GameState {\r\n  const newState = { ...gameState };\r\n  const presserIndex = gameState.pressConferences.findIndex(pc => pc.id === presserId);\r\n  if (presserIndex === -1) {\r\n    return gameState; \r\n  }\r\n  const updatedPresser = { ...gameState.pressConferences[presserIndex] };\r\n  updatedPresser.completed = true;\r\n  // TODO: Apply impact of answers to morale, fan support, board confidence\r\n  // For now, just marking as complete\r\n  const updatedPressConferences = [...gameState.pressConferences];\r\n  updatedPressConferences[presserIndex] = updatedPresser;\r\n  newState.pressConferences = updatedPressConferences;\r\n  newState.lastUpdated = new Date().toISOString();\r\n  return newState;\r\n}\r\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\GameInitialization.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\GameInitialization.tsx\");\n  import.meta.hot.lastModified = \"1747543677751.821\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from \"react\";\nimport { Card, Flex, Heading, Text, Box, Button, Select, Separator, Grid, Badge } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nimport { initializeGameState } from \"~/data/AFLManager/gameState\";\nimport { players, generatePlayersForTeam } from \"~/data/AFLManager/players\";\nexport default function GameInitialization({\n  onGameStart\n}) {\n  _s();\n  const [selectedTeamId, setSelectedTeamId] = useState(\"\");\n  const [selectedTeam, setSelectedTeam] = useState(null);\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [step, setStep] = useState(\"team-selection\");\n\n  // Update selected team when ID changes\n  useEffect(() => {\n    if (selectedTeamId) {\n      const team = teams.find(t => t.id === selectedTeamId) || null;\n      setSelectedTeam(team);\n    } else {\n      setSelectedTeam(null);\n    }\n  }, [selectedTeamId]);\n\n  // Handle team selection\n  const handleTeamSelect = event => {\n    setSelectedTeamId(event.target.value);\n  };\n\n  // Handle difficulty selection\n  const handleDifficultySelect = event => {\n    setDifficulty(event.target.value);\n  };\n\n  // Handle continue to confirmation\n  const handleContinue = () => {\n    if (selectedTeamId) {\n      setStep(\"confirmation\");\n    }\n  };\n\n  // Handle back to team selection\n  const handleBack = () => {\n    setStep(\"team-selection\");\n  };\n\n  // Handle game start\n  const handleStartGame = () => {\n    if (selectedTeamId) {\n      // Generate additional players for all teams\n      const allPlayers = [...players];\n      teams.forEach(team => {\n        // Skip if we already have enough players for this team\n        const existingPlayers = players.filter(p => p.teamId === team.id);\n        if (existingPlayers.length < 22) {\n          const additionalPlayers = generatePlayersForTeam(team.id, 22 - existingPlayers.length);\n          allPlayers.push(...additionalPlayers);\n        }\n      });\n\n      // Initialize game state\n      const gameState = initializeGameState(selectedTeamId, teams, allPlayers);\n\n      // Apply difficulty settings\n      gameState.settings.difficulty = difficulty;\n\n      // Start the game\n      onGameStart(gameState);\n    }\n  };\n\n  // Render team selection step\n  const renderTeamSelection = () => <Box style={{\n    maxWidth: '800px',\n    margin: '0 auto'\n  }}>\r\n      <Flex justify=\"between\" align=\"center\" mb=\"4\">\r\n        <Heading size=\"6\" style={{\n        color: '#fff'\n      }}>Select Your Team</Heading>\r\n        <Badge size=\"2\" color=\"blue\">New Career</Badge>\r\n      </Flex>\r\n      \r\n      <Text mb=\"4\" size=\"3\" style={{\n      color: '#ddd'\n    }}>\r\n        Choose the AFL team you want to manage. Each team has different strengths, \r\n        weaknesses, and expectations.\r\n      </Text>\r\n      \r\n      <Flex direction=\"column\" gap=\"4\">\r\n        <Grid columns={{\n        initial: \"1\",\n        md: \"2\"\n      }} gap=\"4\">\r\n          <Box>\r\n            <Text size=\"2\" mb=\"2\" weight=\"bold\" style={{\n            color: '#aaa'\n          }}>Team</Text>\r\n            <Select.Root value={selectedTeamId} onValueChange={setSelectedTeamId}>\r\n              <Select.Trigger placeholder=\"Select a team\" />\r\n              <Select.Content>\r\n                <Select.Group>\r\n                  {teams.map(team => <Select.Item key={team.id} value={team.id}>\r\n                      {team.name}\r\n                    </Select.Item>)}\r\n                </Select.Group>\r\n              </Select.Content>\r\n            </Select.Root>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" mb=\"2\" weight=\"bold\" style={{\n            color: '#aaa'\n          }}>Difficulty</Text>\r\n            <Select.Root value={difficulty} onValueChange={setDifficulty}>\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                <Select.Item value=\"easy\">Easy</Select.Item>\r\n                <Select.Item value=\"medium\">Medium</Select.Item>\r\n                <Select.Item value=\"hard\">Hard</Select.Item>\r\n              </Select.Content>\r\n            </Select.Root>\r\n          </Box>\r\n        </Grid>\r\n        \r\n        {selectedTeam && <Card variant=\"surface\" mt=\"4\" style={{\n        backgroundColor: '#222',\n        borderColor: '#444'\n      }}>\r\n            <Flex justify=\"between\" align=\"center\" mb=\"3\">\r\n              <Heading size=\"4\" style={{\n            color: '#fff'\n          }}>{selectedTeam.name}</Heading>\r\n              <Box style={{\n            width: '40px',\n            height: '40px',\n            borderRadius: '50%',\n            backgroundColor: selectedTeam.colors.primary,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            color: 'white',\n            fontWeight: 'bold'\n          }}>\r\n                {selectedTeam.name.substring(0, 2).toUpperCase()}\r\n              </Box>\r\n            </Flex>\r\n            \r\n            <Grid columns={{\n          initial: \"1\",\n          md: \"2\"\n        }} gap=\"4\">\r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\" style={{\n              color: '#aaa'\n            }}>Home Ground</Text>\r\n                <Text style={{\n              color: '#fff'\n            }}>{selectedTeam.homeGround}</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\" style={{\n              color: '#aaa'\n            }}>Team Colors</Text>\r\n                <Flex gap=\"2\" align=\"center\">\r\n                  <Box style={{\n                width: '20px',\n                height: '20px',\n                backgroundColor: selectedTeam.colors.primary,\n                borderRadius: '4px'\n              }} />\r\n                  <Box style={{\n                width: '20px',\n                height: '20px',\n                backgroundColor: selectedTeam.colors.secondary || '#ffffff',\n                borderRadius: '4px'\n              }} />\r\n                </Flex>\r\n              </Box>\r\n            </Grid>\r\n            \r\n            <Separator size=\"4\" my=\"3\" style={{\n          backgroundColor: '#444'\n        }} />\r\n            \r\n            <Text size=\"2\" weight=\"bold\" mb=\"2\" style={{\n          color: '#aaa'\n        }}>Team Attributes</Text>\r\n            <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Flex justify=\"between\">\r\n                  <Text size=\"2\" style={{\n                color: '#fff'\n              }}>Attack</Text>\r\n                  <Text size=\"2\" weight=\"bold\" style={{\n                color: '#fff'\n              }}>{selectedTeam.attributes.attack}</Text>\r\n                </Flex>\r\n                <Box style={{\n              width: '100%',\n              height: '8px',\n              backgroundColor: '#333',\n              borderRadius: '4px',\n              overflow: 'hidden'\n            }}>\r\n                  <Box style={{\n                width: `${selectedTeam.attributes.attack}%`,\n                height: '100%',\n                backgroundColor: '#22c55e'\n              }} />\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Flex justify=\"between\">\r\n                  <Text size=\"2\" style={{\n                color: '#fff'\n              }}>Midfield</Text>\r\n                  <Text size=\"2\" weight=\"bold\" style={{\n                color: '#fff'\n              }}>{selectedTeam.attributes.midfield}</Text>\r\n                </Flex>\r\n                <Box style={{\n              width: '100%',\n              height: '8px',\n              backgroundColor: '#333',\n              borderRadius: '4px',\n              overflow: 'hidden'\n            }}>\r\n                  <Box style={{\n                width: `${selectedTeam.attributes.midfield}%`,\n                height: '100%',\n                backgroundColor: '#3b82f6'\n              }} />\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Flex justify=\"between\">\r\n                  <Text size=\"2\" style={{\n                color: '#fff'\n              }}>Defense</Text>\r\n                  <Text size=\"2\" weight=\"bold\" style={{\n                color: '#fff'\n              }}>{selectedTeam.attributes.defense}</Text>\r\n                </Flex>\r\n                <Box style={{\n              width: '100%',\n              height: '8px',\n              backgroundColor: '#333',\n              borderRadius: '4px',\n              overflow: 'hidden'\n            }}>\r\n                  <Box style={{\n                width: `${selectedTeam.attributes.defense}%`,\n                height: '100%',\n                backgroundColor: '#f59e0b'\n              }} />\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Flex justify=\"between\">\r\n                  <Text size=\"2\" style={{\n                color: '#fff'\n              }}>Coaching</Text>\r\n                  <Text size=\"2\" weight=\"bold\" style={{\n                color: '#fff'\n              }}>{selectedTeam.attributes.coaching}</Text>\r\n                </Flex>\r\n                <Box style={{\n              width: '100%',\n              height: '8px',\n              backgroundColor: '#333',\n              borderRadius: '4px',\n              overflow: 'hidden'\n            }}>\r\n                  <Box style={{\n                width: `${selectedTeam.attributes.coaching}%`,\n                height: '100%',\n                backgroundColor: '#8b5cf6'\n              }} />\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n          </Card>}\r\n        \r\n        <button disabled={!selectedTeamId} onClick={handleContinue} style={{\n        marginTop: '16px',\n        padding: '12px 24px',\n        fontSize: '16px',\n        backgroundColor: selectedTeamId ? '#3b82f6' : '#555',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: selectedTeamId ? 'pointer' : 'not-allowed',\n        width: '100%'\n      }}>\r\n          Continue\r\n        </button>\r\n      </Flex>\r\n    </Box>;\n\n  // Render confirmation step\n  const renderConfirmation = () => {\n    if (!selectedTeam) return null;\n\n    // Calculate team overall rating\n    const overallRating = Math.round((selectedTeam.attributes.attack + selectedTeam.attributes.midfield + selectedTeam.attributes.defense + selectedTeam.attributes.coaching) / 4);\n\n    // Determine expectations based on team strength\n    let expectations = \"\";\n    if (overallRating >= 85) {\n      expectations = \"As one of the strongest teams in the competition, the board expects nothing less than a premiership challenge. Fans are demanding success.\";\n    } else if (overallRating >= 80) {\n      expectations = \"The board expects the team to make finals and challenge for the premiership. Fans are optimistic about the season ahead.\";\n    } else if (overallRating >= 75) {\n      expectations = \"The board expects the team to push for a finals position. Fans are hoping for improvement from last season.\";\n    } else {\n      expectations = \"The board understands this is a rebuilding phase. Focus on developing young players and showing improvement throughout the season.\";\n    }\n    return <Box style={{\n      maxWidth: '800px',\n      margin: '0 auto'\n    }}>\r\n        <Flex justify=\"between\" align=\"center\" mb=\"4\">\r\n          <Heading size=\"6\" style={{\n          color: '#fff'\n        }}>Confirm Your Selection</Heading>\r\n          <Badge size=\"2\" color=\"blue\">New Career</Badge>\r\n        </Flex>\r\n        \r\n        <Card variant=\"surface\" style={{\n        backgroundColor: '#222',\n        borderColor: '#444'\n      }}>\r\n          <Flex justify=\"between\" align=\"center\" mb=\"3\">\r\n            <Heading size=\"4\" style={{\n            color: '#fff'\n          }}>\r\n              {selectedTeam.name} - {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} Difficulty\r\n            </Heading>\r\n            <Box style={{\n            width: '40px',\n            height: '40px',\n            borderRadius: '50%',\n            backgroundColor: selectedTeam.colors.primary,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            color: 'white',\n            fontWeight: 'bold'\n          }}>\r\n              {selectedTeam.name.substring(0, 2).toUpperCase()}\r\n            </Box>\r\n          </Flex>\r\n          \r\n          <Text mb=\"3\" style={{\n          color: '#ddd'\n        }}>\r\n            You are about to begin your journey as the head coach of the {selectedTeam.name}.\r\n          </Text>\r\n          \r\n          <Separator size=\"4\" my=\"3\" style={{\n          backgroundColor: '#444'\n        }} />\r\n          \r\n          <Box mb=\"3\">\r\n            <Text size=\"2\" weight=\"bold\" mb=\"2\" style={{\n            color: '#aaa'\n          }}>Board Expectations</Text>\r\n            <Text style={{\n            color: '#ddd'\n          }}>{expectations}</Text>\r\n          </Box>\r\n          \r\n          <Box mb=\"3\">\r\n            <Text size=\"2\" weight=\"bold\" mb=\"2\" style={{\n            color: '#aaa'\n          }}>Team Overview</Text>\r\n            <Flex align=\"center\" gap=\"2\">\r\n              <Box style={{\n              width: '50px',\n              height: '50px',\n              borderRadius: '50%',\n              backgroundColor: '#3b82f6',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              color: 'white',\n              fontWeight: 'bold',\n              fontSize: '18px'\n            }}>\r\n                {overallRating}\r\n              </Box>\r\n              <Box>\r\n                <Text style={{\n                color: '#fff'\n              }}>Overall Rating</Text>\r\n                <Text size=\"2\" style={{\n                color: '#aaa'\n              }}>\r\n                  {overallRating >= 85 ? \"Premiership Contender\" : overallRating >= 80 ? \"Finals Contender\" : overallRating >= 75 ? \"Mid-table\" : \"Rebuilding\"}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n          </Box>\r\n          \r\n          <Box mb=\"3\">\r\n            <Text size=\"2\" weight=\"bold\" mb=\"1\" style={{\n            color: '#aaa'\n          }}>Home Ground</Text>\r\n            <Text style={{\n            color: '#ddd'\n          }}>{selectedTeam.homeGround}</Text>\r\n          </Box>\r\n          \r\n          <Separator size=\"4\" my=\"3\" style={{\n          backgroundColor: '#444'\n        }} />\r\n          \r\n          <Text size=\"3\" mb=\"3\" style={{\n          color: '#fff'\n        }}>\r\n            Are you ready to take on the challenge of leading the {selectedTeam.name} to glory?\r\n          </Text>\r\n          \r\n          <Flex gap=\"3\" mt=\"3\">\r\n            <Button variant=\"outline\" onClick={handleBack} style={{\n            borderColor: '#444',\n            color: '#ddd'\n          }}>\r\n              Back\r\n            </Button>\r\n            <button onClick={handleStartGame} style={{\n            backgroundColor: '#3b82f6',\n            color: 'white',\n            padding: '12px 24px',\n            fontSize: '16px',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}>\r\n              Start Career\r\n            </button>\r\n          </Flex>\r\n        </Card>\r\n      </Box>;\n  };\n  return <Box style={{\n    padding: '40px 20px'\n  }}>\r\n      {step === \"team-selection\" ? renderTeamSelection() : renderConfirmation()}\r\n    </Box>;\n}\n_s(GameInitialization, \"i33ke86nF2ZdUoFFkQM427vphRI=\");\n_c = GameInitialization;\nvar _c;\n$RefreshReg$(_c, \"GameInitialization\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\Dashboard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\Dashboard.tsx\");\n  import.meta.hot.lastModified = \"1747545681243.8718\";\n}\n// REMIX HMR END\n\nimport { Card, Flex, Heading, Text, Box, Button, Separator, Grid, Badge, Callout } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nimport { InfoCircledIcon, ExclamationTriangleIcon, ChevronRightIcon, PlayIcon, CheckCircledIcon } from '@radix-ui/react-icons';\nexport default function Dashboard({\n  gameState,\n  allPlayers,\n  onAdvanceDay,\n  onPrepareMatch,\n  onSimulateToDate,\n  lastDailySummary,\n  userPrompts,\n  onUserPromptAction\n}) {\n  // Get user team\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  if (!userTeam) {\n    return <Text>Error: Team not found</Text>;\n  }\n\n  // Get upcoming matches\n  const upcomingMatches = gameState.seasonFixtures.filter(match => match.round >= gameState.currentRound && !match.completed && (match.homeTeamId === gameState.userTeamId || match.awayTeamId === gameState.userTeamId)).slice(0, 3);\n\n  // Get team position in ladder\n  const sortedLadder = [...gameState.ladder].sort((a, b) => {\n    if (b.points !== a.points) return b.points - a.points;\n    return b.percentage - a.percentage;\n  });\n  const teamLadderPosition = gameState.ladder.find(pos => pos.teamId === gameState.userTeamId);\n  const ladderPosition = teamLadderPosition ? sortedLadder.findIndex(pos => pos.teamId === gameState.userTeamId) + 1 : \"N/A\";\n\n  // Get team players\n  const teamPlayers = allPlayers.filter(player => player.teamId === gameState.userTeamId);\n\n  // Calculate squad status metrics\n  const totalTeamPlayersCount = teamPlayers.length;\n\n  // Rule 4.1.3 Player Status Types - adjusted for available data\n  // Players at peak fitness (100)\n  const availableAtPeakFitnessPlayersCount = teamPlayers.filter(player => player.fitness === 100).length;\n\n  // Players with fitness below 100 are considered to have fitness concerns.\n  const playersWithFitnessConcernsCount = teamPlayers.filter(player => player.fitness < 100).length;\n\n  // Suspended player count is commented out as 'isSuspended' or equivalent is not in Player type.\n  // To re-integrate, ensure Player type has a boolean field like 'isSuspended'.\n  // const suspendedPlayersCount = teamPlayers.filter(player => player.isSuspended).length;\n\n  // Rule 4.1.4 Squad Harmony - using gameState.morale (0-100)\n  const teamMoraleDisplay = gameState.morale !== undefined ? `${gameState.morale}/100` : \"N/A\";\n\n  // Get top players\n  const topPlayers = [...teamPlayers].sort((a, b) => {\n    // Calculate overall rating\n    const aRating = (a.attributes.speed + a.attributes.strength + a.attributes.stamina + a.attributes.agility + a.attributes.intelligence + a.attributes.kicking + a.attributes.marking + a.attributes.handball + a.attributes.tackling) / 9;\n    const bRating = (b.attributes.speed + b.attributes.strength + b.attributes.stamina + b.attributes.agility + b.attributes.intelligence + b.attributes.kicking + b.attributes.marking + b.attributes.handball + b.attributes.tackling) / 9;\n    return bRating - aRating;\n  }).slice(0, 5);\n\n  // Format match date\n  const formatMatchDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-AU', {\n      weekday: 'short',\n      day: 'numeric',\n      month: 'short'\n    });\n  };\n\n  // Get opponent team\n  const getOpponentTeam = match => {\n    const opponentId = match.homeTeamId === gameState.userTeamId ? match.awayTeamId : match.homeTeamId;\n    return teams.find(team => team.id === opponentId);\n  };\n\n  // Get venue for match\n  const getMatchVenue = match => {\n    if (match.homeTeamId === gameState.userTeamId) {\n      return userTeam.homeGround + \" (Home)\";\n    } else {\n      const awayTeam = teams.find(team => team.id === match.homeTeamId);\n      return awayTeam ? awayTeam.homeGround + \" (Away)\" : match.venue;\n    }\n  };\n  const getTeamNameById = teamId => {\n    const team = teams.find(t => t.id === teamId);\n    return team ? team.name : \"Unknown Team\";\n  };\n  const handlePrepareMatch = matchId => {\n    onPrepareMatch(matchId);\n  };\n\n  // Ladder Snapshot Logic\n  const topNTeams = 3;\n  const ladderSnapshotTop = sortedLadder.slice(0, topNTeams);\n  let ladderSnapshotUserWindow = [];\n  const userTeamIndex = sortedLadder.findIndex(pos => pos.teamId === gameState.userTeamId);\n  if (userTeamIndex !== -1) {\n    const startIndex = Math.max(0, userTeamIndex - 1);\n    const endIndex = Math.min(sortedLadder.length, userTeamIndex + 2);\n    ladderSnapshotUserWindow = sortedLadder.slice(startIndex, endIndex);\n    if (userTeamIndex < topNTeams) {\n      // If user is in top N, the window might be redundant or show already displayed teams.\n      // No special handling here yet to avoid over-complexity.\n    }\n  }\n\n  // Player Development Spotlight Logic\n  const noteworthyPlayerDevelopment = gameState.playerDevelopment?.find(pd => pd.currentRating > pd.startOfSeasonRating);\n  let significantAttributeChange = null;\n  if (noteworthyPlayerDevelopment?.attributeChanges) {\n    for (const [attr, change] of Object.entries(noteworthyPlayerDevelopment.attributeChanges)) {\n      if (change > 0) {\n        // Highlight a positive change\n        significantAttributeChange = {\n          attribute: attr,\n          change\n        };\n        break;\n      }\n    }\n  }\n\n  // Format current game date for Season Status card\n  const formatCurrentGameDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-AU', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    });\n  };\n\n  // --- QoL Calendar Enhancements Start ---\n  const getCurrentWeekDates = currentDateStr => {\n    const dates = [];\n    const today = new Date(currentDateStr);\n    const currentDayOfWeek = today.getDay(); // Sunday - 0, Monday - 1, ..., Saturday - 6\n    // Adjust to make Monday the start of the week (0 for Monday, 6 for Sunday)\n    const adjustedDayOfWeek = currentDayOfWeek === 0 ? 6 : currentDayOfWeek - 1;\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - adjustedDayOfWeek);\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(monday);\n      day.setDate(monday.getDate() + i);\n      dates.push(day);\n    }\n    return dates;\n  };\n  const weekDates = getCurrentWeekDates(gameState.currentDate);\n  const dailyActivities = weekDates.map(date => {\n    const dateStr = date.toISOString().split('T')[0];\n    const userMatch = gameState.seasonFixtures.find(m => m.date === dateStr && (m.homeTeamId === gameState.userTeamId || m.awayTeamId === gameState.userTeamId));\n    const training = gameState.trainingSessions.find(ts => ts.date === dateStr && !ts.completed);\n    return {\n      date,\n      dateStr,\n      isToday: dateStr === gameState.currentDate,\n      userMatch,\n      training\n    };\n  });\n  const upcomingKeyEvents = [];\n  const currentPhaseDetails = gameState.seasonPhases.find(p => p.id === gameState.currentPhase);\n  if (currentPhaseDetails) {\n    currentPhaseDetails.keyEvents.filter(event => new Date(event.date) >= new Date(gameState.currentDate)).forEach(event => upcomingKeyEvents.push({\n      name: event.name,\n      date: event.date,\n      type: event.type\n    }));\n  }\n  gameState.specialRounds.filter(sr => new Date(sr.startDate) >= new Date(gameState.currentDate)).forEach(sr => upcomingKeyEvents.push({\n    name: sr.name,\n    date: sr.startDate,\n    type: 'special_round'\n  }));\n  upcomingKeyEvents.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  const nextThreeKeyEvents = upcomingKeyEvents.slice(0, 3);\n  // --- QoL Calendar Enhancements End ---\n\n  // --- Logic for main Advance Day / Play Match button ---\n  const todayUserMatch = gameState.seasonFixtures.find(match => match.date === gameState.currentDate && !match.completed && (match.homeTeamId === gameState.userTeamId || match.awayTeamId === gameState.userTeamId));\n  let mainButtonText = \"Advance Day\";\n  let mainButtonAction = onAdvanceDay;\n  let mainButtonDisabled = !!gameState.activeMatchId; // Default: disable if any match is active\n  let mainButtonTitle = gameState.activeMatchId ? \"Complete active match process first\" : \"Advance to next day\";\n  let mainButtonColor = \"green\";\n\n  // New logic for disabling button due to user prompts\n  if (userPrompts && userPrompts.length > 0) {\n    mainButtonDisabled = true;\n    mainButtonTitle = \"Resolve pending prompts before advancing\";\n    mainButtonColor = \"gray\";\n  }\n  if (todayUserMatch && !gameState.activeMatchId && (!userPrompts || userPrompts.length === 0)) {\n    mainButtonText = \"Go to Match\";\n    mainButtonAction = () => onPrepareMatch(todayUserMatch.id);\n    mainButtonDisabled = false; // Explicitly enable if it's user's match day and no other interaction\n    mainButtonTitle = `Prepare for your match: ${userTeam.name} vs ${getTeamNameById(todayUserMatch.homeTeamId === userTeam.id ? todayUserMatch.awayTeamId : todayUserMatch.homeTeamId)}`;\n    mainButtonColor = \"blue\";\n  } else if (gameState.activeMatchId) {\n    // If a match is active (could be today's user match in a specific phase, or another match)\n    // The individual match button logic (getMatchButtonTextAndAction) will handle its state.\n    // The main button should remain disabled if an active match ID exists, to avoid conflicting actions.\n    mainButtonText = \"Advance Day\"; // Or could be context-specific like \"Match in Progress\"\n    mainButtonAction = onAdvanceDay; // Action remains advance day but it's disabled\n    mainButtonDisabled = true;\n    mainButtonTitle = \"A match interaction is currently in progress. Please resolve it via the 'Upcoming Matches' card.\";\n  }\n\n  // --- End of Logic for main Advance Day / Play Match button ---\n\n  return <Box>\r\n      <Flex justify=\"between\" align=\"center\" mb=\"4\">\r\n        <Heading size=\"6\">Dashboard</Heading>\r\n        <Button size=\"3\" variant=\"solid\" disabled={mainButtonDisabled} title={mainButtonTitle} color={mainButtonColor} onClick={() => mainButtonAction()}>\r\n          {mainButtonColor === \"blue\" ? <PlayIcon /> : mainButtonColor === \"gray\" ? <InfoCircledIcon /> : <ChevronRightIcon />} {mainButtonText}\r\n        </Button>\r\n      </Flex>\r\n      \r\n      {/* User Prompts Display */}\r\n      {userPrompts && userPrompts.length > 0 && <Box my=\"4\">\r\n          {userPrompts.map(prompt => <Callout.Root key={prompt.id} color=\"orange\" role=\"alert\" highContrast mb=\"2\">\r\n              <Callout.Icon>\r\n                <ExclamationTriangleIcon />\r\n              </Callout.Icon>\r\n              <Callout.Text mr=\"3\">{prompt.message}</Callout.Text>\r\n              {onUserPromptAction && <Button size=\"1\" variant=\"soft\" color=\"orange\" onClick={() => onUserPromptAction(prompt)} style={{\n          cursor: 'pointer'\n        }}>\r\n                  {prompt.type === 'decision' ? 'Decide' : prompt.requiresAcknowledgement ? 'Acknowledge' : 'View Details'}\r\n                </Button>}\r\n            </Callout.Root>)}\r\n        </Box>}\r\n\r\n      {/* Last Day's Events Display */}\r\n      {lastDailySummary && lastDailySummary.length > 0 && <Card mt=\"4\" mb=\"4\">\r\n          <Heading size=\"3\" mb=\"2\">Last Day's Events</Heading>\r\n          <Flex direction=\"column\" gap=\"1\">\r\n            {lastDailySummary.map((event, index) => <Text key={index} size=\"2\" color=\"gray\"> - {event}</Text>)}\r\n          </Flex>\r\n        </Card>}\r\n      \r\n      <Grid columns={{\n      initial: \"1\",\n      md: \"2\",\n      lg: \"3\"\n    }} gap=\"4\">\r\n        {/* Team Overview */}\r\n        <Card variant=\"surface\">\r\n          <Flex justify=\"between\" align=\"center\" mb=\"2\">\r\n            <Heading size=\"4\">{userTeam.name}</Heading>\r\n            <Badge size=\"1\" color=\"blue\">Round {gameState.currentRound}</Badge>\r\n          </Flex>\r\n          \r\n          <Text size=\"2\" color=\"gray\" mb=\"3\">Season {gameState.currentSeason}</Text>\r\n          \r\n          <Separator size=\"4\" my=\"3\" />\r\n          \r\n          <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Ladder Position</Text>\r\n              <Text>{ladderPosition !== \"N/A\" ? `${ladderPosition}` : \"N/A\"}</Text>\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Record</Text>\r\n              <Text>\r\n                {teamLadderPosition ? `${teamLadderPosition.wins} W - ${teamLadderPosition.losses} L - ${teamLadderPosition.draws} D` : \"0 W - 0 L - 0 D\"}\r\n              </Text>\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Points</Text>\r\n              <Text>{teamLadderPosition?.points || 0}</Text>\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Percentage</Text>\r\n              <Text>\r\n                {teamLadderPosition ? `${teamLadderPosition.percentage.toFixed(2)}%` : \"0.00%\"}\r\n              </Text>\r\n            </Box>\r\n          </Grid>\r\n        </Card>\r\n        \r\n        {/* Season Status - MODIFIED CARD to This Week & Upcoming Events */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"2\">This Week & Upcoming</Heading>\r\n          <Grid columns={{\n          initial: \"1\",\n          sm: \"2\"\n        }} gap=\"3\" width=\"auto\" mb=\"3\">\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Current Date</Text>\r\n              <Text>{formatCurrentGameDate(gameState.currentDate)}</Text>\r\n            </Box>\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Season / Round / Phase</Text>\r\n              <Text>\r\n                {gameState.currentSeason} / R{gameState.currentRound} / <span style={{\n                textTransform: 'capitalize'\n              }}>{gameState.currentPhase.replace(/_/g, ' ')}</span>\r\n              </Text>\r\n            </Box>\r\n          </Grid>\r\n        </Card>\r\n\r\n        {/* Upcoming Matches */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"2\">Upcoming Matches</Heading>\r\n          {upcomingMatches.length > 0 ? <Flex direction=\"column\" gap=\"2\">\r\n              {upcomingMatches.map(match => {\n            const opponent = getOpponentTeam(match);\n            const venue = getMatchVenue(match);\n            return <Card key={match.id} size=\"1\" variant=\"surface\">\r\n                    <Flex justify=\"between\" align=\"center\">\r\n                      <Box>\r\n                        <Text weight=\"bold\">\r\n                          {match.homeTeamId === gameState.userTeamId ? `${userTeam.name} vs ${opponent?.name}` : `${opponent?.name} vs ${userTeam.name}`}\r\n                        </Text>\r\n                        <Text size=\"1\" color=\"gray\">\r\n                          {formatMatchDate(match.date)} \u2022 {venue}\r\n                        </Text>\r\n                      </Box>\r\n                      <Button size=\"1\" variant=\"soft\" onClick={() => handlePrepareMatch(match.id)} disabled={match.date !== gameState.currentDate || !!gameState.activeMatchId}>\r\n                        {match.date === gameState.currentDate ? \"Prepare\" : \"Preview\"}\r\n                      </Button>\r\n                    </Flex>\r\n                  </Card>;\n          })}\r\n            </Flex> : <Text color=\"gray\">No upcoming matches scheduled.</Text>}\r\n        </Card>\r\n\r\n        {/* Top Players */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"2\">Top Players</Heading>\r\n          {topPlayers.length > 0 ? <Flex direction=\"column\" gap=\"2\">\r\n              {topPlayers.map(player => <Card key={player.id} size=\"1\" variant=\"surface\">\r\n                  <Flex justify=\"between\" align=\"center\">\r\n                    <Box>\r\n                      <Text weight=\"bold\">{player.name}</Text>\r\n                      <Text size=\"2\" color=\"gray\">{player.position}</Text>\r\n                    </Box>\r\n                    <Badge variant=\"soft\" color=\"blue\">\r\n                      Rating: {((player.attributes.speed + player.attributes.strength + player.attributes.stamina + player.attributes.agility + player.attributes.intelligence + player.attributes.kicking + player.attributes.marking + player.attributes.handball + player.attributes.tackling) / 9).toFixed(1)}\r\n                    </Badge>\r\n                  </Flex>\r\n                </Card>)}\r\n            </Flex> : <Text color=\"gray\">No player data available.</Text>}\r\n        </Card>\r\n      </Grid>\r\n      <Separator size=\"4\" my=\"3\" />\r\n\r\n      <Heading size=\"3\" mb=\"2\">This Week's Agenda</Heading>\r\n          <Grid columns=\"7\" gap=\"1\" mb=\"3\" style={{\n      textAlign: 'center'\n    }}>\r\n            {dailyActivities.map(activity => {\n        const isClickable = onSimulateToDate && !activity.isToday && new Date(activity.dateStr) > new Date(gameState.currentDate) && !gameState.activeMatchId && (!userPrompts || userPrompts.length === 0); // Added prompt check for clickable days\n\n        const buttonStyle = {\n          textAlign: 'left',\n          width: '100%',\n          cursor: isClickable ? 'pointer' : 'default',\n          opacity: isClickable || activity.isToday ? 1 : 0.7\n        };\n        const dayDate = activity.date.getDate();\n        const dayName = activity.date.toLocaleDateString('en-AU', {\n          weekday: 'short'\n        });\n        let title = `Events for ${dayName}, ${dayDate}`;\n        if (isClickable) {\n          title = `Simulate to ${dayName}, ${dayDate}`;\n        } else if (gameState.activeMatchId) {\n          title = \"Resolve active match before simulating.\";\n        } else if (userPrompts && userPrompts.length > 0) {\n          title = \"Resolve pending prompts before simulating.\";\n        }\n        return <Box key={activity.dateStr} p=\"1\" onClick={isClickable ? () => onSimulateToDate(activity.dateStr) : undefined} style={buttonStyle} title={title} onMouseEnter={e => {\n          if (isClickable) e.currentTarget.style.backgroundColor = 'var(--gray-a3)';\n        }} onMouseLeave={e => {\n          if (isClickable) e.currentTarget.style.backgroundColor = 'transparent';\n        }}>\r\n                  <Text size=\"1\" weight={activity.isToday ? \"bold\" : \"regular\"}>\r\n                    {dayName}\r\n                  </Text>\r\n                  \r\n                  <Text size=\"1\" color=\"gray\">\r\n                    {dayDate}\r\n                  </Text>\r\n                  \r\n                  \r\n                  {activity.userMatch && <Badge color={activity.userMatch.completed ? \"gray\" : \"red\"} variant=\"soft\" mt=\"1\" style={{\n            display: 'inline-flex',\n            alignItems: 'center'\n          }}>\r\n                      <PlayIcon style={{\n              marginRight: '4px'\n            }} />\r\n                      {activity.userMatch.completed ? \"Played vs\" : \"Match vs\"} {getTeamNameById(activity.userMatch.homeTeamId === gameState.userTeamId ? activity.userMatch.awayTeamId : activity.userMatch.homeTeamId)}\r\n                    </Badge>}\r\n                  \r\n                  {activity.training && <Badge color={activity.training.completed ? \"gray\" : \"cyan\"} variant=\"soft\" mt=\"1\" style={{\n            display: 'inline-flex',\n            alignItems: 'center'\n          }}>\r\n                      <CheckCircledIcon style={{\n              marginRight: '4px'\n            }} />\r\n                      {activity.training.focus} Training {activity.training.completed ? \"(Done)\" : \"\"}\r\n                    </Badge>}\r\n                  \r\n                  {!activity.userMatch && !activity.training && activity.isToday && <Text size=\"1\" color=\"gray\" mt=\"1\">No scheduled events.</Text>}\r\n                  \r\n                  {!activity.userMatch && !activity.training && !activity.isToday && <Text size=\"1\" color=\"gray\" mt=\"1\">-</Text>}\r\n                </Box>;\n      })}\r\n          </Grid>\r\n          \r\n      <Separator size=\"4\" my=\"3\" />\r\n\r\n      <Heading size=\"3\" mb=\"2\">Next Key Events</Heading>\r\n      {nextThreeKeyEvents.length > 0 ? <Flex direction=\"column\" gap=\"2\">\r\n          {nextThreeKeyEvents.map((event, index) => <Card key={index} size=\"1\" variant=\"surface\">\r\n                  <Flex justify=\"between\" align=\"center\">\r\n                    <Box>\r\n                      <Text weight=\"bold\" style={{\n              textTransform: 'capitalize'\n            }}>{event.name}</Text>\r\n                      <Text size=\"2\" color=\"gray\">{formatMatchDate(event.date)}</Text>\r\n                    </Box>\r\n                    <Badge color=\"purple\" style={{\n            textTransform: 'capitalize'\n          }}>\r\n                      {event.type.replace(/_/g, ' ')}\r\n                    </Badge>\r\n              </Flex>\r\n            </Card>)}\r\n        </Flex> : <Text color=\"gray\">No major upcoming events scheduled in the near future.</Text>}\r\n      \r\n      <Separator size=\"4\" my=\"3\" />\r\n      \r\n      <Grid columns={{\n      initial: \"1\",\n      md: \"2\",\n      lg: \"3\"\n    }} gap=\"4\">\r\n        {/* Club Health - NEW CARD */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"2\">Club Health</Heading>\r\n          <Grid columns={{\n          initial: \"1\",\n          sm: \"2\"\n        }} gap=\"3\" width=\"auto\">\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Board Confidence</Text>\r\n              <Flex align=\"center\" gap=\"2\">\r\n                <Text size=\"5\" weight=\"bold\">{gameState.boardConfidence}%</Text>\r\n                {/* Optional: Add a small trend indicator if data exists */}\r\n              </Flex>\r\n            </Box>\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Fan Support</Text>\r\n              <Flex align=\"center\" gap=\"2\">\r\n                <Text size=\"5\" weight=\"bold\">{gameState.fanSupport}%</Text>\r\n              </Flex>\r\n            </Box>\r\n            <Box style={{\n            gridColumn: \"1 / -1\"\n          }}> \r\n              <Text size=\"2\" weight=\"bold\">Overall Team Morale</Text>\r\n              <Flex align=\"center\" gap=\"2\">\r\n                <Text size=\"5\" weight=\"bold\">{gameState.morale}%</Text>\r\n              </Flex>\r\n            </Box>\r\n          </Grid>\r\n        </Card>\r\n        \r\n        {/* Financial Overview */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"2\">Club Finances</Heading>\r\n          \r\n          <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Balance</Text>\r\n              <Text>${gameState.finances.balance.toLocaleString()}k</Text>\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Weekly Wage</Text>\r\n              <Text>${gameState.finances.weeklyWage.toLocaleString()}k</Text>\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Sponsorships</Text>\r\n              <Text>${gameState.finances.sponsorships.toLocaleString()}k</Text>\r\n            </Box>\r\n            \r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Match Day Revenue</Text>\r\n              <Text>${gameState.finances.matchDayRevenue.toLocaleString()}k</Text>\r\n            </Box>\r\n          </Grid>\r\n        </Card>\r\n        \r\n        {/* Squad Status */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"2\">Squad Status</Heading>\r\n          <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Total Players</Text>\r\n              <Text>{totalTeamPlayersCount}</Text>\r\n            </Box>\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Peak Fitness</Text>\r\n              <Text>{availableAtPeakFitnessPlayersCount}</Text>\r\n            </Box>\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Fitness Concerns</Text>\r\n              <Text color={playersWithFitnessConcernsCount > 0 ? \"orange\" : undefined}>\r\n                {playersWithFitnessConcernsCount}\r\n              </Text>\r\n            </Box>\r\n            {/* Placeholder for Suspended Players count. \r\n                To enable, add a field like 'isSuspended: boolean' to Player type \r\n                and uncomment the logic above and the JSX block below.\r\n             <Box>\r\n              <Text size=\"2\" weight=\"bold\">Suspended</Text>\r\n              <Text color={suspendedPlayersCount > 0 ? \"red\" : undefined}>{suspendedPlayersCount}</Text>\r\n             </Box> \r\n             */}\r\n            <Box>\r\n              <Text size=\"2\" weight=\"bold\">Team Morale</Text>\r\n              <Text>{teamMoraleDisplay}</Text>\r\n            </Box>\r\n          </Grid>\r\n        </Card>\r\n      </Grid>\r\n    </Box>;\n}\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\TeamManagement.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\TeamManagement.tsx\");\n  import.meta.hot.lastModified = \"1747543677760.587\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { Card, Flex, Heading, Text, Box, Button, Select, Grid, Badge, Table } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport default function TeamManagement({\n  gameState,\n  allPlayers\n}) {\n  _s();\n  const [selectedPosition, setSelectedPosition] = useState(\"All\");\n  const [sortBy, setSortBy] = useState(\"rating\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n\n  // Get user team\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  if (!userTeam) {\n    return <Text>Error: Team not found</Text>;\n  }\n\n  // Get team players\n  const teamPlayers = allPlayers.filter(player => player.teamId === gameState.userTeamId);\n\n  // Filter players by position\n  const filteredPlayers = selectedPosition === \"All\" ? teamPlayers : teamPlayers.filter(player => player.position === selectedPosition);\n\n  // Sort players\n  const sortedPlayers = [...filteredPlayers].sort((a, b) => {\n    if (sortBy === \"name\") {\n      return sortOrder === \"asc\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);\n    } else if (sortBy === \"position\") {\n      return sortOrder === \"asc\" ? a.position.localeCompare(b.position) : b.position.localeCompare(a.position);\n    } else if (sortBy === \"age\") {\n      return sortOrder === \"asc\" ? a.age - b.age : b.age - a.age;\n    } else {\n      // rating\n      const aRating = calculateOverallRating(a);\n      const bRating = calculateOverallRating(b);\n      return sortOrder === \"asc\" ? aRating - bRating : bRating - aRating;\n    }\n  });\n\n  // Calculate overall rating for a player\n  function calculateOverallRating(player) {\n    return Math.round((player.attributes.speed + player.attributes.strength + player.attributes.stamina + player.attributes.agility + player.attributes.intelligence + player.attributes.kicking + player.attributes.marking + player.attributes.handball + player.attributes.tackling) / 9);\n  }\n\n  // Handle sort change\n  const handleSortChange = newSortBy => {\n    if (sortBy === newSortBy) {\n      // Toggle sort order if clicking the same column\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      // Set new sort column and default to descending for rating, ascending for others\n      setSortBy(newSortBy);\n      setSortOrder(newSortBy === \"rating\" ? \"desc\" : \"asc\");\n    }\n  };\n\n  // Get position counts\n  const positionCounts = {\n    Forward: teamPlayers.filter(p => p.position === \"Forward\").length,\n    Midfielder: teamPlayers.filter(p => p.position === \"Midfielder\").length,\n    Defender: teamPlayers.filter(p => p.position === \"Defender\").length,\n    Ruck: teamPlayers.filter(p => p.position === \"Ruck\").length,\n    Utility: teamPlayers.filter(p => p.position === \"Utility\").length\n  };\n  return <Box>\r\n      <Heading size=\"6\" mb=\"4\">Team Management</Heading>\r\n      \r\n      <Card variant=\"surface\" mb=\"4\">\r\n        <Heading size=\"4\" mb=\"2\">{userTeam.name} Squad</Heading>\r\n        \r\n        <Grid columns={{\n        initial: \"1\",\n        sm: \"2\",\n        md: \"5\"\n      }} gap=\"3\" mb=\"4\">\r\n          <Card variant=\"surface\" size=\"1\">\r\n            <Text size=\"2\" weight=\"bold\">Forwards</Text>\r\n            <Text size=\"6\">{positionCounts.Forward}</Text>\r\n          </Card>\r\n          \r\n          <Card variant=\"surface\" size=\"1\">\r\n            <Text size=\"2\" weight=\"bold\">Midfielders</Text>\r\n            <Text size=\"6\">{positionCounts.Midfielder}</Text>\r\n          </Card>\r\n          \r\n          <Card variant=\"surface\" size=\"1\">\r\n            <Text size=\"2\" weight=\"bold\">Defenders</Text>\r\n            <Text size=\"6\">{positionCounts.Defender}</Text>\r\n          </Card>\r\n          \r\n          <Card variant=\"surface\" size=\"1\">\r\n            <Text size=\"2\" weight=\"bold\">Rucks</Text>\r\n            <Text size=\"6\">{positionCounts.Ruck}</Text>\r\n          </Card>\r\n          \r\n          <Card variant=\"surface\" size=\"1\">\r\n            <Text size=\"2\" weight=\"bold\">Utilities</Text>\r\n            <Text size=\"6\">{positionCounts.Utility}</Text>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Flex gap=\"3\" mb=\"4\">\r\n          <Box style={{\n          flex: 1\n        }}>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Filter by Position</Text>\r\n            <Select.Root value={selectedPosition} onValueChange={setSelectedPosition}>\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                <Select.Item value=\"All\">All Positions</Select.Item>\r\n                <Select.Item value=\"Forward\">Forwards</Select.Item>\r\n                <Select.Item value=\"Midfielder\">Midfielders</Select.Item>\r\n                <Select.Item value=\"Defender\">Defenders</Select.Item>\r\n                <Select.Item value=\"Ruck\">Rucks</Select.Item>\r\n                <Select.Item value=\"Utility\">Utilities</Select.Item>\r\n              </Select.Content>\r\n            </Select.Root>\r\n          </Box>\r\n        </Flex>\r\n        \r\n        <Table.Root variant=\"surface\">\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.ColumnHeaderCell onClick={() => handleSortChange(\"name\")} style={{\n              cursor: 'pointer'\n            }}>\r\n                Name {sortBy === \"name\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n              </Table.ColumnHeaderCell>\r\n              \r\n              <Table.ColumnHeaderCell onClick={() => handleSortChange(\"position\")} style={{\n              cursor: 'pointer'\n            }}>\r\n                Position {sortBy === \"position\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n              </Table.ColumnHeaderCell>\r\n              \r\n              <Table.ColumnHeaderCell onClick={() => handleSortChange(\"age\")} style={{\n              cursor: 'pointer'\n            }}>\r\n                Age {sortBy === \"age\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n              </Table.ColumnHeaderCell>\r\n              \r\n              <Table.ColumnHeaderCell onClick={() => handleSortChange(\"rating\")} style={{\n              cursor: 'pointer'\n            }}>\r\n                Rating {sortBy === \"rating\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n              </Table.ColumnHeaderCell>\r\n              \r\n              <Table.ColumnHeaderCell>\r\n                Form\r\n              </Table.ColumnHeaderCell>\r\n              \r\n              <Table.ColumnHeaderCell>\r\n                Fitness\r\n              </Table.ColumnHeaderCell>\r\n              \r\n              <Table.ColumnHeaderCell>\r\n                Contract\r\n              </Table.ColumnHeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          \r\n          <Table.Body>\r\n            {sortedPlayers.map(player => <Table.Row key={player.id}>\r\n                <Table.Cell>\r\n                  <Text weight=\"bold\">{player.name}</Text>\r\n                </Table.Cell>\r\n                \r\n                <Table.Cell>\r\n                  <Badge size=\"1\">{player.position}</Badge>\r\n                </Table.Cell>\r\n                \r\n                <Table.Cell>\r\n                  {player.age}\r\n                </Table.Cell>\r\n                \r\n                <Table.Cell>\r\n                  <Box style={{\n                width: '30px',\n                height: '30px',\n                borderRadius: '50%',\n                backgroundColor: '#3b82f6',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                color: 'white',\n                fontWeight: 'bold'\n              }}>\r\n                    {calculateOverallRating(player)}\r\n                  </Box>\r\n                </Table.Cell>\r\n                \r\n                <Table.Cell>\r\n                  <Flex align=\"center\" gap=\"2\">\r\n                    <Box style={{\n                  width: `${player.form}%`,\n                  height: '8px',\n                  backgroundColor: player.form > 80 ? '#22c55e' : player.form > 60 ? '#f59e0b' : '#ef4444',\n                  borderRadius: '4px'\n                }} />\r\n                    <Text size=\"1\">{player.form}</Text>\r\n                  </Flex>\r\n                </Table.Cell>\r\n                \r\n                <Table.Cell>\r\n                  <Flex align=\"center\" gap=\"2\">\r\n                    <Box style={{\n                  width: `${player.fitness}%`,\n                  height: '8px',\n                  backgroundColor: player.fitness > 80 ? '#22c55e' : player.fitness > 60 ? '#f59e0b' : '#ef4444',\n                  borderRadius: '4px'\n                }} />\r\n                    <Text size=\"1\">{player.fitness}</Text>\r\n                  </Flex>\r\n                </Table.Cell>\r\n                \r\n                <Table.Cell>\r\n                  <Text size=\"2\">{player.contract.yearsRemaining} years</Text>\r\n                  <Text size=\"2\">${player.contract.salary}k/yr</Text>\r\n                </Table.Cell>\r\n              </Table.Row>)}\r\n          </Table.Body>\r\n        </Table.Root>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Team Tactics</Heading>\r\n        \r\n        <Text mb=\"3\">\r\n          Set your team's playing style and tactical approach. These settings will influence how your team performs in matches.\r\n        </Text>\r\n        \r\n        <Grid columns={{\n        initial: \"1\",\n        sm: \"2\"\n      }} gap=\"4\">\r\n          <Box>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Playing Style</Text>\r\n            <Select.Root defaultValue=\"balanced\">\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                <Select.Item value=\"defensive\">Defensive</Select.Item>\r\n                <Select.Item value=\"balanced\">Balanced</Select.Item>\r\n                <Select.Item value=\"attacking\">Attacking</Select.Item>\r\n              </Select.Content>\r\n            </Select.Root>\r\n            \r\n            <Text size=\"2\" color=\"gray\" mt=\"1\">\r\n              Defensive: Focus on preventing opposition scoring.\r\n              Balanced: Equal focus on attack and defense.\r\n              Attacking: Prioritize scoring over defense.\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Pressure Intensity</Text>\r\n            <Select.Root defaultValue=\"5\">\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(value => <Select.Item key={value} value={value.toString()}>\r\n                    {value} {value < 4 ? \"(Low)\" : value < 8 ? \"(Medium)\" : \"(High)\"}\r\n                  </Select.Item>)}\r\n              </Select.Content>\r\n            </Select.Root>\r\n            \r\n            <Text size=\"2\" color=\"gray\" mt=\"1\">\r\n              Higher pressure can force more turnovers but may tire players faster.\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Possession Style</Text>\r\n            <Select.Root defaultValue=\"5\">\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(value => <Select.Item key={value} value={value.toString()}>\r\n                    {value} {value < 4 ? \"(Direct)\" : value < 8 ? \"(Mixed)\" : \"(Possession)\"}\r\n                  </Select.Item>)}\r\n              </Select.Content>\r\n            </Select.Root>\r\n            \r\n            <Text size=\"2\" color=\"gray\" mt=\"1\">\r\n              Direct: Quick forward movement. Possession: Patient build-up play.\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Risk Taking</Text>\r\n            <Select.Root defaultValue=\"5\">\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(value => <Select.Item key={value} value={value.toString()}>\r\n                    {value} {value < 4 ? \"(Conservative)\" : value < 8 ? \"(Balanced)\" : \"(Aggressive)\"}\r\n                  </Select.Item>)}\r\n              </Select.Content>\r\n            </Select.Root>\r\n            \r\n            <Text size=\"2\" color=\"gray\" mt=\"1\">\r\n              Higher risk may lead to more scoring opportunities but also more turnovers.\r\n            </Text>\r\n          </Box>\r\n        </Grid>\r\n        \r\n        <Button mt=\"4\">Save Tactics</Button>\r\n      </Card>\r\n    </Box>;\n}\n_s(TeamManagement, \"AYBTZh2yl4Emv9oePKu3qxroLc8=\");\n_c = TeamManagement;\nvar _c;\n$RefreshReg$(_c, \"TeamManagement\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["players", "teams", "players", "p", "p", "o", "import_jsx_dev_runtime", "p", "o", "e", "_c", "import_react", "import_jsx_dev_runtime", "_s", "p", "o", "_c"]
}
