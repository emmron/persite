{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.tsx\");\n  import.meta.hot.lastModified = \"1747543677778.8335\";\n}\n// REMIX HMR END\n\nimport { Container, Card, Heading, Tabs, Text, Box, Separator } from \"@radix-ui/themes\";\nimport { json } from \"@remix-run/node\";\nimport { useState } from \"react\";\nimport Header from \"~/components/Header\";\nimport { generateMetaTags } from \"~/utils/generateMetaTags\";\nimport GameInitialization from \"~/components/AFLManager/GameInitialization\";\nimport Dashboard from \"~/components/AFLManager/Dashboard\";\nimport TeamManagement from \"~/components/AFLManager/TeamManagement\";\nimport { initialGameState } from \"~/data/AFLManager/gameState\";\nimport { players as initialPlayers, generatePlayersForTeam } from \"~/data/AFLManager/players\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport const meta = () => generateMetaTags({\n  title: \"AFL Manager | Coach Simulation Game\",\n  description: \"Simulate being an AFL head coach - manage your team, set tactics, and lead your club to premiership glory!\"\n});\nexport const loader = async ({\n  request\n}) => {\n  // In a real app, you would fetch this data from a database\n  // For now, we'll use in-memory data\n  return json({\n    gameInitialized: false\n  });\n};\nexport default function Index() {\n  _s();\n  // In a real app, this would be stored in a database or localStorage\n  const [gameState, setGameState] = useState(initialGameState);\n  const [allPlayers, setAllPlayers] = useState(initialPlayers);\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n\n  // Handle game initialization\n  const handleGameStart = newGameState => {\n    setGameState({\n      ...newGameState,\n      initialized: true\n    });\n\n    // Generate additional players for all teams if needed\n    const generatedPlayers = [...initialPlayers];\n    teams.forEach(team => {\n      // Skip if we already have enough players for this team\n      const existingPlayers = initialPlayers.filter(p => p.teamId === team.id);\n      if (existingPlayers.length < 22) {\n        const additionalPlayers = generatePlayersForTeam(team.id, 22 - existingPlayers.length);\n        generatedPlayers.push(...additionalPlayers);\n      }\n    });\n    setAllPlayers(generatedPlayers);\n  };\n  return <Container size=\"2\">\r\n      <Card size={{\n      initial: '2',\n      sm: '5'\n    }}>\r\n        <Header />\r\n        \r\n        <Box mt=\"4\">\r\n          <Heading size=\"8\" align=\"center\">AFL Manager</Heading>\r\n          <Text size=\"2\" color=\"gray\" align=\"center\" mb=\"4\">\r\n            Simulate being an AFL head coach - lead your team to premiership glory!\r\n          </Text>\r\n        </Box>\r\n\r\n        <Separator size=\"4\" my=\"4\" />\r\n\r\n        {!gameState.initialized ? <GameInitialization onGameStart={handleGameStart} /> : <Tabs.Root defaultValue=\"dashboard\" onValueChange={setActiveTab}>\r\n            <Tabs.List>\r\n              <Tabs.Trigger value=\"dashboard\">Dashboard</Tabs.Trigger>\r\n              <Tabs.Trigger value=\"team\">Team</Tabs.Trigger>\r\n              <Tabs.Trigger value=\"match\">Match Center</Tabs.Trigger>\r\n              <Tabs.Trigger value=\"league\">League</Tabs.Trigger>\r\n              <Tabs.Trigger value=\"players\">Players</Tabs.Trigger>\r\n              <Tabs.Trigger value=\"club\">Club</Tabs.Trigger>\r\n            </Tabs.List>\r\n            \r\n            <Box pt=\"4\">\r\n              <Tabs.Content value=\"dashboard\">\r\n                <Dashboard gameState={gameState} allPlayers={allPlayers} />\r\n              </Tabs.Content>\r\n              \r\n              <Tabs.Content value=\"team\">\r\n                <TeamManagement gameState={gameState} allPlayers={allPlayers} />\r\n              </Tabs.Content>\r\n              \r\n              <Tabs.Content value=\"match\">\r\n                <Text>Match center content will go here</Text>\r\n              </Tabs.Content>\r\n              \r\n              <Tabs.Content value=\"league\">\r\n                <Text>League information content will go here</Text>\r\n              </Tabs.Content>\r\n              \r\n              <Tabs.Content value=\"players\">\r\n                <Text>Player management content will go here</Text>\r\n              </Tabs.Content>\r\n              \r\n              <Tabs.Content value=\"club\">\r\n                <Text>Club management content will go here</Text>\r\n              </Tabs.Content>\r\n            </Box>\r\n          </Tabs.Root>}\r\n      </Card>\r\n    </Container>;\n}\n_s(Index, \"WQGyUdFjTz3WeV3Vh6XkJDovOVA=\");\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["p", "o"]
}
