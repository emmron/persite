{
  "version": 3,
  "sources": ["../../../app/routes/afl-manager.tsx", "../../../app/components/AFLManager/MatchCenter.tsx", "../../../app/utils/AFLManager/matchEngine.ts", "../../../app/components/AFLManager/League.tsx", "../../../app/components/AFLManager/Players.tsx", "../../../app/components/AFLManager/Club.tsx", "../../../app/components/AFLManager/SimulationCalendar.tsx", "../../../app/components/AFLManager/Training.tsx", "../../../app/components/AFLManager/PressConference.tsx", "../../../app/components/AFLManager/Resignation.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\afl-manager.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\afl-manager.tsx\");\n  import.meta.hot.lastModified = \"1747545755489.4038\";\n}\n// REMIX HMR END\n\nimport { Heading, Text, Box, Flex, Button } from \"@radix-ui/themes\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { generateMetaTags } from \"~/utils/generateMetaTags\";\nimport GameInitialization from \"~/components/AFLManager/GameInitialization\";\nimport Dashboard from \"~/components/AFLManager/Dashboard\";\nimport TeamManagement from \"~/components/AFLManager/TeamManagement\";\nimport MatchCenter from \"~/components/AFLManager/MatchCenter\";\nimport League from \"~/components/AFLManager/League\";\nimport Players from \"~/components/AFLManager/Players\";\nimport Club from \"~/components/AFLManager/Club\";\nimport SimulationCalendar from \"~/components/AFLManager/SimulationCalendar\";\nimport Training from \"~/components/AFLManager/Training\";\nimport PressConference from \"~/components/AFLManager/PressConference\";\nimport Resignation from \"~/components/AFLManager/Resignation\";\nimport { initialGameState, advanceGameDay, scheduleTraining, completePresser } from \"~/data/AFLManager/gameState\";\nimport { players as initialPlayers, generatePlayersForTeam } from \"~/data/AFLManager/players\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport const meta = generateMetaTags({\n  title: \"AFL Manager | Coach Simulation Game\",\n  description: \"Simulate being an AFL head coach - manage your team, set tactics, and lead your club to premiership glory!\"\n});\n\n// Simple type for the navigation item props\n\n// Navigation Item Component\nfunction NavItem({\n  label,\n  active,\n  onClick\n}) {\n  return <Box onClick={onClick} style={{\n    padding: '10px 16px',\n    backgroundColor: active ? '#3b82f6' : 'transparent',\n    color: active ? 'white' : '#aaa',\n    cursor: 'pointer',\n    borderLeft: active ? '4px solid #60a5fa' : '4px solid transparent',\n    transition: 'all 0.2s ease'\n  }}>\r\n      <Text weight={active ? \"bold\" : \"regular\"}>{label}</Text>\r\n    </Box>;\n}\n_c = NavItem;\nexport default function AFLManager() {\n  _s();\n  // In a real app, this would be stored in a database or localStorage\n  const [gameState, setGameState] = useState(initialGameState);\n  const [allPlayers, setAllPlayers] = useState(initialPlayers);\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const [showTraining, setShowTraining] = useState(false);\n  const [showPressConference, setShowPressConference] = useState(false);\n  const [showResignation, setShowResignation] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedPresserId, setSelectedPresserId] = useState(null);\n\n  // Handle game initialization\n  const handleGameStart = newGameState => {\n    setGameState({\n      ...newGameState,\n      initialized: true\n    });\n\n    // Generate additional players for all teams if needed\n    const generatedPlayers = [...initialPlayers];\n    teams.forEach(team => {\n      // Skip if we already have enough players for this team\n      const existingPlayers = initialPlayers.filter(p => p.teamId === team.id);\n      if (existingPlayers.length < 22) {\n        const additionalPlayers = generatePlayersForTeam(team.id, 22 - existingPlayers.length);\n        generatedPlayers.push(...additionalPlayers);\n      }\n    });\n    setAllPlayers(generatedPlayers);\n  };\n\n  // Handle advance day\n  const handleAdvanceDay = useCallback(() => {\n    const {\n      newState,\n      dailySummary\n    } = advanceGameDay(gameState, teams);\n    setGameState(newState);\n  }, [gameState]);\n\n  // Handle schedule training\n  const handleScheduleTraining = useCallback(date => {\n    setSelectedDate(date);\n    setShowTraining(true);\n  }, []);\n\n  // Handle complete training setup\n  const handleCompleteTrainingSetup = useCallback((date, focus, intensity, playerIds) => {\n    const newGameState = scheduleTraining(gameState, date, focus, intensity, playerIds);\n    setGameState(newGameState);\n    setShowTraining(false);\n  }, [gameState]);\n\n  // Handle view press conference\n  const handleViewPressConference = useCallback(presserId => {\n    setSelectedPresserId(presserId);\n    setShowPressConference(true);\n  }, []);\n\n  // Handle complete press conference\n  const handleCompletePressConference = useCallback((presserId, answers) => {\n    const newGameState = completePresser(gameState, presserId, answers);\n    setGameState(newGameState);\n    setShowPressConference(false);\n  }, [gameState]);\n\n  // Handle cancel modal\n  const handleCancelModal = useCallback(() => {\n    setShowTraining(false);\n    setShowPressConference(false);\n    setShowResignation(false);\n  }, []);\n\n  // Handle show resignation\n  const handleShowResignation = useCallback(() => {\n    setShowResignation(true);\n  }, []);\n\n  // Handle confirm resignation\n  const handleConfirmResignation = useCallback(reason => {\n    // In a real implementation, this would save the resignation reason and transition to a new game state\n    // For now, we'll just reset to the initialization screen\n    setGameState(initialGameState);\n    setShowResignation(false);\n  }, []);\n\n  // Render the active section content\n  const renderContent = () => {\n    if (!gameState.initialized) {\n      return <GameInitialization onGameStart={handleGameStart} />;\n    }\n\n    // If a modal is shown, render it on top of the content\n    if (showTraining && selectedDate) {\n      return <Training gameState={gameState} allPlayers={allPlayers} selectedDate={selectedDate} onScheduleTraining={handleCompleteTrainingSetup} onCancel={handleCancelModal} />;\n    }\n    if (showPressConference && selectedPresserId) {\n      return <PressConference gameState={gameState} presserId={selectedPresserId} onComplete={handleCompletePressConference} onCancel={handleCancelModal} />;\n    }\n    if (showResignation) {\n      return <Resignation gameState={gameState} onConfirmResign={handleConfirmResignation} onCancel={handleCancelModal} />;\n    }\n    switch (activeSection) {\n      case \"dashboard\":\n        return <Dashboard gameState={gameState} allPlayers={allPlayers} onAdvanceDay={handleAdvanceDay} onPrepareMatch={matchId => {\n          const match = gameState.seasonFixtures.find(m => m.id === matchId);\n          if (match) {\n            setGameState({\n              ...gameState,\n              activeMatchId: matchId\n            });\n            setActiveSection(\"match\");\n          }\n        }} onSimulateToDate={date => {\n          // Logic to simulate to a specific date\n          console.log(`Simulating to date: ${date}`);\n          // Simple implementation - just set the current date\n          setGameState({\n            ...gameState,\n            currentDate: date\n          });\n        }} lastDailySummary={gameState.lastDailySummary} userPrompts={gameState.userPrompts} onUserPromptAction={prompt => {\n          // Handle prompt action\n          console.log(`Handling prompt: ${prompt.id}`);\n          // Remove the prompt from the list\n          setGameState({\n            ...gameState,\n            userPrompts: gameState.userPrompts.filter(p => p.id !== prompt.id)\n          });\n        }} />;\n      case \"team\":\n        return <TeamManagement gameState={gameState} allPlayers={allPlayers} />;\n      case \"match\":\n        return <MatchCenter gameState={gameState} allPlayers={allPlayers} />;\n      case \"league\":\n        return <League gameState={gameState} allPlayers={allPlayers} />;\n      case \"players\":\n        return <Players gameState={gameState} allPlayers={allPlayers} />;\n      case \"club\":\n        return <Club gameState={gameState} allPlayers={allPlayers} />;\n      case \"calendar\":\n        return <SimulationCalendar gameState={gameState} allPlayers={allPlayers} onAdvanceDay={handleAdvanceDay} onScheduleTraining={handleScheduleTraining} onViewPressConference={handleViewPressConference} onResign={handleShowResignation} />;\n      default:\n        return <Dashboard gameState={gameState} allPlayers={allPlayers} onAdvanceDay={handleAdvanceDay} onPrepareMatch={matchId => {\n          const match = gameState.seasonFixtures.find(m => m.id === matchId);\n          if (match) {\n            setGameState({\n              ...gameState,\n              activeMatchId: matchId\n            });\n            setActiveSection(\"match\");\n          }\n        }} />;\n    }\n  };\n\n  // Get the team name for the header\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  const teamName = userTeam?.name || \"AFL Manager\";\n\n  // Add effect to add fullscreen class to body\n  useEffect(() => {\n    // Add fullscreen class to body\n    document.body.classList.add('afl-manager-fullscreen');\n\n    // Remove class when component unmounts\n    return () => {\n      document.body.classList.remove('afl-manager-fullscreen');\n    };\n  }, []);\n  return <Box className=\"afl-manager-container\" style={{\n    height: '100vh',\n    width: '100vw',\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden'\n  }}>\r\n      {/* Top Bar */}\r\n      <Flex justify=\"between\" align=\"center\" px=\"4\" py=\"2\" style={{\n      backgroundColor: '#0f0f0f',\n      borderBottom: '1px solid #333',\n      height: '60px'\n    }}>\r\n        <Flex align=\"center\" gap=\"3\">\r\n          <Heading size=\"5\" style={{\n          color: '#fff'\n        }}>\r\n            {gameState.initialized ? teamName : \"AFL Manager\"}\r\n          </Heading>\r\n          {gameState.initialized && <Text size=\"2\" style={{\n          color: '#aaa'\n        }}>\r\n              Round {gameState.currentRound}\r\n            </Text>}\r\n        </Flex>\r\n        \r\n        {gameState.initialized && <Flex gap=\"4\" align=\"center\">\r\n            <Box style={{\n          textAlign: 'center'\n        }}>\r\n              <Text size=\"1\" style={{\n            color: '#aaa'\n          }}>Ladder Position</Text>\r\n              <Text size=\"3\" weight=\"bold\">\r\n                {gameState.ladder.sort((a, b) => {\n              if (b.points !== a.points) return b.points - a.points;\n              return b.percentage - a.percentage;\n            }).findIndex(pos => pos.teamId === gameState.userTeamId) + 1}\r\n              </Text>\r\n            </Box>\r\n            \r\n            <Box style={{\n          textAlign: 'center'\n        }}>\r\n              <Text size=\"1\" style={{\n            color: '#aaa'\n          }}>Record</Text>\r\n              <Text size=\"3\" weight=\"bold\">\r\n                {gameState.ladder.find(pos => pos.teamId === gameState.userTeamId)?.wins || 0} - \r\n                {gameState.ladder.find(pos => pos.teamId === gameState.userTeamId)?.losses || 0}\r\n              </Text>\r\n            </Box>\r\n            \r\n            <Button variant=\"outline\" size=\"1\" onClick={handleAdvanceDay} style={{\n          transition: \"all 0.2s ease\",\n          position: \"relative\",\n          overflow: \"hidden\"\n        }} onMouseDown={e => {\n          const button = e.currentTarget;\n          button.style.transform = \"scale(0.95)\";\n\n          // Create ripple effect\n          const ripple = document.createElement(\"span\");\n          const rect = button.getBoundingClientRect();\n          const size = Math.max(rect.width, rect.height) * 2;\n          ripple.style.width = ripple.style.height = `${size}px`;\n          ripple.style.left = `${e.clientX - rect.left - size / 2}px`;\n          ripple.style.top = `${e.clientY - rect.top - size / 2}px`;\n          ripple.style.position = \"absolute\";\n          ripple.style.borderRadius = \"50%\";\n          ripple.style.backgroundColor = \"rgba(255, 255, 255, 0.2)\";\n          ripple.style.transform = \"scale(0)\";\n          ripple.style.animation = \"ripple 0.6s linear\";\n          button.appendChild(ripple);\n          setTimeout(() => {\n            ripple.remove();\n            button.style.transform = \"\";\n          }, 600);\n        }}>\r\n              Continue\r\n            </Button>\r\n          </Flex>}\r\n      </Flex>\r\n      \r\n      {/* Main Content Area */}\r\n      <Flex style={{\n      flex: 1,\n      overflow: 'hidden'\n    }}>\r\n        {/* Sidebar Navigation */}\r\n        {gameState.initialized && <Box style={{\n        width: '200px',\n        backgroundColor: '#222',\n        borderRight: '1px solid #333',\n        padding: '16px 0',\n        overflowY: 'auto'\n      }}>\r\n            <Flex direction=\"column\" gap=\"1\">\r\n              <NavItem label=\"Dashboard\" active={activeSection === \"dashboard\"} onClick={() => setActiveSection(\"dashboard\")} />\r\n              <NavItem label=\"Team\" active={activeSection === \"team\"} onClick={() => setActiveSection(\"team\")} />\r\n              <NavItem label=\"Match Center\" active={activeSection === \"match\"} onClick={() => setActiveSection(\"match\")} />\r\n              <NavItem label=\"League\" active={activeSection === \"league\"} onClick={() => setActiveSection(\"league\")} />\r\n              <NavItem label=\"Players\" active={activeSection === \"players\"} onClick={() => setActiveSection(\"players\")} />\r\n              <NavItem label=\"Club\" active={activeSection === \"club\"} onClick={() => setActiveSection(\"club\")} />\r\n              <NavItem label=\"Calendar\" active={activeSection === \"calendar\"} onClick={() => setActiveSection(\"calendar\")} />\r\n            </Flex>\r\n          </Box>}\r\n        \r\n        {/* Content Area */}\r\n        <Box style={{\n        flex: 1,\n        padding: gameState.initialized ? '20px' : '0',\n        overflowY: 'auto',\n        backgroundColor: '#2a2a2a'\n      }}>\r\n          {renderContent()}\r\n        </Box>\r\n      </Flex>\r\n    </Box>;\n}\n_s(AFLManager, \"QJH54+QIAbQdNw0r4jB6cvPcJW4=\");\n_c2 = AFLManager;\nvar _c, _c2;\n$RefreshReg$(_c, \"NavItem\");\n$RefreshReg$(_c2, \"AFLManager\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\MatchCenter.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\MatchCenter.tsx\");\n  import.meta.hot.lastModified = \"1747552157162.0967\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { Card, Flex, Heading, Text, Box, Button, Grid, Badge, Table, Tabs } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nimport { simulateMatch } from \"~/utils/AFLManager/matchEngine\";\nexport default function MatchCenter({\n  gameState,\n  allPlayers\n}) {\n  _s();\n  const [selectedMatch, setSelectedMatch] = useState(null);\n  const [matchSimulation, setMatchSimulation] = useState({\n    inProgress: false,\n    currentEvent: 0\n  });\n\n  // Get user team\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  if (!userTeam) {\n    return <Text>Error: Team not found</Text>;\n  }\n\n  // Get current round matches\n  const currentRoundMatches = gameState.seasonFixtures.filter(match => match.round === gameState.currentRound);\n\n  // Get user team match for current round\n  const userTeamMatch = currentRoundMatches.find(match => match.homeTeamId === gameState.userTeamId || match.awayTeamId === gameState.userTeamId);\n\n  // Format match date\n  const formatMatchDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-AU', {\n      weekday: 'short',\n      day: 'numeric',\n      month: 'short'\n    });\n  };\n\n  // Get team by ID\n  const getTeamById = teamId => {\n    return teams.find(team => team.id === teamId);\n  };\n\n  // Handle match selection\n  const handleMatchSelect = match => {\n    setSelectedMatch(match);\n    setMatchSimulation({\n      inProgress: false,\n      currentEvent: 0\n    });\n  };\n\n  // Handle match simulation\n  const handleSimulateMatch = () => {\n    if (!selectedMatch) return;\n    const homeTeam = getTeamById(selectedMatch.homeTeamId);\n    const awayTeam = getTeamById(selectedMatch.awayTeamId);\n    if (!homeTeam || !awayTeam) return;\n\n    // Get players for each team\n    const homePlayers = allPlayers.filter(player => player.teamId === homeTeam.id);\n    const awayPlayers = allPlayers.filter(player => player.teamId === awayTeam.id);\n\n    // Create lineups with detailed FM-style tactics\n    const homeLineup = {\n      teamId: homeTeam.id,\n      players: homePlayers,\n      tactics: {\n        style: \"balanced\",\n        pressure: 5,\n        possession: 5,\n        riskTaking: 5,\n        ballMovement: \"corridor-focused\",\n        defensiveStructure: \"accountable-zone\",\n        attackingStructure: \"leading-patterns\",\n        contestApproach: \"outnumber-at-contest\",\n        centerBounceSetup: \"6-6-6\",\n        quarterAdjustments: {\n          firstQuarter: \"fast-start\",\n          thirdQuarter: \"apply-pressure\",\n          finalQuarter: \"protect-lead\"\n        },\n        rotationSystem: {\n          type: \"time-based\",\n          forwardFrequency: 5,\n          midfieldFrequency: 7,\n          defenseFrequency: 10,\n          ruckStrategy: \"quarters\"\n        }\n      },\n      playerRoles: {}\n    };\n    const awayLineup = {\n      teamId: awayTeam.id,\n      players: awayPlayers,\n      tactics: {\n        style: \"balanced\",\n        pressure: 5,\n        possession: 5,\n        riskTaking: 5,\n        ballMovement: \"boundary-line\",\n        defensiveStructure: \"zone-defense\",\n        attackingStructure: \"forward-target-focus\",\n        contestApproach: \"physical-intimidation\",\n        centerBounceSetup: \"5-7-5\",\n        quarterAdjustments: {\n          firstQuarter: \"assess-opposition\",\n          thirdQuarter: \"apply-pressure\",\n          finalQuarter: \"protect-lead\"\n        },\n        rotationSystem: {\n          type: \"time-based\",\n          forwardFrequency: 5,\n          midfieldFrequency: 6,\n          defenseFrequency: 12,\n          ruckStrategy: \"quarters\"\n        }\n      },\n      playerRoles: {}\n    };\n\n    // Assign default roles based on position\n    homePlayers.forEach(player => {\n      let role = \"\";\n      let instructions = [];\n      switch (player.position) {\n        case \"Forward\":\n          role = \"Key Target\";\n          instructions = [\"Lead up at ball carrier\", \"Take contested marks\"];\n          break;\n        case \"Midfielder\":\n          role = \"Inside Midfielder\";\n          instructions = [\"Win clearances\", \"Distribute by hand\"];\n          break;\n        case \"Defender\":\n          role = \"Lockdown\";\n          instructions = [\"Stick to opponent\", \"Spoil contests\"];\n          break;\n        case \"Ruck\":\n          role = \"Tap Specialist\";\n          instructions = [\"Win hitouts\", \"Follow up at ground level\"];\n          break;\n        default:\n          role = \"General\";\n          instructions = [\"Follow team structure\"];\n      }\n      homeLineup.playerRoles[player.id] = {\n        role,\n        instructions\n      };\n    });\n\n    // Same for away team\n    awayPlayers.forEach(player => {\n      let role = \"\";\n      let instructions = [];\n      switch (player.position) {\n        case \"Forward\":\n          role = \"Crumber\";\n          instructions = [\"Crumb from contests\", \"Apply forward pressure\"];\n          break;\n        case \"Midfielder\":\n          role = \"Outside Midfielder\";\n          instructions = [\"Receive from contests\", \"Use pace on wings\"];\n          break;\n        case \"Defender\":\n          role = \"Interceptor\";\n          instructions = [\"Read the play\", \"Take intercept marks\"];\n          break;\n        case \"Ruck\":\n          role = \"Around-the-Ground\";\n          instructions = [\"Compete in hitouts\", \"Be a marking target around ground\"];\n          break;\n        default:\n          role = \"General\";\n          instructions = [\"Follow team structure\"];\n      }\n      awayLineup.playerRoles[player.id] = {\n        role,\n        instructions\n      };\n    });\n\n    // Simulate the match\n    const result = simulateMatch(selectedMatch, homeTeam, awayTeam, homeLineup.players, awayLineup.players);\n\n    // Start simulation display\n    setMatchSimulation({\n      inProgress: true,\n      currentEvent: 0,\n      result: {\n        homeScore: result.homeScore,\n        awayScore: result.awayScore,\n        events: result.events\n      }\n    });\n\n    // Simulate events over time\n    const eventInterval = setInterval(() => {\n      setMatchSimulation(prev => {\n        if (!prev.result || prev.currentEvent >= prev.result.events.length - 1) {\n          clearInterval(eventInterval);\n          return {\n            ...prev,\n            inProgress: false,\n            currentEvent: prev.result ? prev.result.events.length - 1 : 0\n          };\n        }\n        return {\n          ...prev,\n          currentEvent: prev.currentEvent + 1\n        };\n      });\n    }, 1500);\n  };\n\n  // Render match list\n  const renderMatchList = () => <Card variant=\"surface\">\r\n      <Heading size=\"4\" mb=\"3\">Round {gameState.currentRound} Fixtures</Heading>\r\n      \r\n      <Flex direction=\"column\" gap=\"3\">\r\n        {currentRoundMatches.map(match => {\n        const homeTeam = getTeamById(match.homeTeamId);\n        const awayTeam = getTeamById(match.awayTeamId);\n        if (!homeTeam || !awayTeam) return null;\n        const isUserTeamMatch = match.homeTeamId === gameState.userTeamId || match.awayTeamId === gameState.userTeamId;\n        return <Card key={match.id} variant={selectedMatch?.id === match.id ? \"classic\" : \"surface\"} size=\"1\" style={{\n          cursor: 'pointer'\n        }} onClick={() => handleMatchSelect(match)}>\r\n              <Flex justify=\"between\" align=\"center\">\r\n                <Box>\r\n                  <Flex gap=\"2\" align=\"center\">\r\n                    {isUserTeamMatch && <Badge size=\"1\" color=\"blue\">Your Match</Badge>}\r\n                    <Text size=\"2\" color=\"gray\">{formatMatchDate(match.date)}</Text>\r\n                  </Flex>\r\n                  \r\n                  <Flex gap=\"2\" align=\"center\" mt=\"1\">\r\n                    <Text size=\"3\" weight=\"bold\">{homeTeam.name}</Text>\r\n                    <Text size=\"3\">vs</Text>\r\n                    <Text size=\"3\" weight=\"bold\">{awayTeam.name}</Text>\r\n                  </Flex>\r\n                  \r\n                  <Text size=\"2\">{match.venue}</Text>\r\n                </Box>\r\n                \r\n                {match.completed ? <Box>\r\n                    <Text weight=\"bold\">\r\n                      {match.result?.homeScore.goals}.{match.result?.homeScore.behinds} ({match.result?.homeScore.total}) - {match.result?.awayScore.goals}.{match.result?.awayScore.behinds} ({match.result?.awayScore.total})\r\n                    </Text>\r\n                    <Text size=\"2\" color=\"gray\">Final</Text>\r\n                  </Box> : <Button size=\"1\" variant=\"solid\" onClick={e => {\n              e.stopPropagation();\n              handleMatchSelect(match);\n            }}>\r\n                    View\r\n                  </Button>}\r\n              </Flex>\r\n            </Card>;\n      })}\r\n      </Flex>\r\n    </Card>;\n\n  // Render match details\n  const renderMatchDetails = () => {\n    if (!selectedMatch) return null;\n    const homeTeam = getTeamById(selectedMatch.homeTeamId);\n    const awayTeam = getTeamById(selectedMatch.awayTeamId);\n    if (!homeTeam || !awayTeam) return null;\n    const isUserTeamMatch = selectedMatch.homeTeamId === gameState.userTeamId || selectedMatch.awayTeamId === gameState.userTeamId;\n    const isUserTeamHome = selectedMatch.homeTeamId === gameState.userTeamId;\n    return <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Match Details</Heading>\r\n        \r\n        <Flex justify=\"between\" align=\"center\" mb=\"3\">\r\n          <Box>\r\n            <Text size=\"2\" color=\"gray\">{formatMatchDate(selectedMatch.date)}</Text>\r\n            <Text size=\"2\">{selectedMatch.venue}</Text>\r\n          </Box>\r\n          \r\n          {isUserTeamMatch && !selectedMatch.completed && <Button variant=\"solid\" onClick={handleSimulateMatch} disabled={matchSimulation.inProgress}>\r\n              {matchSimulation.inProgress ? \"Simulating...\" : \"Simulate Match\"}\r\n            </Button>}\r\n        </Flex>\r\n        \r\n        <Card variant=\"classic\" mb=\"4\">\r\n          <Flex justify=\"between\" align=\"center\">\r\n            <Flex direction=\"column\" align=\"center\" style={{\n            flex: 1\n          }}>\r\n              <Box style={{\n              width: '60px',\n              height: '60px',\n              borderRadius: '50%',\n              backgroundColor: homeTeam.colors.primary,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              color: 'white',\n              fontWeight: 'bold',\n              marginBottom: '8px'\n            }}>\r\n                {homeTeam.name.substring(0, 3).toUpperCase()}\r\n              </Box>\r\n              <Text weight=\"bold\">{homeTeam.name}</Text>\r\n              {isUserTeamHome && <Badge size=\"1\">Your Team</Badge>}\r\n            </Flex>\r\n            \r\n            <Box style={{\n            flex: 1,\n            textAlign: 'center'\n          }}>\r\n              {selectedMatch.completed || matchSimulation.result ? <Flex direction=\"column\" align=\"center\">\r\n                  <Text size=\"8\" weight=\"bold\">\r\n                    {matchSimulation.result?.homeScore.goals || selectedMatch.result?.homeScore.goals || 0}.\r\n                    {matchSimulation.result?.homeScore.behinds || selectedMatch.result?.homeScore.behinds || 0}\r\n                  </Text>\r\n                  <Text size=\"3\">\r\n                    ({matchSimulation.result?.homeScore.total || selectedMatch.result?.homeScore.total || 0})\r\n                  </Text>\r\n                </Flex> : <Text size=\"8\" weight=\"bold\">-</Text>}\r\n            </Box>\r\n            \r\n            <Text size=\"6\" weight=\"bold\">vs</Text>\r\n            \r\n            <Box style={{\n            flex: 1,\n            textAlign: 'center'\n          }}>\r\n              {selectedMatch.completed || matchSimulation.result ? <Flex direction=\"column\" align=\"center\">\r\n                  <Text size=\"8\" weight=\"bold\">\r\n                    {matchSimulation.result?.awayScore.goals || selectedMatch.result?.awayScore.goals || 0}.\r\n                    {matchSimulation.result?.awayScore.behinds || selectedMatch.result?.awayScore.behinds || 0}\r\n                  </Text>\r\n                  <Text size=\"3\">\r\n                    ({matchSimulation.result?.awayScore.total || selectedMatch.result?.awayScore.total || 0})\r\n                  </Text>\r\n                </Flex> : <Text size=\"8\" weight=\"bold\">-</Text>}\r\n            </Box>\r\n            \r\n            <Flex direction=\"column\" align=\"center\" style={{\n            flex: 1\n          }}>\r\n              <Box style={{\n              width: '60px',\n              height: '60px',\n              borderRadius: '50%',\n              backgroundColor: awayTeam.colors.primary,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              color: 'white',\n              fontWeight: 'bold',\n              marginBottom: '8px'\n            }}>\r\n                {awayTeam.name.substring(0, 3).toUpperCase()}\r\n              </Box>\r\n              <Text weight=\"bold\">{awayTeam.name}</Text>\r\n              {!isUserTeamHome && isUserTeamMatch && <Badge size=\"1\">Your Team</Badge>}\r\n            </Flex>\r\n          </Flex>\r\n        </Card>\r\n        \r\n        {/* Match Simulation Events */}\r\n        {matchSimulation.result && <Box>\r\n            <Heading size=\"3\" mb=\"2\">Match Events</Heading>\r\n            \r\n            <Card variant=\"surface\" style={{\n          maxHeight: '300px',\n          overflow: 'auto'\n        }}>\r\n              {matchSimulation.result.events.slice(0, matchSimulation.currentEvent + 1).map((event, index) => {\n            // Format timestamp as MM:SS\n            const minutes = Math.floor(event.timestamp / 60);\n            const seconds = event.timestamp % 60;\n            const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\n            // Determine quarter\n            const quarter = event.quarter || Math.floor(event.timestamp / (30 * 60)) + 1;\n\n            // Determine event color\n            let eventColor = \"gray\";\n            if (event.type === \"goal\") {\n              eventColor = event.teamId === gameState.userTeamId ? \"blue\" : \"gray\";\n            } else if (event.type === \"behind\") {\n              eventColor = event.teamId === gameState.userTeamId ? \"blue\" : \"gray\";\n            } else if (event.type === \"quarter\") {\n              eventColor = \"orange\";\n            } else if (event.type === \"final\") {\n              eventColor = \"green\";\n            }\n            return <Flex key={index} gap=\"3\" align=\"start\" p=\"2\" style={{\n              borderBottom: index < matchSimulation.result.events.length - 1 ? '1px solid #eee' : 'none'\n            }}>\r\n                    <Box>\r\n                      <Text size=\"1\" color=\"gray\">Q{quarter}</Text>\r\n                      <Text size=\"2\" weight=\"bold\">{formattedTime}</Text>\r\n                    </Box>\r\n                    \r\n                    <Box style={{\n                flex: 1\n              }}>\r\n                      <Text color={eventColor}>{event.message}</Text>\r\n                    </Box>\r\n                  </Flex>;\n          })}\r\n            </Card>\r\n          </Box>}\r\n      </Card>;\n  };\n\n  // Render ladder\n  const renderLadder = () => <Card variant=\"surface\">\r\n      <Heading size=\"4\" mb=\"3\">Ladder</Heading>\r\n      \r\n      <Table.Root>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.ColumnHeaderCell>Pos</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>Team</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>P</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>W</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>L</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>D</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>%</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>Pts</Table.ColumnHeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        \r\n        <Table.Body>\r\n          {gameState.ladder.sort((a, b) => {\n          // Sort by points first\n          if (b.points !== a.points) return b.points - a.points;\n          // Then by percentage\n          return b.percentage - a.percentage;\n        }).map((position, index) => {\n          const team = getTeamById(position.teamId);\n          if (!team) return null;\n          return <Table.Row key={position.teamId}>\r\n                <Table.Cell>{index + 1}</Table.Cell>\r\n                <Table.Cell>\r\n                  <Flex gap=\"2\" align=\"center\">\r\n                    <Box style={{\n                  width: '16px',\n                  height: '16px',\n                  borderRadius: '50%',\n                  backgroundColor: team.colors.primary\n                }} />\r\n                    <Text weight={position.teamId === gameState.userTeamId ? \"bold\" : \"regular\"}>\r\n                      {team.name}\r\n                    </Text>\r\n                  </Flex>\r\n                </Table.Cell>\r\n                <Table.Cell>{position.played}</Table.Cell>\r\n                <Table.Cell>{position.wins}</Table.Cell>\r\n                <Table.Cell>{position.losses}</Table.Cell>\r\n                <Table.Cell>{position.draws}</Table.Cell>\r\n                <Table.Cell>{position.percentage.toFixed(1)}</Table.Cell>\r\n                <Table.Cell style={{\n              fontWeight: 'bold'\n            }}>{position.points}</Table.Cell>\r\n              </Table.Row>;\n        })}\r\n        </Table.Body>\r\n      </Table.Root>\r\n    </Card>;\n  return <Box>\r\n      <Heading size=\"6\" mb=\"4\">Match Center</Heading>\r\n      \r\n      <Tabs.Root defaultValue=\"fixtures\">\r\n        <Tabs.List>\r\n          <Tabs.Trigger value=\"fixtures\">Fixtures</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"ladder\">Ladder</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"results\">Results</Tabs.Trigger>\r\n        </Tabs.List>\r\n        \r\n        <Box pt=\"4\">\r\n          <Tabs.Content value=\"fixtures\">\r\n            <Grid columns={{\n            initial: \"1\",\n            md: selectedMatch ? \"2\" : \"1\"\n          }} gap=\"4\">\r\n              {renderMatchList()}\r\n              {selectedMatch && renderMatchDetails()}\r\n            </Grid>\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"ladder\">\r\n            {renderLadder()}\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"results\">\r\n            <Card variant=\"surface\">\r\n              <Heading size=\"4\" mb=\"3\">Recent Results</Heading>\r\n              \r\n              <Flex direction=\"column\" gap=\"3\">\r\n                {gameState.seasonFixtures.filter(match => match.completed).sort((a, b) => b.round - a.round).slice(0, 10).map(match => {\n                const homeTeam = getTeamById(match.homeTeamId);\n                const awayTeam = getTeamById(match.awayTeamId);\n                if (!homeTeam || !awayTeam || !match.result) return null;\n                const homeWon = match.result.homeScore.total > match.result.awayScore.total;\n                const draw = match.result.homeScore.total === match.result.awayScore.total;\n                return <Card key={match.id} variant=\"surface\" size=\"1\">\r\n                        <Flex justify=\"between\" align=\"center\">\r\n                          <Box>\r\n                            <Badge size=\"1\">Round {match.round}</Badge>\r\n                            <Text size=\"2\" color=\"gray\">{formatMatchDate(match.date)}</Text>\r\n                          </Box>\r\n                          \r\n                          <Flex gap=\"3\" align=\"center\">\r\n                            <Flex direction=\"column\" align=\"end\">\r\n                              <Text weight={homeWon ? \"bold\" : \"regular\"} color={homeWon ? undefined : \"gray\"}>\r\n                                {homeTeam.name}\r\n                              </Text>\r\n                              <Text weight={!homeWon && !draw ? \"bold\" : \"regular\"} color={!homeWon && !draw ? undefined : \"gray\"}>\r\n                                {awayTeam.name}\r\n                              </Text>\r\n                            </Flex>\r\n                            \r\n                            <Flex direction=\"column\" align=\"end\">\r\n                              <Text weight=\"bold\">\r\n                                {match.result.homeScore.goals}.{match.result.homeScore.behinds} ({match.result.homeScore.total})\r\n                              </Text>\r\n                              <Text weight=\"bold\">\r\n                                {match.result.awayScore.goals}.{match.result.awayScore.behinds} ({match.result.awayScore.total})\r\n                              </Text>\r\n                            </Flex>\r\n                          </Flex>\r\n                        </Flex>\r\n                      </Card>;\n              })}\r\n              </Flex>\r\n            </Card>\r\n          </Tabs.Content>\r\n        </Box>\r\n      </Tabs.Root>\r\n    </Box>;\n}\n_s(MatchCenter, \"s2ih6hLbat1E/2E3bIBsGizq/Ds=\");\n_c = MatchCenter;\nvar _c;\n$RefreshReg$(_c, \"MatchCenter\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\AFLManager\\\\matchEngine.ts\"\n);\nimport.meta.hot.lastModified = \"1747552386615.2893\";\n}\n// REMIX HMR END\n\n// Match Engine for AFL Manager\r\n// Simulates AFL matches based on team and player attributes\r\n\r\nimport { Team } from \"~/data/AFLManager/teams\";\r\nimport { Player, Position } from \"~/data/AFLManager/players\";\r\nimport { Match, MatchEvent, MatchScore, MatchStats } from \"~/data/AFLManager/gameState\";\r\n\r\n// Field dimensions for match simulation\r\nexport const FIELD_WIDTH = 700;\r\nexport const FIELD_HEIGHT = 500;\r\nexport const GOAL_WIDTH = 30;\r\nexport const BEHIND_WIDTH = 20;\r\nexport const CENTER_CIRCLE_RADIUS = 30;\r\nexport const FIFTY_METER_ARC_RADIUS = 120;\r\n\r\n// Player constants\r\nexport const PLAYER_RADIUS = 8;\r\nexport const BALL_RADIUS = 5;\r\nexport const MAX_PLAYER_SPEED = 3.5;\r\nexport const BALL_SPEED = 7;\r\nexport const PLAYER_ACCELERATION = 0.2;\r\nexport const PLAYER_FATIGUE_RATE = 0.005;\r\n\r\n// Game constants for match simulation\r\nconst MATCH_LENGTH_SECONDS = 120 * 60; // 120 minutes in seconds\r\nconst QUARTER_LENGTH_SECONDS = MATCH_LENGTH_SECONDS / 4;\r\nconst AVERAGE_SCORING_EVENTS_PER_MATCH = 30; // Combined goals and behinds\r\nconst AVERAGE_DISPOSALS_PER_MATCH = 400; // Total disposals per team\r\nconst AVERAGE_MARKS_PER_MATCH = 100; // Total marks per team\r\nconst AVERAGE_TACKLES_PER_MATCH = 70; // Total tackles per team\r\nconst AVERAGE_INSIDE_50S_PER_MATCH = 50; // Average inside 50s per team\r\nconst AVERAGE_CLEARANCES_PER_MATCH = 35; // Average clearances per team\r\nconst AVERAGE_CONTESTED_POSSESSIONS = 140; // Average contested possessions per team\r\nconst AVERAGE_UNCONTESTED_POSSESSIONS = 260; // Average uncontested possessions per team\r\n\r\n// Player positions on field (percentages)\r\nexport const TEAM_FORMATIONS = {\r\n  attack: [\r\n    { x: 0.5, y: 0.15 }, // Full Forward\r\n    { x: 0.35, y: 0.2 }, // Forward Pocket\r\n    { x: 0.65, y: 0.2 }, // Forward Pocket\r\n    { x: 0.5, y: 0.3 }, // Centre Half Forward\r\n    { x: 0.3, y: 0.3 }, // Half Forward Flank\r\n    { x: 0.7, y: 0.3 }, // Half Forward Flank\r\n    { x: 0.5, y: 0.5 }, // Centre\r\n    { x: 0.3, y: 0.5 }, // Wing\r\n    { x: 0.7, y: 0.5 }, // Wing\r\n    { x: 0.5, y: 0.7 }, // Centre Half Back\r\n    { x: 0.3, y: 0.7 }, // Half Back Flank\r\n    { x: 0.7, y: 0.7 }, // Half Back Flank\r\n    { x: 0.5, y: 0.85 }, // Full Back\r\n    { x: 0.35, y: 0.8 }, // Back Pocket\r\n    { x: 0.65, y: 0.8 }, // Back Pocket\r\n    { x: 0.5, y: 0.4 }, // Ruck\r\n    { x: 0.4, y: 0.45 }, // Ruck Rover\r\n    { x: 0.6, y: 0.45 }  // Rover\r\n  ],\r\n  defense: [\r\n    { x: 0.5, y: 0.85 }, // Full Forward (playing defense)\r\n    { x: 0.35, y: 0.8 }, // Forward Pocket (playing defense)\r\n    { x: 0.65, y: 0.8 }, // Forward Pocket (playing defense)\r\n    { x: 0.5, y: 0.7 }, // Centre Half Forward (playing defense)\r\n    { x: 0.3, y: 0.7 }, // Half Forward Flank (playing defense)\r\n    { x: 0.7, y: 0.7 }, // Half Forward Flank (playing defense)\r\n    { x: 0.5, y: 0.5 }, // Centre\r\n    { x: 0.3, y: 0.5 }, // Wing\r\n    { x: 0.7, y: 0.5 }, // Wing\r\n    { x: 0.5, y: 0.3 }, // Centre Half Back (playing defense)\r\n    { x: 0.3, y: 0.3 }, // Half Back Flank (playing defense)\r\n    { x: 0.7, y: 0.3 }, // Half Back Flank (playing defense)\r\n    { x: 0.5, y: 0.15 }, // Full Back (playing defense)\r\n    { x: 0.35, y: 0.2 }, // Back Pocket (playing defense)\r\n    { x: 0.65, y: 0.2 }, // Back Pocket (playing defense)\r\n    { x: 0.5, y: 0.6 }, // Ruck\r\n    { x: 0.4, y: 0.55 }, // Ruck Rover\r\n    { x: 0.6, y: 0.55 }  // Rover\r\n  ]\r\n};\r\n\r\n// Interface for team lineup\r\nexport interface TeamLineup {\r\n  teamId: string;\r\n  players: Player[];\r\n  tactics: {\r\n    style: \"defensive\" | \"balanced\" | \"attacking\";\r\n    pressure: number; // 1-10\r\n    possession: number; // 1-10\r\n    riskTaking: number; // 1-10\r\n    \r\n    // Ball Movement Style\r\n    ballMovement: \"fast-play-on\" | \"corridor-focused\" | \"boundary-line\" | \"chip-and-possess\" |\r\n                  \"long-kicking\" | \"handball-chains\" | \"kick-mark\" | \"switch-play\";\r\n    \r\n    // Defensive Structure\r\n    defensiveStructure: \"zone-defense\" | \"man-on-man\" | \"accountable-zone\" | \"flooding\" |\r\n                        \"high-press\" | \"medium-press\" | \"defensive-press\" | \"loose-man-in-defense\";\r\n    \r\n    // Attacking Structure\r\n    attackingStructure: \"forward-press\" | \"structure-hold\" | \"leading-patterns\" | \"forward-motion\" |\r\n                        \"loose-man-in-attack\" | \"forward-target-focus\" | \"small-forward-crumbing\" | \"spread-from-contest\";\r\n    \r\n    // Contest Approach\r\n    contestApproach: \"outnumber-at-contest\" | \"hit-and-run\" | \"physical-intimidation\" | \"technical-precision\" |\r\n                     \"clean-hands-focus\" | \"quick-clearance\" | \"stoppage-structure\" | \"ruck-setup-variations\";\r\n                    \r\n    // Center Bounce Setup\r\n    centerBounceSetup: \"5-7-5\" | \"6-6-6\" | \"5-8-4\" | \"4-8-5\" | \"5-6-6\";\r\n    \r\n    // Quarter-by-Quarter Adjustments\r\n    quarterAdjustments: {\r\n      firstQuarter: \"fast-start\" | \"set-tone-physically\" | \"assess-opposition\" | \"control-possession\";\r\n      thirdQuarter: \"apply-pressure\" | \"run-opposition-off-feet\" | \"defensive-lockdown\" | \"risk-taking\";\r\n      finalQuarter: \"protect-lead\" | \"chase-game\" | \"ice-the-clock\" | \"all-out-attack\";\r\n    };\r\n    \r\n    // Player Rotation System\r\n    rotationSystem: {\r\n      type: \"time-based\" | \"exertion-based\" | \"situational\" | \"position-based\" | \"individual\";\r\n      forwardFrequency: number; // minutes (3-8)\r\n      midfieldFrequency: number; // minutes (4-10)\r\n      defenseFrequency: number; // minutes (8-15)\r\n      ruckStrategy: \"quarters\" | \"halves\" | \"situational\";\r\n    };\r\n  };\r\n  \r\n  // Player roles (keyed by player ID)\r\n  playerRoles: Record<string, {\r\n    role: string;\r\n    instructions: string[];\r\n    matchupPlayerIds?: string[]; // For tagging assignments\r\n  }>;\r\n}\r\n\r\n// Interface for match simulation result\r\nexport interface MatchSimulationResult {\r\n  homeScore: MatchScore;\r\n  awayScore: MatchScore;\r\n  events: MatchEvent[];\r\n  stats: MatchStats;\r\n  homePlayerStats: Record<string, PlayerMatchStats>;\r\n  awayPlayerStats: Record<string, PlayerMatchStats>;\r\n  matchSummary: MatchSummary;\r\n}\r\n\r\n// Interface for player match stats\r\nexport interface PlayerMatchStats {\r\n  playerId: string;\r\n  disposals: number;\r\n  kicks: number;\r\n  handballs: number;\r\n  marks: number;\r\n  contestedMarks: number;\r\n  tackles: number;\r\n  hitouts: number;\r\n  clearances: number;\r\n  inside50s: number;\r\n  rebound50s: number;\r\n  contestedPossessions: number;\r\n  uncontestPossessions: number;\r\n  goals: number;\r\n  behinds: number;\r\n  meterGained: number;\r\n  freeKicksFor: number;\r\n  freeKicksAgainst: number;\r\n  matchRating: number; // 0-10 scale\r\n}\r\n\r\n// Interface for match summary stats\r\nexport interface MatchSummary {\r\n  home: TeamMatchSummary;\r\n  away: TeamMatchSummary;\r\n  quarterByQuarter: {\r\n    home: number[];\r\n    away: number[];\r\n  };\r\n  finalScores: {\r\n    home: MatchScore;\r\n    away: MatchScore;\r\n  };\r\n  bestPlayers: {\r\n    home: string[];\r\n    away: string[];\r\n  };\r\n  topScorers: {\r\n    home: string[];\r\n    away: string[];\r\n  };\r\n}\r\n\r\n// Interface for team match summary\r\nexport interface TeamMatchSummary {\r\n  disposals: number;\r\n  kicks: number;\r\n  handballs: number;\r\n  marks: number;\r\n  contestedMarks: number;\r\n  tackles: number;\r\n  hitouts: number;\r\n  clearances: number;\r\n  inside50s: number;\r\n  goalEfficiency: number; // %\r\n  contestedPossessions: number;\r\n  uncontestPossessions: number;\r\n  freeKicksFor: number;\r\n  freeKicksAgainst: number;\r\n}\r\n\r\n// Calculate team strength based on lineup and tactics\r\nfunction calculateTeamStrength(\r\n  team: Team, \r\n  lineup: TeamLineup, \r\n  opposingTeam: Team\r\n): { attack: number; midfield: number; defense: number; overall: number } {\r\n  // Base strength from team attributes\r\n  let attack = team.attributes.attack;\r\n  let midfield = team.attributes.midfield;\r\n  let defense = team.attributes.defense;\r\n  \r\n  // Adjust based on player lineup\r\n  const forwards = lineup.players.filter(p => p.position === \"Forward\");\r\n  const midfielders = lineup.players.filter(p => p.position === \"Midfielder\");\r\n  const defenders = lineup.players.filter(p => p.position === \"Defender\");\r\n  const rucks = lineup.players.filter(p => p.position === \"Ruck\");\r\n  \r\n  // Calculate average player ratings by position\r\n  const forwardRating = forwards.length > 0 \r\n    ? forwards.reduce((sum, p) => sum + (p.attributes.kicking + p.attributes.marking + (p.attributes.goalkicking || 75)) / 3, 0) / forwards.length \r\n    : 70;\r\n    \r\n  const midfieldRating = midfielders.length > 0 \r\n    ? midfielders.reduce((sum, p) => sum + (p.attributes.speed + p.attributes.stamina + p.attributes.handball) / 3, 0) / midfielders.length \r\n    : 70;\r\n    \r\n  const defenseRating = defenders.length > 0 \r\n    ? defenders.reduce((sum, p) => sum + (p.attributes.marking + p.attributes.tackling + (p.attributes.intercept || 75)) / 3, 0) / defenders.length \r\n    : 70;\r\n    \r\n  const ruckRating = rucks.length > 0 \r\n    ? rucks.reduce((sum, p) => sum + (p.attributes.marking + p.attributes.strength + (p.attributes.tapwork || 75)) / 3, 0) / rucks.length \r\n    : 70;\r\n  \r\n  // Adjust team ratings based on player quality (70% team rating, 30% player rating)\r\n  attack = attack * 0.7 + forwardRating * 0.3;\r\n  midfield = midfield * 0.6 + midfieldRating * 0.3 + ruckRating * 0.1;\r\n  defense = defense * 0.7 + defenseRating * 0.3;\r\n  \r\n  // Adjust based on tactics\r\n  if (lineup.tactics.style === \"attacking\") {\r\n    attack += 5;\r\n    defense -= 3;\r\n  } else if (lineup.tactics.style === \"defensive\") {\r\n    defense += 5;\r\n    attack -= 3;\r\n  }\r\n  \r\n  // Pressure affects midfield and defense\r\n  midfield += (lineup.tactics.pressure - 5) * 0.5;\r\n  defense += (lineup.tactics.pressure - 5) * 0.5;\r\n  \r\n  // Possession affects midfield control\r\n  midfield += (lineup.tactics.possession - 5) * 0.5;\r\n  \r\n  // Risk taking affects attack and defense\r\n  attack += (lineup.tactics.riskTaking - 5) * 0.7;\r\n  defense -= (lineup.tactics.riskTaking - 5) * 0.5;\r\n  \r\n  // Calculate overall rating\r\n  const overall = (attack + midfield + defense) / 3;\r\n  \r\n  return { attack, midfield, defense, overall };\r\n}\r\n\r\n// Generate a random event time within a quarter\r\nfunction generateEventTime(quarter: number): number {\r\n  const quarterStartTime = (quarter - 1) * QUARTER_LENGTH_SECONDS;\r\n  return quarterStartTime + Math.floor(Math.random() * QUARTER_LENGTH_SECONDS);\r\n}\r\n\r\n// Select a random player from a specific position group\r\nfunction selectRandomPlayer(lineup: TeamLineup, position?: Position): Player {\r\n  let eligiblePlayers = lineup.players;\r\n  \r\n  if (position) {\r\n    eligiblePlayers = lineup.players.filter(p => p.position === position);\r\n    // Fallback if no players of that position\r\n    if (eligiblePlayers.length === 0) {\r\n      eligiblePlayers = lineup.players;\r\n    }\r\n  }\r\n  \r\n  const randomIndex = Math.floor(Math.random() * eligiblePlayers.length);\r\n  return eligiblePlayers[randomIndex];\r\n}\r\n\r\n// Helper function to generate detailed goal events with build-up\r\nfunction generateGoalEvent(\r\n  quarter: number,\r\n  timestamp: number,\r\n  scoringTeamId: string,\r\n  scoringTeam: Team,\r\n  scoringLineup: TeamLineup,\r\n  defendingTeam: Team,\r\n  baseMessage: string\r\n): MatchEvent[] {\r\n  const events: MatchEvent[] = [];\r\n  const goalTimestamp = timestamp;\r\n  \r\n  // Generate build-up sequence (happens before the goal)\r\n  const sequenceStart = goalTimestamp - Math.floor(Math.random() * 20) - 10; // 10-30 seconds before goal\r\n  \r\n  // 1. Initial possession\r\n  const initiatingPlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n  events.push({\r\n    type: \"possession\",\r\n    teamId: scoringTeamId,\r\n    playerId: initiatingPlayer.id,\r\n    quarter,\r\n    message: `${initiatingPlayer.name} gathers in the center for ${scoringTeam.name}`,\r\n    timestamp: sequenceStart\r\n  });\r\n  \r\n  // 2. Middle sequence - varies based on ball movement style\r\n  const ballMovementStyle = scoringLineup.tactics.ballMovement;\r\n  let middlePlayer;\r\n  let middleMessage = \"\";\r\n  const middleTimestamp = sequenceStart + 5 + Math.floor(Math.random() * 5);\r\n  \r\n  switch(ballMovementStyle) {\r\n    case \"fast-play-on\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} plays on quickly and breaks through the middle`;\r\n      break;\r\n    case \"corridor-focused\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} drives forward through the corridor`;\r\n      break;\r\n    case \"boundary-line\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} carries along the boundary line`;\r\n      break;\r\n    case \"chip-and-possess\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} chips to a teammate to maintain possession`;\r\n      break;\r\n    case \"long-kicking\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} launches a long kick inside 50`;\r\n      break;\r\n    case \"handball-chains\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} links in a chain of handballs`;\r\n      break;\r\n    case \"kick-mark\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} takes a strong mark in the center`;\r\n      break;\r\n    case \"switch-play\":\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} switches play to the opposite flank`;\r\n      break;\r\n    default:\r\n      middlePlayer = selectRandomPlayer(scoringLineup, \"Midfielder\");\r\n      middleMessage = `${middlePlayer.name} moves the ball forward`;\r\n  }\r\n  \r\n  events.push({\r\n    type: \"buildup\",\r\n    teamId: scoringTeamId,\r\n    playerId: middlePlayer.id,\r\n    quarter,\r\n    message: middleMessage,\r\n    timestamp: middleTimestamp\r\n  });\r\n  \r\n  // 3. Inside 50 entry\r\n  const inside50Player = selectRandomPlayer(scoringLineup, \"Forward\");\r\n  const inside50Timestamp = middleTimestamp + 5 + Math.floor(Math.random() * 5);\r\n  \r\n  events.push({\r\n    type: \"inside50\",\r\n    teamId: scoringTeamId,\r\n    playerId: inside50Player.id,\r\n    quarter,\r\n    message: `${inside50Player.name} receives inside 50 and looks for options`,\r\n    timestamp: inside50Timestamp\r\n  });\r\n  \r\n  // 4. The goal itself\r\n  events.push({\r\n    type: \"goal\",\r\n    teamId: scoringTeamId,\r\n    playerId: inside50Player.id,\r\n    quarter,\r\n    message: baseMessage,\r\n    timestamp: goalTimestamp\r\n  });\r\n  \r\n  // 5. Occasional post-goal celebration\r\n  if (Math.random() > 0.7) {\r\n    events.push({\r\n      type: \"celebration\",\r\n      teamId: scoringTeamId,\r\n      playerId: inside50Player.id,\r\n      quarter,\r\n      message: `${inside50Player.name} celebrates with teammates after a brilliant finish`,\r\n      timestamp: goalTimestamp + 2\r\n    });\r\n  }\r\n  \r\n  return events;\r\n}\r\n\r\n// Generate match events based on team strengths and tactics\r\nfunction generateMatchEvents(\r\n  homeTeam: Team,\r\n  awayTeam: Team,\r\n  homeLineup: TeamLineup,\r\n  awayLineup: TeamLineup,\r\n  homeStrength: { attack: number; midfield: number; defense: number; overall: number },\r\n  awayStrength: { attack: number; midfield: number; defense: number; overall: number }\r\n): { events: MatchEvent[]; homeScore: MatchScore; awayScore: MatchScore; quarterScores: { home: number[]; away: number[] } } {\r\n  const events: MatchEvent[] = [];\r\n  const quarterScores = { home: [0, 0, 0, 0], away: [0, 0, 0, 0] };\r\n  \r\n  // Add pre-match events\r\n  events.push({\r\n    type: \"prematch\",\r\n    message: `Teams are warming up at ${homeTeam.venue}. Conditions are perfect for football.`,\r\n    timestamp: -300 // 5 minutes before start\r\n  });\r\n  \r\n  events.push({\r\n    type: \"prematch\",\r\n    message: `Captains meet for the coin toss as both teams prepare for the first bounce.`,\r\n    timestamp: -60 // 1 minute before start\r\n  });\r\n  \r\n  // Add quarter start events\r\n  for (let quarter = 1; quarter <= 4; quarter++) {\r\n    const quarterStartTime = (quarter - 1) * QUARTER_LENGTH_SECONDS;\r\n    \r\n    events.push({\r\n      type: \"quarter\",\r\n      quarter,\r\n      message: `Start of Q${quarter}`,\r\n      timestamp: quarterStartTime\r\n    });\r\n    \r\n    // Add tactical notes at start of quarters based on team tactics\r\n    if (quarter === 1) {\r\n      const homeFirstQ = homeLineup.tactics.quarterAdjustments.firstQuarter;\r\n      events.push({\r\n        type: \"tactical\",\r\n        teamId: homeTeam.id,\r\n        quarter,\r\n        message: `${homeTeam.name} looking to ${homeFirstQ === \"fast-start\" ? \"get off to a fast start\" :\r\n                   homeFirstQ === \"set-tone-physically\" ? \"set the physical tone early\" :\r\n                   homeFirstQ === \"assess-opposition\" ? \"assess the opposition structure\" :\r\n                   \"control possession in the early stages\"}`,\r\n        timestamp: quarterStartTime + 10\r\n      });\r\n      \r\n      const awayFirstQ = awayLineup.tactics.quarterAdjustments.firstQuarter;\r\n      events.push({\r\n        type: \"tactical\",\r\n        teamId: awayTeam.id,\r\n        quarter,\r\n        message: `${awayTeam.name} focusing on ${awayFirstQ === \"fast-start\" ? \"starting quickly\" :\r\n                   awayFirstQ === \"set-tone-physically\" ? \"physical intimidation\" :\r\n                   awayFirstQ === \"assess-opposition\" ? \"reading the opposition\" :\r\n                   \"maintaining possession\"}`,\r\n        timestamp: quarterStartTime + 20\r\n      });\r\n    } else if (quarter === 3) {\r\n      // Third quarter tactical notes\r\n      const homeThirdQ = homeLineup.tactics.quarterAdjustments.thirdQuarter;\r\n      events.push({\r\n        type: \"tactical\",\r\n        teamId: homeTeam.id,\r\n        quarter,\r\n        message: `${homeTeam.name} ${homeThirdQ === \"apply-pressure\" ? \"increasing their pressure in the premiership quarter\" :\r\n                   homeThirdQ === \"run-opposition-off-feet\" ? \"looking to run the opposition off their feet\" :\r\n                   homeThirdQ === \"defensive-lockdown\" ? \"focusing on defensive lockdown\" :\r\n                   \"taking more risks to create scoring opportunities\"}`,\r\n        timestamp: quarterStartTime + 15\r\n      });\r\n    } else if (quarter === 4) {\r\n      // Fourth quarter tactical notes\r\n      const homeFinalQ = homeLineup.tactics.quarterAdjustments.finalQuarter;\r\n      const awayFinalQ = awayLineup.tactics.quarterAdjustments.finalQuarter;\r\n      \r\n      // Only show relevant tactics based on score\r\n      const scoreDifference =\r\n        (quarterScores.home[0] + quarterScores.home[1] + quarterScores.home[2]) -\r\n        (quarterScores.away[0] + quarterScores.away[1] + quarterScores.away[2]);\r\n      \r\n      if (scoreDifference > 12) { // Home team leading by more than 2 goals\r\n        if (homeFinalQ === \"protect-lead\" || homeFinalQ === \"ice-the-clock\") {\r\n          events.push({\r\n            type: \"tactical\",\r\n            teamId: homeTeam.id,\r\n            quarter,\r\n            message: `${homeTeam.name} looking to ${homeFinalQ === \"protect-lead\" ? \"protect their lead\" : \"use the clock to their advantage\"}`,\r\n            timestamp: quarterStartTime + 10\r\n          });\r\n        }\r\n        \r\n        if (awayFinalQ === \"chase-game\" || awayFinalQ === \"all-out-attack\") {\r\n          events.push({\r\n            type: \"tactical\",\r\n            teamId: awayTeam.id,\r\n            quarter,\r\n            message: `${awayTeam.name} ${awayFinalQ === \"chase-game\" ? \"throwing everything at chasing the game\" : \"going with all-out attack to close the gap\"}`,\r\n            timestamp: quarterStartTime + 20\r\n          });\r\n        }\r\n      } else if (scoreDifference < -12) { // Away team leading by more than 2 goals\r\n        if (homeFinalQ === \"chase-game\" || homeFinalQ === \"all-out-attack\") {\r\n          events.push({\r\n            type: \"tactical\",\r\n            teamId: homeTeam.id,\r\n            quarter,\r\n            message: `${homeTeam.name} ${homeFinalQ === \"chase-game\" ? \"desperately trying to chase down the lead\" : \"committing to all-out attack\"}`,\r\n            timestamp: quarterStartTime + 10\r\n          });\r\n        }\r\n        \r\n        if (awayFinalQ === \"protect-lead\" || awayFinalQ === \"ice-the-clock\") {\r\n          events.push({\r\n            type: \"tactical\",\r\n            teamId: awayTeam.id,\r\n            quarter,\r\n            message: `${awayTeam.name} focusing on ${awayFinalQ === \"protect-lead\" ? \"protecting their advantage\" : \"icing the game by controlling the clock\"}`,\r\n            timestamp: quarterStartTime + 20\r\n          });\r\n        }\r\n      } else { // Close game\r\n        events.push({\r\n          type: \"tactical\",\r\n          quarter,\r\n          message: `Tension building in a tight final quarter as both teams aim for victory`,\r\n          timestamp: quarterStartTime + 15\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add quarter end events\r\n    if (quarter < 4) {\r\n      const quarterEndTime = quarter * QUARTER_LENGTH_SECONDS - 1;\r\n      events.push({\r\n        type: \"quarter_end\",\r\n        quarter,\r\n        message: `End of Q${quarter}`,\r\n        timestamp: quarterEndTime\r\n      });\r\n      \r\n      // Add coach messages at quarter breaks\r\n      const homeCoachMessage = `${homeTeam.coach || \"Coach\"} gathers the ${homeTeam.name} players for quarter time instructions`;\r\n      const awayCoachMessage = `${awayTeam.coach || \"Coach\"} delivers feedback to the ${awayTeam.name} players`;\r\n      \r\n      events.push({\r\n        type: \"coach\",\r\n        teamId: homeTeam.id,\r\n        quarter,\r\n        message: homeCoachMessage,\r\n        timestamp: quarterEndTime + 10\r\n      });\r\n      \r\n      events.push({\r\n        type: \"coach\",\r\n        teamId: awayTeam.id,\r\n        quarter,\r\n        message: awayCoachMessage,\r\n        timestamp: quarterEndTime + 20\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Calculate scoring probabilities based on team strengths and tactics\r\n  let homeScoringChance = (homeStrength.attack * 0.7 + homeStrength.midfield * 0.3) / 100;\r\n  let awayScoringChance = (awayStrength.attack * 0.7 + awayStrength.midfield * 0.3) / 100;\r\n  \r\n  // Adjust based on tactics\r\n  if (homeLineup.tactics.style === \"attacking\") {\r\n    homeScoringChance *= 1.2;\r\n  } else if (homeLineup.tactics.style === \"defensive\") {\r\n    homeScoringChance *= 0.8;\r\n    awayScoringChance *= 0.9; // Opponent finds it harder to score\r\n  }\r\n  \r\n  if (awayLineup.tactics.style === \"attacking\") {\r\n    awayScoringChance *= 1.2;\r\n  } else if (awayLineup.tactics.style === \"defensive\") {\r\n    awayScoringChance *= 0.8;\r\n    homeScoringChance *= 0.9; // Opponent finds it harder to score\r\n  }\r\n  \r\n  // Adjust based on ball movement style\r\n  if (homeLineup.tactics.ballMovement === \"fast-play-on\" || homeLineup.tactics.ballMovement === \"long-kicking\") {\r\n    homeScoringChance *= 1.1; // More direct styles create more scoring chances\r\n  }\r\n  \r\n  if (awayLineup.tactics.ballMovement === \"fast-play-on\" || awayLineup.tactics.ballMovement === \"long-kicking\") {\r\n    awayScoringChance *= 1.1;\r\n  }\r\n  \r\n  // Normalize to ensure reasonable number of scoring events\r\n  const totalScoringChance = homeScoringChance + awayScoringChance;\r\n  const normalizedHomeScoringChance = homeScoringChance / totalScoringChance;\r\n  \r\n  // Determine number of scoring events per quarter (more realistic distribution)\r\n  const totalScoringEvents = Math.floor(AVERAGE_SCORING_EVENTS_PER_MATCH *\r\n    (0.8 + Math.random() * 0.4)); // 80-120% of average\r\n  \r\n  // Distribute events across quarters with increasing intensity\r\n  const quarterDistribution = [0.2, 0.25, 0.25, 0.3]; // Last quarter has more scoring\r\n  \r\n  // Generate non-scoring events\r\n  const totalNonScoringEvents = 120; // Approximately one every 60 seconds on average\r\n  const nonScoringEventTypes = [\r\n    \"mark\", \"tackle\", \"clearance\", \"intercept\", \"inside50\", \"rebound50\", \"injury\", \"substitution\"\r\n  ];\r\n  \r\n  for (let quarter = 1; quarter <= 4; quarter++) {\r\n    const quarterStartTime = (quarter - 1) * QUARTER_LENGTH_SECONDS;\r\n    const quarterEndTime = quarter * QUARTER_LENGTH_SECONDS;\r\n    \r\n    // Add non-scoring events\r\n    const quarterNonScoringEvents = Math.floor(totalNonScoringEvents * quarterDistribution[quarter - 1]);\r\n    for (let i = 0; i < quarterNonScoringEvents; i++) {\r\n      const timestamp = quarterStartTime + Math.floor(Math.random() * QUARTER_LENGTH_SECONDS);\r\n      const isHomeTeamEvent = Math.random() < normalizedHomeScoringChance;\r\n      const team = isHomeTeamEvent ? homeTeam : awayTeam;\r\n      const lineup = isHomeTeamEvent ? homeLineup : awayLineup;\r\n      \r\n      const eventType = nonScoringEventTypes[Math.floor(Math.random() * nonScoringEventTypes.length)];\r\n      \r\n      // Select appropriate player for event type\r\n      let player;\r\n      let message = \"\";\r\n      \r\n      switch (eventType) {\r\n        case \"mark\":\r\n          player = selectRandomPlayer(lineup, Math.random() < 0.6 ? \"Forward\" : undefined);\r\n          message = `${player.name} takes a strong mark for ${team.name}`;\r\n          break;\r\n        case \"tackle\":\r\n          player = selectRandomPlayer(lineup, Math.random() < 0.7 ? \"Midfielder\" : undefined);\r\n          message = `${player.name} lays a fierce tackle in the midfield`;\r\n          break;\r\n        case \"clearance\":\r\n          player = selectRandomPlayer(lineup, \"Midfielder\");\r\n          message = `${player.name} wins the clearance for ${team.name}`;\r\n          break;\r\n        case \"intercept\":\r\n          player = selectRandomPlayer(lineup, \"Defender\");\r\n          message = `${player.name} reads the play perfectly to intercept`;\r\n          break;\r\n        case \"inside50\":\r\n          player = selectRandomPlayer(lineup, Math.random() < 0.6 ? \"Midfielder\" : undefined);\r\n          message = `${player.name} drives ${team.name} inside 50`;\r\n          break;\r\n        case \"rebound50\":\r\n          player = selectRandomPlayer(lineup, \"Defender\");\r\n          message = `${player.name} rebounds out of defensive 50`;\r\n          break;\r\n        case \"injury\":\r\n          // Rare event\r\n          if (Math.random() < 0.1) {\r\n            player = selectRandomPlayer(lineup);\r\n            message = `${player.name} appears to have picked up a knock`;\r\n            break;\r\n          }\r\n          continue;\r\n        case \"substitution\":\r\n          // Occasional substitution\r\n          if (Math.random() < 0.3) {\r\n            player = selectRandomPlayer(lineup);\r\n            message = `${player.name} rotates to the bench for a rest`;\r\n            break;\r\n          }\r\n          continue;\r\n        default:\r\n          player = selectRandomPlayer(lineup);\r\n          message = `${player.name} wins the ball for ${team.name}`;\r\n      }\r\n      \r\n      events.push({\r\n        type: eventType,\r\n        teamId: team.id,\r\n        playerId: player.id,\r\n        quarter,\r\n        message,\r\n        timestamp\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Generate all four quarters of scoring events\r\n  let homeGoals = 0;\r\n  let homeBehinds = 0;\r\n  let awayGoals = 0;\r\n  let awayBehinds = 0;\r\n  \r\n  for (let quarter = 1; quarter <= 4; quarter++) {\r\n    // Calculate events for this quarter\r\n    const quarterEvents = Math.round(totalScoringEvents * quarterDistribution[quarter-1]);\r\n    const homeEvents = Math.round(quarterEvents * normalizedHomeScoringChance);\r\n    const awayEvents = quarterEvents - homeEvents;\r\n    \r\n    // Home team scoring in this quarter\r\n    const homeGoalChance = 0.6 + (homeStrength.attack - 75) * 0.003; // Base 60% + adjustment\r\n    \r\n    for (let i = 0; i < homeEvents; i++) {\r\n      const timestamp = generateEventTime(quarter);\r\n      const isGoal = Math.random() < homeGoalChance;\r\n      const player = selectRandomPlayer(homeLineup, isGoal ? \"Forward\" : undefined);\r\n      \r\n      if (isGoal) {\r\n        homeGoals++;\r\n        quarterScores.home[quarter-1] += 6;\r\n        \r\n        // Generate detailed goal sequence with build-up\r\n        const goalMessage = `GOAL! ${player.name} kicks a goal for ${homeTeam.name}`;\r\n        const goalSequence = generateGoalEvent(\r\n          quarter,\r\n          timestamp,\r\n          homeTeam.id,\r\n          homeTeam,\r\n          homeLineup,\r\n          awayTeam,\r\n          goalMessage\r\n        );\r\n        \r\n        // Add all goal sequence events\r\n        events.push(...goalSequence);\r\n      } else {\r\n        homeBehinds++;\r\n        quarterScores.home[quarter-1] += 1;\r\n        \r\n        // Different types of behinds\r\n        let behindMessage = \"\";\r\n        const behindType = Math.random();\r\n        \r\n        if (behindType < 0.4) {\r\n          behindMessage = `Behind. ${player.name}'s shot is slightly offline for ${homeTeam.name}`;\r\n        } else if (behindType < 0.7) {\r\n          behindMessage = `Behind. ${player.name}'s kick is rushed through by the ${awayTeam.name} defense`;\r\n        } else if (behindType < 0.9) {\r\n          behindMessage = `Behind. ${player.name} hits the post for ${homeTeam.name}`;\r\n        } else {\r\n          behindMessage = `Behind. ${player.name}'s shot is touched on the line`;\r\n        }\r\n        \r\n        events.push({\r\n          type: \"behind\",\r\n          teamId: homeTeam.id,\r\n          playerId: player.id,\r\n          quarter,\r\n          message: behindMessage,\r\n          timestamp\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Away team scoring in this quarter\r\n    const awayGoalChance = 0.6 + (awayStrength.attack - 75) * 0.003;\r\n    \r\n    for (let i = 0; i < awayEvents; i++) {\r\n      const timestamp = generateEventTime(quarter);\r\n      const isGoal = Math.random() < awayGoalChance;\r\n      const player = selectRandomPlayer(awayLineup, isGoal ? \"Forward\" : undefined);\r\n      \r\n      if (isGoal) {\r\n        awayGoals++;\r\n        quarterScores.away[quarter-1] += 6;\r\n        \r\n        // Generate detailed goal sequence with build-up\r\n        const goalMessage = `GOAL! ${player.name} kicks a goal for ${awayTeam.name}`;\r\n        const goalSequence = generateGoalEvent(\r\n          quarter,\r\n          timestamp,\r\n          awayTeam.id,\r\n          awayTeam,\r\n          awayLineup,\r\n          homeTeam,\r\n          goalMessage\r\n        );\r\n        \r\n        // Add all goal sequence events\r\n        events.push(...goalSequence);\r\n      } else {\r\n        awayBehinds++;\r\n        quarterScores.away[quarter-1] += 1;\r\n        \r\n        // Different types of behinds\r\n        let behindMessage = \"\";\r\n        const behindType = Math.random();\r\n        \r\n        if (behindType < 0.4) {\r\n          behindMessage = `Behind. ${player.name}'s shot is slightly offline for ${awayTeam.name}`;\r\n        } else if (behindType < 0.7) {\r\n          behindMessage = `Behind. ${player.name}'s kick is rushed through by the ${homeTeam.name} defense`;\r\n        } else if (behindType < 0.9) {\r\n          behindMessage = `Behind. ${player.name} hits the post for ${awayTeam.name}`;\r\n        } else {\r\n          behindMessage = `Behind. ${player.name}'s shot is touched on the line`;\r\n        }\r\n        \r\n        events.push({\r\n          type: \"behind\",\r\n          teamId: awayTeam.id,\r\n          playerId: player.id,\r\n          quarter,\r\n          message: behindMessage,\r\n          timestamp\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add momentum shift events\r\n    if (quarterScores.home[quarter-1] > 18 && quarterScores.home[quarter-1] > 2 * quarterScores.away[quarter-1]) {\r\n      // Home team has a big lead in this quarter\r\n      events.push({\r\n        type: \"momentum\",\r\n        teamId: homeTeam.id,\r\n        quarter,\r\n        message: `${homeTeam.name} with all the momentum in Q${quarter}`,\r\n        timestamp: (quarter - 1) * QUARTER_LENGTH_SECONDS + QUARTER_LENGTH_SECONDS * 0.7 // Later in quarter\r\n      });\r\n    } else if (quarterScores.away[quarter-1] > 18 && quarterScores.away[quarter-1] > 2 * quarterScores.home[quarter-1]) {\r\n      // Away team has a big lead in this quarter\r\n      events.push({\r\n        type: \"momentum\",\r\n        teamId: awayTeam.id,\r\n        quarter,\r\n        message: `${awayTeam.name} dominating the flow of play in Q${quarter}`,\r\n        timestamp: (quarter - 1) * QUARTER_LENGTH_SECONDS + QUARTER_LENGTH_SECONDS * 0.7\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Add final quarter drama events if the game is close\r\n  const finalScore = {\r\n    home: quarterScores.home.reduce((sum, score) => sum + score, 0),\r\n    away: quarterScores.away.reduce((sum, score) => sum + score, 0)\r\n  };\r\n  \r\n  const scoreDifference = Math.abs(finalScore.home - finalScore.away);\r\n  \r\n  if (scoreDifference <= 12) { // Within 2 goals\r\n    const finalMinutes = MATCH_LENGTH_SECONDS - 180; // Last 3 minutes\r\n    \r\n    // Add tension narrative\r\n    events.push({\r\n      type: \"commentary\",\r\n      message: \"Tension building as we enter the final minutes with scores incredibly close\",\r\n      timestamp: finalMinutes\r\n    });\r\n    \r\n    // Add final dramatic moment\r\n    events.push({\r\n      type: \"commentary\",\r\n      message: \"The crowd is on its feet as we approach the final siren in this nail-biter!\",\r\n      timestamp: MATCH_LENGTH_SECONDS - 30\r\n    });\r\n  }\r\n  \r\n  // Add final siren event\r\n  events.push({\r\n    type: \"final\",\r\n    message: \"FINAL SIREN! The match is over.\",\r\n    timestamp: MATCH_LENGTH_SECONDS\r\n  });\r\n  \r\n  // Add post-match reaction based on result\r\n  if (finalScore.home > finalScore.away) {\r\n    events.push({\r\n      type: \"postmatch\",\r\n      teamId: homeTeam.id,\r\n      message: `${homeTeam.name} players celebrate a well-earned victory`,\r\n      timestamp: MATCH_LENGTH_SECONDS + 10\r\n    });\r\n    \r\n    events.push({\r\n      type: \"postmatch\",\r\n      teamId: awayTeam.id,\r\n      message: `Disappointment for ${awayTeam.name} as they reflect on where the match was lost`,\r\n      timestamp: MATCH_LENGTH_SECONDS + 20\r\n    });\r\n  } else if (finalScore.away > finalScore.home) {\r\n    events.push({\r\n      type: \"postmatch\",\r\n      teamId: awayTeam.id,\r\n      message: `${awayTeam.name} players celebrate a terrific away win`,\r\n      timestamp: MATCH_LENGTH_SECONDS + 10\r\n    });\r\n    \r\n    events.push({\r\n      type: \"postmatch\",\r\n      teamId: homeTeam.id,\r\n      message: `${homeTeam.name} will be disappointed to lose on home soil`,\r\n      timestamp: MATCH_LENGTH_SECONDS + 20\r\n    });\r\n  } else {\r\n    // Draw\r\n    events.push({\r\n      type: \"postmatch\",\r\n      message: `Players from both teams share handshakes after a drawn match`,\r\n      timestamp: MATCH_LENGTH_SECONDS + 15\r\n    });\r\n  }\r\n  \r\n  // Sort events by timestamp\r\n  events.sort((a, b) => a.timestamp - b.timestamp);\r\n  \r\n  // Calculate final scores\r\n  const homeScore: MatchScore = {\r\n    goals: homeGoals,\r\n    behinds: homeBehinds,\r\n    total: homeGoals * 6 + homeBehinds\r\n  };\r\n  \r\n  const awayScore: MatchScore = {\r\n    goals: awayGoals,\r\n    behinds: awayBehinds,\r\n    total: awayGoals * 6 + awayBehinds\r\n  };\r\n  \r\n  return { events, homeScore, awayScore, quarterScores };\r\n}\r\n\r\n// Distribute kicks and handballs among players\r\nfunction distributeDisposals(\r\n  lineup: TeamLineup,\r\n  playerStats: Record<string, PlayerMatchStats>,\r\n  kicks: number,\r\n  handballs: number\r\n) {\r\n  // Calculate weights for each player based on position and attributes\r\n  const kickWeights: Record<string, number> = {};\r\n  const handballWeights: Record<string, number> = {};\r\n  let totalKickWeight = 0;\r\n  let totalHandballWeight = 0;\r\n  \r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    // Calculate kick weight\r\n    let kickWeight = 1;\r\n    if (player.position === \"Midfielder\") kickWeight = 1.8;\r\n    else if (player.position === \"Forward\") kickWeight = 1.2;\r\n    else if (player.position === \"Defender\") kickWeight = 1.5;\r\n    else if (player.position === \"Ruck\") kickWeight = 0.7;\r\n    \r\n    // Adjust by kicking attribute\r\n    kickWeight *= (player.attributes.kicking / 75);\r\n    \r\n    // Calculate handball weight\r\n    let handballWeight = 1;\r\n    if (player.position === \"Midfielder\") handballWeight = 2;\r\n    else if (player.position === \"Forward\") handballWeight = 0.9;\r\n    else if (player.position === \"Defender\") handballWeight = 1.1;\r\n    else if (player.position === \"Ruck\") handballWeight = 0.8;\r\n    \r\n    // Adjust by handball attribute\r\n    handballWeight *= (player.attributes.handball / 75);\r\n    \r\n    kickWeights[player.id] = kickWeight;\r\n    handballWeights[player.id] = handballWeight;\r\n    \r\n    totalKickWeight += kickWeight;\r\n    totalHandballWeight += handballWeight;\r\n  });\r\n  \r\n  // Distribute kicks based on weights\r\n  let remainingKicks = kicks;\r\n  \r\n  lineup.players.forEach((player, index) => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === lineup.players.length - 1) {\r\n      // Last player gets all remaining kicks\r\n      playerStat.kicks += remainingKicks;\r\n    } else {\r\n      const playerKicks = Math.round((kickWeights[player.id] / totalKickWeight) * kicks);\r\n      playerStat.kicks += playerKicks;\r\n      remainingKicks -= playerKicks;\r\n    }\r\n  });\r\n  \r\n  // Distribute handballs based on weights\r\n  let remainingHandballs = handballs;\r\n  \r\n  lineup.players.forEach((player, index) => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === lineup.players.length - 1) {\r\n      // Last player gets all remaining handballs\r\n      playerStat.handballs += remainingHandballs;\r\n    } else {\r\n      const playerHandballs = Math.round((handballWeights[player.id] / totalHandballWeight) * handballs);\r\n      playerStat.handballs += playerHandballs;\r\n      remainingHandballs -= playerHandballs;\r\n    }\r\n    \r\n    // Update total disposals\r\n    playerStat.disposals = playerStat.kicks + playerStat.handballs;\r\n  });\r\n}\r\n\r\n// Distribute contested vs uncontested possessions\r\nfunction distributeContestedStats(\r\n  lineup: TeamLineup,\r\n  playerStats: Record<string, PlayerMatchStats>,\r\n  teamStrength: { attack: number; midfield: number; defense: number; overall: number }\r\n) {\r\n  // Calculate total contested possessions based on team strength\r\n  const totalContested = Math.round(AVERAGE_CONTESTED_POSSESSIONS * \r\n    (0.85 + (teamStrength.overall - 70) * 0.005));\r\n  \r\n  const totalUncontested = Math.round(AVERAGE_UNCONTESTED_POSSESSIONS * \r\n    (0.85 + (teamStrength.overall - 70) * 0.005));\r\n  \r\n  // Calculate weights for contested possessions\r\n  const contestedWeights: Record<string, number> = {};\r\n  let totalContestedWeight = 0;\r\n  \r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    // Calculate contested possession weight\r\n    let contestedWeight = 1;\r\n    if (player.position === \"Midfielder\") contestedWeight = 2;\r\n    else if (player.position === \"Forward\") contestedWeight = 1.1;\r\n    else if (player.position === \"Defender\") contestedWeight = 1.1;\r\n    else if (player.position === \"Ruck\") contestedWeight = 1.5;\r\n    \r\n    // Adjust by player attributes\r\n    contestedWeight *= (player.attributes.strength / 75);\r\n    \r\n    contestedWeights[player.id] = contestedWeight;\r\n    totalContestedWeight += contestedWeight;\r\n  });\r\n  \r\n  // Distribute contested possessions\r\n  let remainingContested = totalContested;\r\n  \r\n  lineup.players.forEach((player, index) => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === lineup.players.length - 1) {\r\n      // Last player gets all remaining contested possessions\r\n      playerStat.contestedPossessions = remainingContested;\r\n    } else {\r\n      const playerContested = Math.round((contestedWeights[player.id] / totalContestedWeight) * totalContested);\r\n      playerStat.contestedPossessions = playerContested;\r\n      remainingContested -= playerContested;\r\n    }\r\n  });\r\n  \r\n  // Distribute uncontested possessions based on total disposals\r\n  let totalDisposals = 0;\r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (playerStat) totalDisposals += playerStat.disposals;\r\n  });\r\n  \r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    // Distribute uncontested possessions proportionally to disposals\r\n    const disposalRatio = playerStat.disposals / totalDisposals;\r\n    playerStat.uncontestPossessions = Math.round(totalUncontested * disposalRatio);\r\n    \r\n    // Adjust if contested + uncontested don't match total disposals\r\n    const totalPossessions = playerStat.contestedPossessions + playerStat.uncontestPossessions;\r\n    if (totalPossessions !== playerStat.disposals) {\r\n      // Adjust uncontested to make the total match\r\n      playerStat.uncontestPossessions = Math.max(0, playerStat.disposals - playerStat.contestedPossessions);\r\n    }\r\n  });\r\n}\r\n\r\n// Distribute marks among players\r\nfunction distributeMarks(\r\n  lineup: TeamLineup,\r\n  playerStats: Record<string, PlayerMatchStats>,\r\n  totalMarks: number\r\n) {\r\n  // Calculate weights for marks\r\n  const markWeights: Record<string, number> = {};\r\n  let totalMarkWeight = 0;\r\n  \r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    // Calculate mark weight\r\n    let markWeight = 1;\r\n    if (player.position === \"Forward\") markWeight = 1.6;\r\n    else if (player.position === \"Defender\") markWeight = 1.4;\r\n    else if (player.position === \"Ruck\") markWeight = 1.5;\r\n    else if (player.position === \"Midfielder\") markWeight = 0.8;\r\n    \r\n    // Adjust by marking attribute\r\n    markWeight *= (player.attributes.marking / 75);\r\n    \r\n    markWeights[player.id] = markWeight;\r\n    totalMarkWeight += markWeight;\r\n  });\r\n  \r\n  // Distribute marks\r\n  let remainingMarks = totalMarks;\r\n  let contestedMarksTotal = Math.round(totalMarks * 0.3); // About 30% of marks are contested\r\n  let remainingContested = contestedMarksTotal;\r\n  \r\n  lineup.players.forEach((player, index) => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === lineup.players.length - 1) {\r\n      // Last player gets all remaining marks\r\n      playerStat.marks = remainingMarks;\r\n      playerStat.contestedMarks = remainingContested;\r\n    } else {\r\n      const playerMarks = Math.round((markWeights[player.id] / totalMarkWeight) * totalMarks);\r\n      playerStat.marks = playerMarks;\r\n      remainingMarks -= playerMarks;\r\n      \r\n      // Calculate contested marks\r\n      // Key position players get more contested marks\r\n      let contestedRatio = 0.3; // Default\r\n      if (player.position === \"Forward\" || player.position === \"Defender\" || player.position === \"Ruck\") {\r\n        contestedRatio = 0.4;\r\n      }\r\n      \r\n      const playerContested = Math.round(playerMarks * contestedRatio);\r\n      playerStat.contestedMarks = playerContested;\r\n      remainingContested -= playerContested;\r\n    }\r\n  });\r\n}\r\n\r\n// Distribute special stats like tackles, inside50s, clearances\r\nfunction distributeSpecialStats(\r\n  lineup: TeamLineup,\r\n  playerStats: Record<string, PlayerMatchStats>,\r\n  statType: \"tackles\" | \"inside50s\" | \"clearances\" | \"rebound50s\",\r\n  totalStats: number\r\n) {\r\n  // Calculate weights based on stat type and position\r\n  const weights: Record<string, number> = {};\r\n  let totalWeight = 0;\r\n  \r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    let weight = 1;\r\n    \r\n    if (statType === \"tackles\") {\r\n      // Adjust tackle weights by position\r\n      if (player.position === \"Midfielder\") weight = 2;\r\n      else if (player.position === \"Forward\") weight = 1.2;\r\n      else if (player.position === \"Defender\") weight = 1.1;\r\n      else if (player.position === \"Ruck\") weight = 0.7;\r\n      \r\n      // Adjust by tackling attribute\r\n      weight *= (player.attributes.tackling / 75);\r\n    } \r\n    else if (statType === \"inside50s\") {\r\n      // Adjust inside50s weights by position\r\n      if (player.position === \"Midfielder\") weight = 2;\r\n      else if (player.position === \"Forward\") weight = 1.5;\r\n      else if (player.position === \"Defender\") weight = 0.5;\r\n      else if (player.position === \"Ruck\") weight = 0.8;\r\n      \r\n      // Adjust by kicking attribute\r\n      weight *= (player.attributes.kicking / 75);\r\n    }\r\n    else if (statType === \"clearances\") {\r\n      // Adjust clearances weights by position\r\n      if (player.position === \"Midfielder\") weight = 2.5;\r\n      else if (player.position === \"Ruck\") weight = 1.8;\r\n      else if (player.position === \"Forward\") weight = 0.4;\r\n      else if (player.position === \"Defender\") weight = 0.3;\r\n    }\r\n    else if (statType === \"rebound50s\") {\r\n      // Adjust rebound50s weights by position\r\n      if (player.position === \"Defender\") weight = 2.5;\r\n      else if (player.position === \"Midfielder\") weight = 1.2;\r\n      else if (player.position === \"Forward\") weight = 0.3;\r\n      else if (player.position === \"Ruck\") weight = 0.5;\r\n    }\r\n    \r\n    weights[player.id] = weight;\r\n    totalWeight += weight;\r\n  });\r\n  \r\n  // Distribute stats\r\n  let remainingStats = totalStats;\r\n  \r\n  lineup.players.forEach((player, index) => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === lineup.players.length - 1) {\r\n      // Last player gets all remaining stats\r\n      if (statType === \"tackles\") playerStat.tackles = remainingStats;\r\n      else if (statType === \"inside50s\") playerStat.inside50s = remainingStats;\r\n      else if (statType === \"clearances\") playerStat.clearances = remainingStats;\r\n      else if (statType === \"rebound50s\") playerStat.rebound50s = remainingStats;\r\n    } else {\r\n      const playerStats = Math.round((weights[player.id] / totalWeight) * totalStats);\r\n      \r\n      if (statType === \"tackles\") playerStat.tackles = playerStats;\r\n      else if (statType === \"inside50s\") playerStat.inside50s = playerStats;\r\n      else if (statType === \"clearances\") playerStat.clearances = playerStats;\r\n      else if (statType === \"rebound50s\") playerStat.rebound50s = playerStats;\r\n      \r\n      remainingStats -= playerStats;\r\n    }\r\n  });\r\n}\r\n\r\n// Distribute ruck stats (hitouts)\r\nfunction distributeRuckStats(\r\n  homeLineup: TeamLineup,\r\n  homePlayerStats: Record<string, PlayerMatchStats>,\r\n  awayLineup: TeamLineup,\r\n  awayPlayerStats: Record<string, PlayerMatchStats>,\r\n  homeStrength: { attack: number; midfield: number; defense: number; overall: number },\r\n  awayStrength: { attack: number; midfield: number; defense: number; overall: number }\r\n) {\r\n  // Get ruck players\r\n  const homeRucks = homeLineup.players.filter(p => p.position === \"Ruck\");\r\n  const awayRucks = awayLineup.players.filter(p => p.position === \"Ruck\");\r\n  \r\n  // If no rucks, assign hitouts to tallest players\r\n  if (homeRucks.length === 0) {\r\n    homeRucks.push(homeLineup.players.reduce((tallest, player) => \r\n      (player.attributes.strength || 70) > (tallest.attributes.strength || 70) ? player : tallest\r\n    ));\r\n  }\r\n  \r\n  if (awayRucks.length === 0) {\r\n    awayRucks.push(awayLineup.players.reduce((tallest, player) => \r\n      (player.attributes.strength || 70) > (tallest.attributes.strength || 70) ? player : tallest\r\n    ));\r\n  }\r\n  \r\n  // Calculate total hitouts (30-40 per team is typical)\r\n  const totalHitouts = 70;\r\n  \r\n  // Calculate main ruck strength\r\n  const homeRuckStrength = homeRucks.reduce((total, ruck) => \r\n    total + (ruck.attributes.tapwork || 75) + (ruck.attributes.strength || 75), 0\r\n  ) / (homeRucks.length * 2);\r\n  \r\n  const awayRuckStrength = awayRucks.reduce((total, ruck) => \r\n    total + (ruck.attributes.tapwork || 75) + (ruck.attributes.strength || 75), 0\r\n  ) / (awayRucks.length * 2);\r\n  \r\n  // Calculate home hitout percentage\r\n  const homeHitoutPercentage = homeRuckStrength / (homeRuckStrength + awayRuckStrength);\r\n  \r\n  // Distribute hitouts\r\n  const homeHitouts = Math.round(totalHitouts * homeHitoutPercentage);\r\n  const awayHitouts = totalHitouts - homeHitouts;\r\n  \r\n  // Distribute home hitouts among rucks\r\n  let remainingHomeHitouts = homeHitouts;\r\n  homeRucks.forEach((ruck, index) => {\r\n    const playerStat = homePlayerStats[ruck.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === homeRucks.length - 1) {\r\n      playerStat.hitouts = remainingHomeHitouts;\r\n    } else {\r\n      const ruckRating = ((ruck.attributes.tapwork || 75) + (ruck.attributes.strength || 75)) / 2;\r\n      const hitoutShare = Math.round(homeHitouts * (ruckRating / homeRuckStrength));\r\n      playerStat.hitouts = hitoutShare;\r\n      remainingHomeHitouts -= hitoutShare;\r\n    }\r\n  });\r\n  \r\n  // Distribute away hitouts among rucks\r\n  let remainingAwayHitouts = awayHitouts;\r\n  awayRucks.forEach((ruck, index) => {\r\n    const playerStat = awayPlayerStats[ruck.id];\r\n    if (!playerStat) return;\r\n    \r\n    if (index === awayRucks.length - 1) {\r\n      playerStat.hitouts = remainingAwayHitouts;\r\n    } else {\r\n      const ruckRating = ((ruck.attributes.tapwork || 75) + (ruck.attributes.strength || 75)) / 2;\r\n      const hitoutShare = Math.round(awayHitouts * (ruckRating / awayRuckStrength));\r\n      playerStat.hitouts = hitoutShare;\r\n      remainingAwayHitouts -= hitoutShare;\r\n    }\r\n  });\r\n}\r\n\r\n// Calculate meters gained for players\r\nfunction calculateMetersGained(\r\n  lineup: TeamLineup,\r\n  playerStats: Record<string, PlayerMatchStats>\r\n) {\r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    // Meters gained is roughly proportional to kicks * 20 + handballs * 5\r\n    // Adjusted by position and player attributes\r\n    const baseMeters = playerStat.kicks * 20 + playerStat.handballs * 5;\r\n    \r\n    // Position modifier\r\n    let positionMod = 1.0;\r\n    if (player.position === \"Midfielder\") positionMod = 1.2;\r\n    else if (player.position === \"Forward\") positionMod = 0.9;\r\n    else if (player.position === \"Defender\") positionMod = 1.1;\r\n    \r\n    // Attribute modifier\r\n    const attributeMod = (player.attributes.speed + player.attributes.kicking) / 150;\r\n    \r\n    playerStat.meterGained = Math.round(baseMeters * positionMod * attributeMod);\r\n  });\r\n}\r\n\r\n// Create match summary from player stats\r\nfunction createMatchSummary(\r\n  homeLineup: TeamLineup,\r\n  awayLineup: TeamLineup,\r\n  homePlayerStats: Record<string, PlayerMatchStats>,\r\n  awayPlayerStats: Record<string, PlayerMatchStats>,\r\n  homeScore: MatchScore,\r\n  awayScore: MatchScore\r\n): MatchSummary {\r\n  // Calculate team totals\r\n  const homeTeamSummary: TeamMatchSummary = {\r\n    disposals: 0,\r\n    kicks: 0,\r\n    handballs: 0,\r\n    marks: 0,\r\n    contestedMarks: 0,\r\n    tackles: 0,\r\n    hitouts: 0,\r\n    clearances: 0,\r\n    inside50s: 0,\r\n    goalEfficiency: 0,\r\n    contestedPossessions: 0,\r\n    uncontestPossessions: 0,\r\n    freeKicksFor: 0,\r\n    freeKicksAgainst: 0\r\n  };\r\n  \r\n  const awayTeamSummary: TeamMatchSummary = {\r\n    disposals: 0,\r\n    kicks: 0,\r\n    handballs: 0,\r\n    marks: 0,\r\n    contestedMarks: 0,\r\n    tackles: 0,\r\n    hitouts: 0,\r\n    clearances: 0,\r\n    inside50s: 0,\r\n    goalEfficiency: 0,\r\n    contestedPossessions: 0,\r\n    uncontestPossessions: 0,\r\n    freeKicksFor: 0,\r\n    freeKicksAgainst: 0\r\n  };\r\n  \r\n  // Sum up team stats\r\n  Object.values(homePlayerStats).forEach(player => {\r\n    homeTeamSummary.disposals += player.disposals;\r\n    homeTeamSummary.kicks += player.kicks;\r\n    homeTeamSummary.handballs += player.handballs;\r\n    homeTeamSummary.marks += player.marks;\r\n    homeTeamSummary.contestedMarks += player.contestedMarks;\r\n    homeTeamSummary.tackles += player.tackles;\r\n    homeTeamSummary.hitouts += player.hitouts;\r\n    homeTeamSummary.clearances += player.clearances;\r\n    homeTeamSummary.inside50s += player.inside50s;\r\n    homeTeamSummary.contestedPossessions += player.contestedPossessions;\r\n    homeTeamSummary.uncontestPossessions += player.uncontestPossessions;\r\n    homeTeamSummary.freeKicksFor += player.freeKicksFor;\r\n    homeTeamSummary.freeKicksAgainst += player.freeKicksAgainst;\r\n  });\r\n  \r\n  Object.values(awayPlayerStats).forEach(player => {\r\n    awayTeamSummary.disposals += player.disposals;\r\n    awayTeamSummary.kicks += player.kicks;\r\n    awayTeamSummary.handballs += player.handballs;\r\n    awayTeamSummary.marks += player.marks;\r\n    awayTeamSummary.contestedMarks += player.contestedMarks;\r\n    awayTeamSummary.tackles += player.tackles;\r\n    awayTeamSummary.hitouts += player.hitouts;\r\n    awayTeamSummary.clearances += player.clearances;\r\n    awayTeamSummary.inside50s += player.inside50s;\r\n    awayTeamSummary.contestedPossessions += player.contestedPossessions;\r\n    awayTeamSummary.uncontestPossessions += player.uncontestPossessions;\r\n    awayTeamSummary.freeKicksFor += player.freeKicksFor;\r\n    awayTeamSummary.freeKicksAgainst += player.freeKicksAgainst;\r\n  });\r\n  \r\n  // Calculate goal efficiency (goals per inside 50)\r\n  homeTeamSummary.goalEfficiency = homeTeamSummary.inside50s > 0 \r\n    ? (homeScore.goals / homeTeamSummary.inside50s) * 100 \r\n    : 0;\r\n    \r\n  awayTeamSummary.goalEfficiency = awayTeamSummary.inside50s > 0 \r\n    ? (awayScore.goals / awayTeamSummary.inside50s) * 100 \r\n    : 0;\r\n  \r\n  // Find best players (top 3 by match rating)\r\n  const homeBestPlayers = Object.keys(homePlayerStats)\r\n    .sort((a, b) => homePlayerStats[b].matchRating - homePlayerStats[a].matchRating)\r\n    .slice(0, 3);\r\n    \r\n  const awayBestPlayers = Object.keys(awayPlayerStats)\r\n    .sort((a, b) => awayPlayerStats[b].matchRating - awayPlayerStats[a].matchRating)\r\n    .slice(0, 3);\r\n  \r\n  // Find top scorers (top 3 by goals)\r\n  const homeTopScorers = Object.keys(homePlayerStats)\r\n    .sort((a, b) => homePlayerStats[b].goals - homePlayerStats[a].goals)\r\n    .slice(0, 3);\r\n    \r\n  const awayTopScorers = Object.keys(awayPlayerStats)\r\n    .sort((a, b) => awayPlayerStats[b].goals - awayPlayerStats[a].goals)\r\n    .slice(0, 3);\r\n  \r\n  return {\r\n    home: homeTeamSummary,\r\n    away: awayTeamSummary,\r\n    quarterByQuarter: {\r\n      home: [0, 0, 0, 0], // Will be populated with actual quarter scores later\r\n      away: [0, 0, 0, 0]\r\n    },\r\n    finalScores: {\r\n      home: homeScore,\r\n      away: awayScore\r\n    },\r\n    bestPlayers: {\r\n      home: homeBestPlayers,\r\n      away: awayBestPlayers\r\n    },\r\n    topScorers: {\r\n      home: homeTopScorers,\r\n      away: awayTopScorers\r\n    }\r\n  };\r\n}\r\n\r\n// Calculate player match ratings\r\nfunction calculatePlayerRatings(\r\n  lineup: TeamLineup,\r\n  playerStats: Record<string, PlayerMatchStats>,\r\n  teamStrength: { attack: number; midfield: number; defense: number; overall: number },\r\n  oppositionStrength: { attack: number; midfield: number; defense: number; overall: number }\r\n) {\r\n  lineup.players.forEach(player => {\r\n    const playerStat = playerStats[player.id];\r\n    if (!playerStat) return;\r\n    \r\n    // Base rating - everyone starts at 5.0\r\n    let rating = 5.0;\r\n    \r\n    // Add points for disposals (scaled by position)\r\n    let disposalValue = 0.04; // Base value per disposal\r\n    if (player.position === \"Midfielder\") disposalValue = 0.03; // Mids get less per disposal (expected more)\r\n    else if (player.position === \"Defender\" || player.position === \"Forward\") disposalValue = 0.04;\r\n    else if (player.position === \"Ruck\") disposalValue = 0.05; // Rucks get more per disposal (expected fewer)\r\n    \r\n    rating += playerStat.disposals * disposalValue;\r\n    \r\n    // Add for marks, tackles, etc.\r\n    rating += playerStat.marks * 0.1;\r\n    rating += playerStat.contestedMarks * 0.2; // Contested marks worth more\r\n    rating += playerStat.tackles * 0.1;\r\n    \r\n    // Add for position-specific stats\r\n    if (player.position === \"Forward\") {\r\n      rating += playerStat.goals * 0.5;\r\n      rating += playerStat.behinds * 0.1;\r\n    } else if (player.position === \"Midfielder\") {\r\n      rating += playerStat.clearances * 0.15;\r\n      rating += playerStat.inside50s * 0.1;\r\n    } else if (player.position === \"Defender\") {\r\n      rating += playerStat.rebound50s * 0.15;\r\n    } else if (player.position === \"Ruck\") {\r\n      rating += playerStat.hitouts * 0.04;\r\n    }\r\n    \r\n    // Adjust based on opposition strength\r\n    const oppositionFactor = 1 + ((oppositionStrength.overall - 70) * 0.005);\r\n    rating *= oppositionFactor;\r\n    \r\n    // Cap between 1 and 10\r\n    playerStat.matchRating = Math.max(1, Math.min(10, rating));\r\n  });\r\n}\r\n\r\n// Generate player and team statistics for a match\r\nfunction generatePlayerStats(\r\n  homeLineup: TeamLineup,\r\n  awayLineup: TeamLineup,\r\n  homeStrength: { attack: number; midfield: number; defense: number; overall: number },\r\n  awayStrength: { attack: number; midfield: number; defense: number; overall: number },\r\n  events: MatchEvent[],\r\n  homeScore: MatchScore,\r\n  awayScore: MatchScore,\r\n  quarterScores: { home: number[]; away: number[] }\r\n): { \r\n  matchStats: MatchStats, \r\n  homePlayerStats: Record<string, PlayerMatchStats>, \r\n  awayPlayerStats: Record<string, PlayerMatchStats>,\r\n  matchSummary: MatchSummary \r\n} {\r\n  // Initialize stats objects for backward compatibility\r\n  const disposals: Record<string, number> = {};\r\n  const marks: Record<string, number> = {};\r\n  const tackles: Record<string, number> = {};\r\n  const goals: Record<string, number> = {};\r\n  const behinds: Record<string, number> = {};\r\n  \r\n  // Initialize player stats records\r\n  const homePlayerStats: Record<string, PlayerMatchStats> = {};\r\n  const awayPlayerStats: Record<string, PlayerMatchStats> = {};\r\n  \r\n  // Initialize all players with zero basic stats\r\n  [...homeLineup.players, ...awayLineup.players].forEach(player => {\r\n    disposals[player.id] = 0;\r\n    marks[player.id] = 0;\r\n    tackles[player.id] = 0;\r\n    goals[player.id] = 0;\r\n    behinds[player.id] = 0;\r\n    \r\n    // Initialize detailed player stats\r\n    const playerStats: PlayerMatchStats = {\r\n      playerId: player.id,\r\n      disposals: 0,\r\n      kicks: 0,\r\n      handballs: 0,\r\n      marks: 0,\r\n      contestedMarks: 0,\r\n      tackles: 0,\r\n      hitouts: 0,\r\n      clearances: 0,\r\n      inside50s: 0,\r\n      rebound50s: 0,\r\n      contestedPossessions: 0,\r\n      uncontestPossessions: 0,\r\n      goals: 0,\r\n      behinds: 0,\r\n      meterGained: 0,\r\n      freeKicksFor: 0,\r\n      freeKicksAgainst: 0,\r\n      matchRating: 5.0 // starting rating\r\n    };\r\n    \r\n    if (player.teamId === homeLineup.teamId) {\r\n      homePlayerStats[player.id] = playerStats;\r\n    } else {\r\n      awayPlayerStats[player.id] = playerStats;\r\n    }\r\n  });\r\n  \r\n  // Record goals and behinds from events\r\n  events.forEach(event => {\r\n    if (event.type === \"goal\" && event.playerId) {\r\n      goals[event.playerId] = (goals[event.playerId] || 0) + 1;\r\n      \r\n      // Update detailed player stats\r\n      if (event.teamId === homeLineup.teamId && homePlayerStats[event.playerId]) {\r\n        homePlayerStats[event.playerId].goals += 1;\r\n        homePlayerStats[event.playerId].kicks += 1;\r\n        homePlayerStats[event.playerId].disposals += 1;\r\n      } else if (event.teamId === awayLineup.teamId && awayPlayerStats[event.playerId]) {\r\n        awayPlayerStats[event.playerId].goals += 1;\r\n        awayPlayerStats[event.playerId].kicks += 1;\r\n        awayPlayerStats[event.playerId].disposals += 1;\r\n      }\r\n    } else if (event.type === \"behind\" && event.playerId) {\r\n      behinds[event.playerId] = (behinds[event.playerId] || 0) + 1;\r\n      \r\n      // Update detailed player stats\r\n      if (event.teamId === homeLineup.teamId && homePlayerStats[event.playerId]) {\r\n        homePlayerStats[event.playerId].behinds += 1;\r\n        homePlayerStats[event.playerId].kicks += 1;\r\n        homePlayerStats[event.playerId].disposals += 1;\r\n      } else if (event.teamId === awayLineup.teamId && awayPlayerStats[event.playerId]) {\r\n        awayPlayerStats[event.playerId].behinds += 1;\r\n        awayPlayerStats[event.playerId].kicks += 1;\r\n        awayPlayerStats[event.playerId].disposals += 1;\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Calculate team disposals based on midfield strength\r\n  const totalDisposals = AVERAGE_DISPOSALS_PER_MATCH * 2; // For both teams\r\n  const homeMidfieldRatio = homeStrength.midfield / (homeStrength.midfield + awayStrength.midfield);\r\n  const homeDisposals = Math.round(totalDisposals * homeMidfieldRatio);\r\n  const awayDisposals = totalDisposals - homeDisposals;\r\n  \r\n  // Calculate distribution of kicks vs handballs (typically ~60/40 split)\r\n  const homeKicks = Math.round(homeDisposals * 0.6);\r\n  const homeHandballs = homeDisposals - homeKicks;\r\n  const awayKicks = Math.round(awayDisposals * 0.6);\r\n  const awayHandballs = awayDisposals - awayKicks;\r\n  \r\n  // Distribute disposals among players based on position and attributes\r\n  distributeDisposals(homeLineup, homePlayerStats, homeKicks, homeHandballs);\r\n  distributeDisposals(awayLineup, awayPlayerStats, awayKicks, awayHandballs);\r\n  \r\n  // Calculate and distribute contested vs uncontested possessions\r\n  distributeContestedStats(homeLineup, homePlayerStats, homeStrength);\r\n  distributeContestedStats(awayLineup, awayPlayerStats, awayStrength);\r\n  \r\n  // Calculate team marks\r\n  const totalMarks = AVERAGE_MARKS_PER_MATCH * 2;\r\n  const homeMarkRatio = (homeStrength.attack * 0.4 + homeStrength.midfield * 0.3 + homeStrength.defense * 0.3) / \r\n                        ((homeStrength.attack + awayStrength.attack) * 0.4 + \r\n                         (homeStrength.midfield + awayStrength.midfield) * 0.3 + \r\n                         (homeStrength.defense + awayStrength.defense) * 0.3);\r\n  const homeMarks = Math.round(totalMarks * homeMarkRatio);\r\n  const awayMarks = totalMarks - homeMarks;\r\n  \r\n  distributeMarks(homeLineup, homePlayerStats, homeMarks);\r\n  distributeMarks(awayLineup, awayPlayerStats, awayMarks);\r\n  \r\n  // Calculate team tackles\r\n  const totalTackles = AVERAGE_TACKLES_PER_MATCH * 2;\r\n  const homeTackleRatio = (homeStrength.defense * 0.5 + homeStrength.midfield * 0.5) / \r\n                          ((homeStrength.defense + awayStrength.defense) * 0.5 + \r\n                           (homeStrength.midfield + awayStrength.midfield) * 0.5);\r\n  const homeTackles = Math.round(totalTackles * homeTackleRatio);\r\n  const awayTackles = totalTackles - homeTackles;\r\n  \r\n  distributeSpecialStats(homeLineup, homePlayerStats, \"tackles\", homeTackles);\r\n  distributeSpecialStats(awayLineup, awayPlayerStats, \"tackles\", awayTackles);\r\n  \r\n  // Calculate inside 50s\r\n  const totalInside50s = AVERAGE_INSIDE_50S_PER_MATCH * 2;\r\n  const homeInside50Ratio = (homeStrength.midfield * 0.7 + homeStrength.attack * 0.3) / \r\n                            ((homeStrength.midfield + awayStrength.midfield) * 0.7 + \r\n                             (homeStrength.attack + awayStrength.attack) * 0.3);\r\n  const homeInside50s = Math.round(totalInside50s * homeInside50Ratio);\r\n  const awayInside50s = totalInside50s - homeInside50s;\r\n  \r\n  distributeSpecialStats(homeLineup, homePlayerStats, \"inside50s\", homeInside50s);\r\n  distributeSpecialStats(awayLineup, awayPlayerStats, \"inside50s\", awayInside50s);\r\n  \r\n  // Calculate clearances\r\n  const totalClearances = AVERAGE_CLEARANCES_PER_MATCH * 2;\r\n  const homeClearanceRatio = homeStrength.midfield / (homeStrength.midfield + awayStrength.midfield);\r\n  const homeClearances = Math.round(totalClearances * homeClearanceRatio);\r\n  const awayClearances = totalClearances - homeClearances;\r\n  \r\n  distributeSpecialStats(homeLineup, homePlayerStats, \"clearances\", homeClearances);\r\n  distributeSpecialStats(awayLineup, awayPlayerStats, \"clearances\", awayClearances);\r\n  \r\n  // Calculate hitouts\r\n  distributeRuckStats(homeLineup, homePlayerStats, awayLineup, awayPlayerStats, homeStrength, awayStrength);\r\n  \r\n  // Calculate meters gained\r\n  calculateMetersGained(homeLineup, homePlayerStats);\r\n  calculateMetersGained(awayLineup, awayPlayerStats);\r\n  \r\n  // Calculate player ratings\r\n  calculatePlayerRatings(homeLineup, homePlayerStats, homeStrength, awayStrength);\r\n  calculatePlayerRatings(awayLineup, awayPlayerStats, awayStrength, homeStrength);\r\n  \r\n  // Create match summary\r\n  const matchSummary = createMatchSummary(\r\n    homeLineup, awayLineup, \r\n    homePlayerStats, awayPlayerStats, \r\n    homeScore, awayScore\r\n  );\r\n  \r\n  // Update quarter scores in match summary\r\n  matchSummary.quarterByQuarter.home = quarterScores.home;\r\n  matchSummary.quarterByQuarter.away = quarterScores.away;\r\n  \r\n  // Legacy stats object for backward compatibility\r\n  const matchStats: MatchStats = {\r\n    disposals,\r\n    marks,\r\n    tackles,\r\n    goals,\r\n    behinds\r\n  };\r\n  \r\n  return { matchStats, homePlayerStats, awayPlayerStats, matchSummary };\r\n}\r\n\r\n// Main function to simulate a match\r\nexport function simulateMatch(\r\n  match: Match,\r\n  homeTeam: Team,\r\n  awayTeam: Team,\r\n  homePlayers: Player[],\r\n  awayPlayers: Player[]\r\n): MatchSimulationResult {\r\n  // Create lineups with detailed tactics\r\n  const homeLineup: TeamLineup = {\r\n    teamId: homeTeam.id,\r\n    players: homePlayers,\r\n    tactics: {\r\n      style: \"balanced\",\r\n      pressure: 5,\r\n      possession: 5,\r\n      riskTaking: 5,\r\n      ballMovement: \"corridor-focused\",\r\n      defensiveStructure: \"accountable-zone\",\r\n      attackingStructure: \"leading-patterns\",\r\n      contestApproach: \"outnumber-at-contest\",\r\n      centerBounceSetup: \"6-6-6\",\r\n      quarterAdjustments: {\r\n        firstQuarter: \"fast-start\",\r\n        thirdQuarter: \"apply-pressure\",\r\n        finalQuarter: \"protect-lead\"\r\n      },\r\n      rotationSystem: {\r\n        type: \"time-based\",\r\n        forwardFrequency: 5,\r\n        midfieldFrequency: 7,\r\n        defenseFrequency: 10,\r\n        ruckStrategy: \"quarters\"\r\n      }\r\n    },\r\n    playerRoles: {}\r\n  };\r\n  \r\n  const awayLineup: TeamLineup = {\r\n    teamId: awayTeam.id,\r\n    players: awayPlayers,\r\n    tactics: {\r\n      style: \"balanced\",\r\n      pressure: 5,\r\n      possession: 5,\r\n      riskTaking: 5,\r\n      ballMovement: \"boundary-line\",\r\n      defensiveStructure: \"zone-defense\",\r\n      attackingStructure: \"forward-target-focus\",\r\n      contestApproach: \"physical-intimidation\",\r\n      centerBounceSetup: \"5-7-5\",\r\n      quarterAdjustments: {\r\n        firstQuarter: \"assess-opposition\",\r\n        thirdQuarter: \"apply-pressure\",\r\n        finalQuarter: \"protect-lead\"\r\n      },\r\n      rotationSystem: {\r\n        type: \"time-based\",\r\n        forwardFrequency: 5,\r\n        midfieldFrequency: 6,\r\n        defenseFrequency: 12,\r\n        ruckStrategy: \"quarters\"\r\n      }\r\n    },\r\n    playerRoles: {}\r\n  };\r\n  \r\n  // Assign default roles based on position\r\n  homePlayers.forEach(player => {\r\n    let role = \"\";\r\n    let instructions: string[] = [];\r\n    \r\n    switch(player.position) {\r\n      case \"Forward\":\r\n        role = \"Key Target\";\r\n        instructions = [\"Lead up at ball carrier\", \"Take contested marks\"];\r\n        break;\r\n      case \"Midfielder\":\r\n        role = \"Inside Midfielder\";\r\n        instructions = [\"Win clearances\", \"Distribute by hand\"];\r\n        break;\r\n      case \"Defender\":\r\n        role = \"Lockdown\";\r\n        instructions = [\"Stick to opponent\", \"Spoil contests\"];\r\n        break;\r\n      case \"Ruck\":\r\n        role = \"Tap Specialist\";\r\n        instructions = [\"Win hitouts\", \"Follow up at ground level\"];\r\n        break;\r\n      case \"Utility\":\r\n        role = \"Link\";\r\n        instructions = [\"Provide options\", \"Cover multiple positions\"];\r\n        break;\r\n    }\r\n    \r\n    homeLineup.playerRoles[player.id] = {\r\n      role,\r\n      instructions\r\n    };\r\n  });\r\n  \r\n  // Same for away team\r\n  awayPlayers.forEach(player => {\r\n    let role = \"\";\r\n    let instructions: string[] = [];\r\n    \r\n    switch(player.position) {\r\n      case \"Forward\":\r\n        role = \"Crumber\";\r\n        instructions = [\"Crumb from contests\", \"Apply forward pressure\"];\r\n        break;\r\n      case \"Midfielder\":\r\n        role = \"Outside Midfielder\";\r\n        instructions = [\"Receive from contests\", \"Use pace on wings\"];\r\n        break;\r\n      case \"Defender\":\r\n        role = \"Interceptor\";\r\n        instructions = [\"Read the play\", \"Take intercept marks\"];\r\n        break;\r\n      case \"Ruck\":\r\n        role = \"Around-the-Ground\";\r\n        instructions = [\"Compete in hitouts\", \"Be a marking target around ground\"];\r\n        break;\r\n      case \"Utility\":\r\n        role = \"Distributor\";\r\n        instructions = [\"Link up play\", \"Use skills in transition\"];\r\n        break;\r\n    }\r\n    \r\n    awayLineup.playerRoles[player.id] = {\r\n      role,\r\n      instructions\r\n    };\r\n  });\r\n  \r\n  // Calculate team strengths\r\n  const homeStrength = calculateTeamStrength(homeTeam, homeLineup, awayTeam);\r\n  const awayStrength = calculateTeamStrength(awayTeam, awayLineup, homeTeam);\r\n  \r\n  // Generate match events and scores\r\n  const { events, homeScore, awayScore, quarterScores } = generateMatchEvents(\r\n    homeTeam, awayTeam, homeLineup, awayLineup, homeStrength, awayStrength\r\n  );\r\n  \r\n  // Generate player and team statistics\r\n  const { matchStats, homePlayerStats, awayPlayerStats, matchSummary } = generatePlayerStats(\r\n    homeLineup, awayLineup, homeStrength, awayStrength, events, homeScore, awayScore, quarterScores\r\n  );\r\n  \r\n  // Return simulation result\r\n  return {\r\n    homeScore,\r\n    awayScore,\r\n    events,\r\n    stats: matchStats,\r\n    homePlayerStats,\r\n    awayPlayerStats,\r\n    matchSummary\r\n  };\r\n}\r\n\r\n// Export utility functions for LiveMatchSimulation component\r\nexport function resetPositions(state: any) {\r\n  if (!state.players || !state.ball) return state;\r\n  \r\n  // Reset ball position to center\r\n  state.ball.x = FIELD_WIDTH / 2;\r\n  state.ball.y = FIELD_HEIGHT / 2;\r\n  state.ball.targetX = FIELD_WIDTH / 2;\r\n  state.ball.targetY = FIELD_HEIGHT / 2;\r\n  state.ball.carrier = null;\r\n  state.ball.moving = false;\r\n  state.ball.inAir = false;\r\n  state.ball.height = 0;\r\n  \r\n  // Reset player positions\r\n  const homeTeamId = state.players.find((p: any) => p.teamId)?.teamId;\r\n  if (!homeTeamId) return state;\r\n  \r\n  state.players = state.players.map((player: any, index: number) => {\r\n    const isHomeTeam = player.teamId === homeTeamId;\r\n    const formation = isHomeTeam ? TEAM_FORMATIONS.attack : TEAM_FORMATIONS.defense;\r\n    const position = formation[index % formation.length]; // Use modulo to avoid issues if more than 18 players\r\n    \r\n    return {\r\n      ...player,\r\n      x: position.x * FIELD_WIDTH,\r\n      y: position.y * FIELD_HEIGHT,\r\n      targetX: position.x * FIELD_WIDTH,\r\n      targetY: position.y * FIELD_HEIGHT,\r\n      hasBall: false\r\n    };\r\n  });\r\n  \r\n  return state;\r\n}\r\n\r\nexport function kickBall(state: any, player: any, targetX: number, targetY: number) {\r\n  // Player kicks the ball\r\n  state.ball.carrier = null;\r\n  state.ball.moving = true;\r\n  state.ball.inAir = true;\r\n  state.ball.targetX = targetX;\r\n  state.ball.targetY = targetY;\r\n  state.ball.height = 0;\r\n  state.ball.maxHeight = 50 + Math.random() * 50;\r\n  state.ball.spinFactor = (Math.random() - 0.5) * 0.2;\r\n  \r\n  // Update player\r\n  state.players = state.players.map((p: any) => \r\n    p.id === player.id ? { ...p, hasBall: false } : p\r\n  );\r\n  \r\n  return state;\r\n}\r\n\r\nexport function moveBall(state: any) {\r\n  // Ball movement logic\r\n  if (!state.ball.moving) return state;\r\n  \r\n  const dx = state.ball.targetX - state.ball.x;\r\n  const dy = state.ball.targetY - state.ball.y;\r\n  const distance = Math.sqrt(dx * dx + dy * dy);\r\n  \r\n  if (distance < 5) {\r\n    // Ball has reached target\r\n    state.ball.x = state.ball.targetX;\r\n    state.ball.y = state.ball.targetY;\r\n    state.ball.moving = false;\r\n    state.ball.inAir = false;\r\n    state.ball.height = 0;\r\n    return state;\r\n  }\r\n  \r\n  // Move ball towards target\r\n  const speed = distance > 100 ? 8 : 4; // Slow down as it approaches target\r\n  const moveX = (dx / distance) * speed;\r\n  const moveY = (dy / distance) * speed;\r\n  \r\n  state.ball.x += moveX;\r\n  state.ball.y += moveY;\r\n  \r\n  // Update ball height if in air\r\n  if (state.ball.inAir) {\r\n    // Parabolic arc\r\n    const progress = 1 - (distance / Math.sqrt(\r\n      Math.pow(state.ball.targetX - state.ball.x, 2) +\r\n      Math.pow(state.ball.targetY - state.ball.y, 2)\r\n    ));\r\n    \r\n    state.ball.height = state.ball.maxHeight * Math.sin(progress * Math.PI);\r\n    \r\n    if (progress >= 1) {\r\n      state.ball.inAir = false;\r\n      state.ball.height = 0;\r\n    }\r\n  }\r\n  \r\n  // Add spin factor to trajectory\r\n  if (state.ball.spinFactor) {\r\n    const perpX = -dy / distance;\r\n    const perpY = dx / distance;\r\n    state.ball.x += perpX * state.ball.spinFactor * speed;\r\n    state.ball.y += perpY * state.ball.spinFactor * speed;\r\n  }\r\n  \r\n  // Update ball rotation\r\n  state.ball.rotation = (state.ball.rotation || 0) + 10;\r\n  \r\n  return state;\r\n}\r\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\League.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\League.tsx\");\n  import.meta.hot.lastModified = \"1747543677752.8933\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { Card, Flex, Heading, Text, Box, Separator, Grid, Badge, Table, Tabs } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport default function League({\n  gameState,\n  allPlayers\n}) {\n  _s();\n  const [selectedTeamId, setSelectedTeamId] = useState(null);\n\n  // Get user team\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  if (!userTeam) {\n    return <Text>Error: Team not found</Text>;\n  }\n\n  // Get team by ID\n  const getTeamById = teamId => {\n    return teams.find(team => team.id === teamId);\n  };\n\n  // Format match date\n  const formatMatchDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-AU', {\n      weekday: 'short',\n      day: 'numeric',\n      month: 'short'\n    });\n  };\n\n  // Calculate team statistics\n  const calculateTeamStats = () => {\n    const teamStats = {};\n\n    // Initialize stats for all teams\n    teams.forEach(team => {\n      teamStats[team.id] = {\n        played: 0,\n        wins: 0,\n        losses: 0,\n        draws: 0,\n        pointsFor: 0,\n        pointsAgainst: 0,\n        percentage: 0,\n        homeWins: 0,\n        awayWins: 0,\n        form: []\n      };\n    });\n\n    // Calculate stats from completed matches\n    const completedMatches = gameState.seasonFixtures.filter(match => match.completed && match.result);\n    completedMatches.forEach(match => {\n      if (!match.result) return;\n      const homeTeamStats = teamStats[match.homeTeamId];\n      const awayTeamStats = teamStats[match.awayTeamId];\n\n      // Update played games\n      homeTeamStats.played++;\n      awayTeamStats.played++;\n\n      // Update points for/against\n      homeTeamStats.pointsFor += match.result.homeScore.total;\n      homeTeamStats.pointsAgainst += match.result.awayScore.total;\n      awayTeamStats.pointsFor += match.result.awayScore.total;\n      awayTeamStats.pointsAgainst += match.result.homeScore.total;\n\n      // Update wins/losses/draws\n      if (match.result.homeScore.total > match.result.awayScore.total) {\n        // Home team won\n        homeTeamStats.wins++;\n        homeTeamStats.homeWins++;\n        awayTeamStats.losses++;\n\n        // Update form\n        if (homeTeamStats.form.length >= 5) homeTeamStats.form.pop();\n        if (awayTeamStats.form.length >= 5) awayTeamStats.form.pop();\n        homeTeamStats.form.unshift(\"W\");\n        awayTeamStats.form.unshift(\"L\");\n      } else if (match.result.homeScore.total < match.result.awayScore.total) {\n        // Away team won\n        homeTeamStats.losses++;\n        awayTeamStats.wins++;\n        awayTeamStats.awayWins++;\n\n        // Update form\n        if (homeTeamStats.form.length >= 5) homeTeamStats.form.pop();\n        if (awayTeamStats.form.length >= 5) awayTeamStats.form.pop();\n        homeTeamStats.form.unshift(\"L\");\n        awayTeamStats.form.unshift(\"W\");\n      } else {\n        // Draw\n        homeTeamStats.draws++;\n        awayTeamStats.draws++;\n\n        // Update form\n        if (homeTeamStats.form.length >= 5) homeTeamStats.form.pop();\n        if (awayTeamStats.form.length >= 5) awayTeamStats.form.pop();\n        homeTeamStats.form.unshift(\"D\");\n        awayTeamStats.form.unshift(\"D\");\n      }\n\n      // Calculate percentage\n      homeTeamStats.percentage = homeTeamStats.pointsAgainst === 0 ? 100 : homeTeamStats.pointsFor / homeTeamStats.pointsAgainst * 100;\n      awayTeamStats.percentage = awayTeamStats.pointsAgainst === 0 ? 100 : awayTeamStats.pointsFor / awayTeamStats.pointsAgainst * 100;\n    });\n    return teamStats;\n  };\n\n  // Calculate player statistics\n  const calculatePlayerStats = () => {\n    const playerStats = {};\n\n    // Initialize stats for all players\n    allPlayers.forEach(player => {\n      playerStats[player.id] = {\n        disposals: 0,\n        marks: 0,\n        tackles: 0,\n        goals: 0,\n        behinds: 0,\n        gamesPlayed: 0\n      };\n    });\n\n    // Calculate stats from completed matches\n    const completedMatches = gameState.seasonFixtures.filter(match => match.completed && match.result);\n    completedMatches.forEach(match => {\n      if (!match.result) return;\n\n      // Update games played\n      const homeTeamPlayers = allPlayers.filter(p => p.teamId === match.homeTeamId);\n      const awayTeamPlayers = allPlayers.filter(p => p.teamId === match.awayTeamId);\n      [...homeTeamPlayers, ...awayTeamPlayers].forEach(player => {\n        if (playerStats[player.id]) {\n          playerStats[player.id].gamesPlayed++;\n        }\n      });\n\n      // Update stats\n      if (match.result.stats) {\n        Object.entries(match.result.stats.disposals).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].disposals += value;\n          }\n        });\n        Object.entries(match.result.stats.marks).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].marks += value;\n          }\n        });\n        Object.entries(match.result.stats.tackles).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].tackles += value;\n          }\n        });\n        Object.entries(match.result.stats.goals).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].goals += value;\n          }\n        });\n        Object.entries(match.result.stats.behinds).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].behinds += value;\n          }\n        });\n      }\n    });\n    return playerStats;\n  };\n\n  // Get team stats\n  const teamStats = calculateTeamStats();\n\n  // Get player stats\n  const playerStats = calculatePlayerStats();\n\n  // Render ladder\n  const renderLadder = () => <Card variant=\"surface\">\r\n      <Heading size=\"4\" mb=\"3\">League Ladder</Heading>\r\n      \r\n      <Table.Root>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.ColumnHeaderCell>Pos</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>Team</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>P</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>W</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>L</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>D</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>%</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>Pts</Table.ColumnHeaderCell>\r\n            <Table.ColumnHeaderCell>Form</Table.ColumnHeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        \r\n        <Table.Body>\r\n          {gameState.ladder.sort((a, b) => {\n          // Sort by points first\n          if (b.points !== a.points) return b.points - a.points;\n          // Then by percentage\n          return b.percentage - a.percentage;\n        }).map((position, index) => {\n          const team = getTeamById(position.teamId);\n          if (!team) return null;\n          return <Table.Row key={position.teamId} style={{\n            cursor: 'pointer',\n            backgroundColor: selectedTeamId === position.teamId ? 'rgba(59, 130, 246, 0.1)' : undefined\n          }} onClick={() => setSelectedTeamId(position.teamId)}>\r\n                <Table.Cell>{index + 1}</Table.Cell>\r\n                <Table.Cell>\r\n                  <Flex gap=\"2\" align=\"center\">\r\n                    <Box style={{\n                  width: '16px',\n                  height: '16px',\n                  borderRadius: '50%',\n                  backgroundColor: team.colors.primary\n                }} />\r\n                    <Text weight={position.teamId === gameState.userTeamId ? \"bold\" : \"regular\"}>\r\n                      {team.name}\r\n                    </Text>\r\n                  </Flex>\r\n                </Table.Cell>\r\n                <Table.Cell>{position.played}</Table.Cell>\r\n                <Table.Cell>{position.wins}</Table.Cell>\r\n                <Table.Cell>{position.losses}</Table.Cell>\r\n                <Table.Cell>{position.draws}</Table.Cell>\r\n                <Table.Cell>{position.percentage.toFixed(1)}</Table.Cell>\r\n                <Table.Cell weight=\"bold\">{position.points}</Table.Cell>\r\n                <Table.Cell>\r\n                  <Flex gap=\"1\">\r\n                    {teamStats[position.teamId]?.form.map((result, i) => <Box key={i} style={{\n                  width: '20px',\n                  height: '20px',\n                  borderRadius: '50%',\n                  backgroundColor: result === 'W' ? '#22c55e' : result === 'L' ? '#ef4444' : '#f59e0b',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  color: 'white',\n                  fontSize: '12px',\n                  fontWeight: 'bold'\n                }}>\r\n                        {result}\r\n                      </Box>)}\r\n                  </Flex>\r\n                </Table.Cell>\r\n              </Table.Row>;\n        })}\r\n        </Table.Body>\r\n      </Table.Root>\r\n    </Card>;\n\n  // Render team details\n  const renderTeamDetails = () => {\n    if (!selectedTeamId) return null;\n    const team = getTeamById(selectedTeamId);\n    if (!team) return null;\n    const teamPlayers = allPlayers.filter(player => player.teamId === selectedTeamId);\n\n    // Get upcoming matches for this team\n    const upcomingMatches = gameState.seasonFixtures.filter(match => !match.completed && (match.homeTeamId === selectedTeamId || match.awayTeamId === selectedTeamId)).slice(0, 5);\n\n    // Get recent results for this team\n    const recentResults = gameState.seasonFixtures.filter(match => match.completed && match.result && (match.homeTeamId === selectedTeamId || match.awayTeamId === selectedTeamId)).sort((a, b) => b.round - a.round).slice(0, 5);\n    return <Card variant=\"surface\">\r\n        <Flex justify=\"between\" align=\"center\" mb=\"3\">\r\n          <Heading size=\"4\">{team.name}</Heading>\r\n          <Box style={{\n          width: '30px',\n          height: '30px',\n          borderRadius: '50%',\n          backgroundColor: team.colors.primary\n        }} />\r\n        </Flex>\r\n        \r\n        <Separator size=\"4\" my=\"3\" />\r\n        \r\n        <Grid columns={{\n        initial: \"1\",\n        md: \"2\"\n      }} gap=\"4\">\r\n          {/* Team Attributes */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"2\">Team Attributes</Heading>\r\n            \r\n            <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Text size=\"2\">Attack</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${team.attributes.attack}%`,\n                  height: '8px',\n                  backgroundColor: '#22c55e',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{team.attributes.attack}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Midfield</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${team.attributes.midfield}%`,\n                  height: '8px',\n                  backgroundColor: '#3b82f6',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{team.attributes.midfield}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Defense</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${team.attributes.defense}%`,\n                  height: '8px',\n                  backgroundColor: '#f59e0b',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{team.attributes.defense}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Coaching</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${team.attributes.coaching}%`,\n                  height: '8px',\n                  backgroundColor: '#8b5cf6',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{team.attributes.coaching}</Text>\r\n                </Flex>\r\n              </Box>\r\n            </Grid>\r\n            \r\n            <Box mt=\"3\">\r\n              <Text size=\"2\" weight=\"bold\">Home Ground</Text>\r\n              <Text>{team.homeGround}</Text>\r\n            </Box>\r\n          </Card>\r\n          \r\n          {/* Team Statistics */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"2\">Team Statistics</Heading>\r\n            \r\n            <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Home Record</Text>\r\n                <Text>{teamStats[selectedTeamId]?.homeWins || 0}W - {(teamStats[selectedTeamId]?.played || 0) - (teamStats[selectedTeamId]?.homeWins || 0) - (teamStats[selectedTeamId]?.awayWins || 0)}L</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Away Record</Text>\r\n                <Text>{teamStats[selectedTeamId]?.awayWins || 0}W - {(teamStats[selectedTeamId]?.played || 0) - (teamStats[selectedTeamId]?.homeWins || 0) - (teamStats[selectedTeamId]?.awayWins || 0)}L</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Points For</Text>\r\n                <Text>{teamStats[selectedTeamId]?.pointsFor || 0}</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Points Against</Text>\r\n                <Text>{teamStats[selectedTeamId]?.pointsAgainst || 0}</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Percentage</Text>\r\n                <Text>{teamStats[selectedTeamId]?.percentage.toFixed(1) || 0}%</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Form</Text>\r\n                <Flex gap=\"1\">\r\n                  {teamStats[selectedTeamId]?.form.map((result, i) => <Box key={i} style={{\n                  width: '20px',\n                  height: '20px',\n                  borderRadius: '50%',\n                  backgroundColor: result === 'W' ? '#22c55e' : result === 'L' ? '#ef4444' : '#f59e0b',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  color: 'white',\n                  fontSize: '12px',\n                  fontWeight: 'bold'\n                }}>\r\n                      {result}\r\n                    </Box>)}\r\n                </Flex>\r\n              </Box>\r\n            </Grid>\r\n          </Card>\r\n          \r\n          {/* Upcoming Matches */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"2\">Upcoming Matches</Heading>\r\n            \r\n            {upcomingMatches.length > 0 ? <Flex direction=\"column\" gap=\"2\">\r\n                {upcomingMatches.map(match => {\n              const opponent = getTeamById(match.homeTeamId === selectedTeamId ? match.awayTeamId : match.homeTeamId);\n              if (!opponent) return null;\n              const isHome = match.homeTeamId === selectedTeamId;\n              return <Card key={match.id} variant=\"surface\" size=\"1\">\r\n                      <Flex justify=\"between\" align=\"center\">\r\n                        <Box>\r\n                          <Badge size=\"1\">Round {match.round}</Badge>\r\n                          <Text size=\"2\" color=\"gray\">{formatMatchDate(match.date)}</Text>\r\n                          <Text size=\"2\" weight=\"bold\">\r\n                            {isHome ? `${team.name} vs ${opponent.name}` : `${opponent.name} vs ${team.name}`}\r\n                          </Text>\r\n                          <Text size=\"2\">{match.venue}</Text>\r\n                        </Box>\r\n                        \r\n                        <Badge size=\"1\" color={isHome ? \"blue\" : \"gray\"}>\r\n                          {isHome ? \"Home\" : \"Away\"}\r\n                        </Badge>\r\n                      </Flex>\r\n                    </Card>;\n            })}\r\n              </Flex> : <Text color=\"gray\">No upcoming matches</Text>}\r\n          </Card>\r\n          \r\n          {/* Recent Results */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"2\">Recent Results</Heading>\r\n            \r\n            {recentResults.length > 0 ? <Flex direction=\"column\" gap=\"2\">\r\n                {recentResults.map(match => {\n              if (!match.result) return null;\n              const opponent = getTeamById(match.homeTeamId === selectedTeamId ? match.awayTeamId : match.homeTeamId);\n              if (!opponent) return null;\n              const isHome = match.homeTeamId === selectedTeamId;\n              const teamScore = isHome ? match.result.homeScore : match.result.awayScore;\n              const opponentScore = isHome ? match.result.awayScore : match.result.homeScore;\n              const won = teamScore.total > opponentScore.total;\n              const draw = teamScore.total === opponentScore.total;\n              return <Card key={match.id} variant=\"surface\" size=\"1\">\r\n                      <Flex justify=\"between\" align=\"center\">\r\n                        <Box>\r\n                          <Badge size=\"1\">Round {match.round}</Badge>\r\n                          <Text size=\"2\" color=\"gray\">{formatMatchDate(match.date)}</Text>\r\n                          <Text size=\"2\" weight=\"bold\">\r\n                            {isHome ? `${team.name} vs ${opponent.name}` : `${opponent.name} vs ${team.name}`}\r\n                          </Text>\r\n                        </Box>\r\n                        \r\n                        <Flex direction=\"column\" align=\"end\">\r\n                          <Badge size=\"1\" color={won ? \"green\" : draw ? \"orange\" : \"red\"}>\r\n                            {won ? \"Win\" : draw ? \"Draw\" : \"Loss\"}\r\n                          </Badge>\r\n                          <Text weight=\"bold\" mt=\"1\">\r\n                            {teamScore.goals}.{teamScore.behinds} ({teamScore.total}) - {opponentScore.goals}.{opponentScore.behinds} ({opponentScore.total})\r\n                          </Text>\r\n                        </Flex>\r\n                      </Flex>\r\n                    </Card>;\n            })}\r\n              </Flex> : <Text color=\"gray\">No recent results</Text>}\r\n          </Card>\r\n          \r\n          {/* Top Players */}\r\n          <Card variant=\"surface\" style={{\n          gridColumn: \"1 / -1\"\n        }}>\r\n            <Heading size=\"3\" mb=\"2\">Top Players</Heading>\r\n            \r\n            <Table.Root>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.ColumnHeaderCell>Player</Table.ColumnHeaderCell>\r\n                  <Table.ColumnHeaderCell>Position</Table.ColumnHeaderCell>\r\n                  <Table.ColumnHeaderCell>Age</Table.ColumnHeaderCell>\r\n                  <Table.ColumnHeaderCell>Rating</Table.ColumnHeaderCell>\r\n                  <Table.ColumnHeaderCell>Games</Table.ColumnHeaderCell>\r\n                  <Table.ColumnHeaderCell>Disposals</Table.ColumnHeaderCell>\r\n                  <Table.ColumnHeaderCell>Goals</Table.ColumnHeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              \r\n              <Table.Body>\r\n                {teamPlayers.sort((a, b) => {\n                // Calculate overall rating\n                const aRating = (a.attributes.speed + a.attributes.strength + a.attributes.stamina + a.attributes.agility + a.attributes.intelligence + a.attributes.kicking + a.attributes.marking + a.attributes.handball + a.attributes.tackling) / 9;\n                const bRating = (b.attributes.speed + b.attributes.strength + b.attributes.stamina + b.attributes.agility + b.attributes.intelligence + b.attributes.kicking + b.attributes.marking + b.attributes.handball + b.attributes.tackling) / 9;\n                return bRating - aRating;\n              }).slice(0, 10).map(player => {\n                // Calculate overall rating\n                const overallRating = Math.round((player.attributes.speed + player.attributes.strength + player.attributes.stamina + player.attributes.agility + player.attributes.intelligence + player.attributes.kicking + player.attributes.marking + player.attributes.handball + player.attributes.tackling) / 9);\n                return <Table.Row key={player.id}>\r\n                        <Table.Cell>\r\n                          <Text weight=\"bold\">{player.name}</Text>\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                          <Badge size=\"1\">{player.position}</Badge>\r\n                        </Table.Cell>\r\n                        <Table.Cell>{player.age}</Table.Cell>\r\n                        <Table.Cell>\r\n                          <Box style={{\n                      width: '30px',\n                      height: '30px',\n                      borderRadius: '50%',\n                      backgroundColor: '#3b82f6',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      color: 'white',\n                      fontWeight: 'bold'\n                    }}>\r\n                            {overallRating}\r\n                          </Box>\r\n                        </Table.Cell>\r\n                        <Table.Cell>{playerStats[player.id]?.gamesPlayed || 0}</Table.Cell>\r\n                        <Table.Cell>{playerStats[player.id]?.disposals || 0}</Table.Cell>\r\n                        <Table.Cell>{playerStats[player.id]?.goals || 0}</Table.Cell>\r\n                      </Table.Row>;\n              })}\r\n              </Table.Body>\r\n            </Table.Root>\r\n          </Card>\r\n        </Grid>\r\n      </Card>;\n  };\n\n  // Render league statistics\n  const renderLeagueStats = () => {\n    // Get top goal kickers\n    const topGoalKickers = Object.entries(playerStats).map(([playerId, stats]) => {\n      const player = allPlayers.find(p => p.id === playerId);\n      if (!player) return null;\n      return {\n        player,\n        goals: stats.goals,\n        behinds: stats.behinds,\n        team: getTeamById(player.teamId)\n      };\n    }).filter(Boolean).sort((a, b) => b.goals - a.goals).slice(0, 10);\n\n    // Get top disposal getters\n    const topDisposalGetters = Object.entries(playerStats).map(([playerId, stats]) => {\n      const player = allPlayers.find(p => p.id === playerId);\n      if (!player) return null;\n      return {\n        player,\n        disposals: stats.disposals,\n        gamesPlayed: stats.gamesPlayed,\n        average: stats.gamesPlayed > 0 ? stats.disposals / stats.gamesPlayed : 0,\n        team: getTeamById(player.teamId)\n      };\n    }).filter(Boolean).sort((a, b) => b.average - a.average).slice(0, 10);\n    return <Grid columns={{\n      initial: \"1\",\n      md: \"2\"\n    }} gap=\"4\">\r\n        {/* Top Goal Kickers */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"3\">Top Goal Kickers</Heading>\r\n          \r\n          <Table.Root>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.ColumnHeaderCell>Player</Table.ColumnHeaderCell>\r\n                <Table.ColumnHeaderCell>Team</Table.ColumnHeaderCell>\r\n                <Table.ColumnHeaderCell>Goals</Table.ColumnHeaderCell>\r\n                <Table.ColumnHeaderCell>Behinds</Table.ColumnHeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n            \r\n            <Table.Body>\r\n              {topGoalKickers.map((entry, index) => {\n              if (!entry) return null;\n              return <Table.Row key={entry.player.id}>\r\n                    <Table.Cell>\r\n                      <Text weight=\"bold\">{entry.player.name}</Text>\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                      <Flex gap=\"2\" align=\"center\">\r\n                        {entry.team && <Box style={{\n                      width: '12px',\n                      height: '12px',\n                      borderRadius: '50%',\n                      backgroundColor: entry.team.colors.primary\n                    }} />}\r\n                        <Text>{entry.team?.name}</Text>\r\n                      </Flex>\r\n                    </Table.Cell>\r\n                    <Table.Cell>{entry.goals}</Table.Cell>\r\n                    <Table.Cell>{entry.behinds}</Table.Cell>\r\n                  </Table.Row>;\n            })}\r\n            </Table.Body>\r\n          </Table.Root>\r\n        </Card>\r\n        \r\n        {/* Top Disposal Getters */}\r\n        <Card variant=\"surface\">\r\n          <Heading size=\"4\" mb=\"3\">Top Disposal Getters</Heading>\r\n          \r\n          <Table.Root>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.ColumnHeaderCell>Player</Table.ColumnHeaderCell>\r\n                <Table.ColumnHeaderCell>Team</Table.ColumnHeaderCell>\r\n                <Table.ColumnHeaderCell>Avg</Table.ColumnHeaderCell>\r\n                <Table.ColumnHeaderCell>Total</Table.ColumnHeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n            \r\n            <Table.Body>\r\n              {topDisposalGetters.map((entry, index) => {\n              if (!entry) return null;\n              return <Table.Row key={entry.player.id}>\r\n                    <Table.Cell>\r\n                      <Text weight=\"bold\">{entry.player.name}</Text>\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                      <Flex gap=\"2\" align=\"center\">\r\n                        {entry.team && <Box style={{\n                      width: '12px',\n                      height: '12px',\n                      borderRadius: '50%',\n                      backgroundColor: entry.team.colors.primary\n                    }} />}\r\n                        <Text>{entry.team?.name}</Text>\r\n                      </Flex>\r\n                    </Table.Cell>\r\n                    <Table.Cell>{entry.average.toFixed(1)}</Table.Cell>\r\n                    <Table.Cell>{entry.disposals}</Table.Cell>\r\n                  </Table.Row>;\n            })}\r\n            </Table.Body>\r\n          </Table.Root>\r\n        </Card>\r\n      </Grid>;\n  };\n\n  // Render season schedule\n  const renderSchedule = () => {\n    // Group fixtures by round\n    const fixturesByRound = {};\n    gameState.seasonFixtures.forEach(match => {\n      if (!fixturesByRound[match.round]) {\n        fixturesByRound[match.round] = [];\n      }\n      fixturesByRound[match.round].push(match);\n    });\n    return <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Season Schedule</Heading>\r\n        \r\n        <Tabs.Root defaultValue=\"1\">\r\n          <Tabs.List>\r\n            {Object.keys(fixturesByRound).map(round => <Tabs.Trigger key={round} value={round}>\r\n                Round {round}\r\n              </Tabs.Trigger>)}\r\n          </Tabs.List>\r\n          \r\n          <Box pt=\"4\">\r\n            {Object.entries(fixturesByRound).map(([round, matches]) => <Tabs.Content key={round} value={round}>\r\n                <Flex direction=\"column\" gap=\"3\">\r\n                  {matches.map(match => {\n                const homeTeam = getTeamById(match.homeTeamId);\n                const awayTeam = getTeamById(match.awayTeamId);\n                if (!homeTeam || !awayTeam) return null;\n                const isUserTeamMatch = match.homeTeamId === gameState.userTeamId || match.awayTeamId === gameState.userTeamId;\n                return <Card key={match.id} variant=\"surface\" size=\"1\">\r\n                        <Flex justify=\"between\" align=\"center\">\r\n                          <Box>\r\n                            <Flex gap=\"2\" align=\"center\">\r\n                              {isUserTeamMatch && <Badge size=\"1\" color=\"blue\">Your Match</Badge>}\r\n                              <Text size=\"2\" color=\"gray\">{formatMatchDate(match.date)}</Text>\r\n                            </Flex>\r\n                            \r\n                            <Flex gap=\"2\" align=\"center\" mt=\"1\">\r\n                              <Text size=\"3\" weight={match.homeTeamId === gameState.userTeamId ? \"bold\" : \"regular\"}>\r\n                                {homeTeam.name}\r\n                              </Text>\r\n                              <Text size=\"3\">vs</Text>\r\n                              <Text size=\"3\" weight={match.awayTeamId === gameState.userTeamId ? \"bold\" : \"regular\"}>\r\n                                {awayTeam.name}\r\n                              </Text>\r\n                            </Flex>\r\n                            \r\n                            <Text size=\"2\">{match.venue}</Text>\r\n                          </Box>\r\n                          \r\n                          {match.completed && match.result ? <Box>\r\n                              <Text weight=\"bold\">\r\n                                {match.result.homeScore.goals}.{match.result.homeScore.behinds} ({match.result.homeScore.total}) - {match.result.awayScore.goals}.{match.result.awayScore.behinds} ({match.result.awayScore.total})\r\n                              </Text>\r\n                              <Text size=\"2\" color=\"gray\">Final</Text>\r\n                            </Box> : <Badge size=\"1\" color=\"gray\">Upcoming</Badge>}\r\n                        </Flex>\r\n                      </Card>;\n              })}\r\n                </Flex>\r\n              </Tabs.Content>)}\r\n          </Box>\r\n        </Tabs.Root>\r\n      </Card>;\n  };\n  return <Box>\r\n      <Heading size=\"6\" mb=\"4\">League</Heading>\r\n      \r\n      <Tabs.Root defaultValue=\"ladder\">\r\n        <Tabs.List>\r\n          <Tabs.Trigger value=\"ladder\">Ladder</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"stats\">Statistics</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"schedule\">Schedule</Tabs.Trigger>\r\n        </Tabs.List>\r\n        \r\n        <Box pt=\"4\">\r\n          <Tabs.Content value=\"ladder\">\r\n            <Grid columns={{\n            initial: \"1\"\n          }} gap=\"4\">\r\n              {renderLadder()}\r\n              {selectedTeamId && renderTeamDetails()}\r\n            </Grid>\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"stats\">\r\n            {renderLeagueStats()}\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"schedule\">\r\n            {renderSchedule()}\r\n          </Tabs.Content>\r\n        </Box>\r\n      </Tabs.Root>\r\n    </Box>;\n}\n_s(League, \"gFAiMqZJjV7fVLzEzO6/1nrVKwA=\");\n_c = League;\nvar _c;\n$RefreshReg$(_c, \"League\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\Players.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\Players.tsx\");\n  import.meta.hot.lastModified = \"1747543677757.8333\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { Card, Flex, Heading, Text, Box, Separator, Grid, Badge, Table, Select, TextField } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport default function Players({\n  gameState,\n  allPlayers\n}) {\n  _s();\n  const [selectedTeamId, setSelectedTeamId] = useState(\"all\");\n  const [selectedPosition, setSelectedPosition] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"rating\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedPlayer, setSelectedPlayer] = useState(null);\n\n  // Get user team\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  if (!userTeam) {\n    return <Text>Error: Team not found</Text>;\n  }\n\n  // Get team by ID\n  const getTeamById = teamId => {\n    return teams.find(team => team.id === teamId);\n  };\n\n  // Calculate player statistics\n  const calculatePlayerStats = () => {\n    const playerStats = {};\n\n    // Initialize stats for all players\n    allPlayers.forEach(player => {\n      playerStats[player.id] = {\n        disposals: 0,\n        marks: 0,\n        tackles: 0,\n        goals: 0,\n        behinds: 0,\n        gamesPlayed: 0\n      };\n    });\n\n    // Calculate stats from completed matches\n    const completedMatches = gameState.seasonFixtures.filter(match => match.completed && match.result);\n    completedMatches.forEach(match => {\n      if (!match.result) return;\n\n      // Update games played\n      const homeTeamPlayers = allPlayers.filter(p => p.teamId === match.homeTeamId);\n      const awayTeamPlayers = allPlayers.filter(p => p.teamId === match.awayTeamId);\n      [...homeTeamPlayers, ...awayTeamPlayers].forEach(player => {\n        if (playerStats[player.id]) {\n          playerStats[player.id].gamesPlayed++;\n        }\n      });\n\n      // Update stats\n      if (match.result.stats) {\n        Object.entries(match.result.stats.disposals).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].disposals += value;\n          }\n        });\n        Object.entries(match.result.stats.marks).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].marks += value;\n          }\n        });\n        Object.entries(match.result.stats.tackles).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].tackles += value;\n          }\n        });\n        Object.entries(match.result.stats.goals).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].goals += value;\n          }\n        });\n        Object.entries(match.result.stats.behinds).forEach(([playerId, value]) => {\n          if (playerStats[playerId]) {\n            playerStats[playerId].behinds += value;\n          }\n        });\n      }\n    });\n    return playerStats;\n  };\n\n  // Get player stats\n  const playerStats = calculatePlayerStats();\n\n  // Calculate overall rating for a player\n  const calculateOverallRating = player => {\n    return Math.round((player.attributes.speed + player.attributes.strength + player.attributes.stamina + player.attributes.agility + player.attributes.intelligence + player.attributes.kicking + player.attributes.marking + player.attributes.handball + player.attributes.tackling) / 9);\n  };\n\n  // Filter players based on selected filters\n  const filteredPlayers = allPlayers.filter(player => {\n    // Filter by team\n    if (selectedTeamId !== \"all\" && player.teamId !== selectedTeamId) {\n      return false;\n    }\n\n    // Filter by position\n    if (selectedPosition !== \"all\" && player.position !== selectedPosition) {\n      return false;\n    }\n\n    // Filter by search query\n    if (searchQuery && !player.name.toLowerCase().includes(searchQuery.toLowerCase())) {\n      return false;\n    }\n    return true;\n  });\n\n  // Sort players\n  const sortedPlayers = [...filteredPlayers].sort((a, b) => {\n    if (sortBy === \"name\") {\n      return sortOrder === \"asc\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);\n    } else if (sortBy === \"team\") {\n      const teamA = getTeamById(a.teamId);\n      const teamB = getTeamById(b.teamId);\n      if (!teamA || !teamB) return 0;\n      return sortOrder === \"asc\" ? teamA.name.localeCompare(teamB.name) : teamB.name.localeCompare(teamA.name);\n    } else if (sortBy === \"position\") {\n      return sortOrder === \"asc\" ? a.position.localeCompare(b.position) : b.position.localeCompare(a.position);\n    } else if (sortBy === \"age\") {\n      return sortOrder === \"asc\" ? a.age - b.age : b.age - a.age;\n    } else {\n      // rating\n      const aRating = calculateOverallRating(a);\n      const bRating = calculateOverallRating(b);\n      return sortOrder === \"asc\" ? aRating - bRating : bRating - aRating;\n    }\n  });\n\n  // Handle sort change\n  const handleSortChange = newSortBy => {\n    if (sortBy === newSortBy) {\n      // Toggle sort order if clicking the same column\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      // Set new sort column and default to descending for rating, ascending for others\n      setSortBy(newSortBy);\n      setSortOrder(newSortBy === \"rating\" ? \"desc\" : \"asc\");\n    }\n  };\n\n  // Render player details\n  const renderPlayerDetails = () => {\n    if (!selectedPlayer) return null;\n    const team = getTeamById(selectedPlayer.teamId);\n    if (!team) return null;\n\n    // Calculate overall rating\n    const overallRating = calculateOverallRating(selectedPlayer);\n\n    // Get player stats\n    const stats = playerStats[selectedPlayer.id] || {\n      disposals: 0,\n      marks: 0,\n      tackles: 0,\n      goals: 0,\n      behinds: 0,\n      gamesPlayed: 0\n    };\n    return <Card variant=\"surface\">\r\n        <Flex justify=\"between\" align=\"start\" mb=\"3\">\r\n          <Box>\r\n            <Heading size=\"4\">{selectedPlayer.name}</Heading>\r\n            <Flex gap=\"2\" align=\"center\" mt=\"1\">\r\n              <Badge size=\"1\">{selectedPlayer.position}</Badge>\r\n              <Text size=\"2\" color=\"gray\">Age: {selectedPlayer.age}</Text>\r\n              {team && <Flex gap=\"2\" align=\"center\">\r\n                  <Box style={{\n                width: '12px',\n                height: '12px',\n                borderRadius: '50%',\n                backgroundColor: team.colors.primary\n              }} />\r\n                  <Text size=\"2\">{team.name}</Text>\r\n                </Flex>}\r\n            </Flex>\r\n          </Box>\r\n          \r\n          <Box style={{\n          width: '60px',\n          height: '60px',\n          borderRadius: '50%',\n          backgroundColor: '#3b82f6',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '24px'\n        }}>\r\n            {overallRating}\r\n          </Box>\r\n        </Flex>\r\n        \r\n        <Separator size=\"4\" my=\"3\" />\r\n        \r\n        <Grid columns={{\n        initial: \"1\",\n        md: \"2\"\n      }} gap=\"4\">\r\n          {/* Player Attributes */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"3\">Attributes</Heading>\r\n            \r\n            <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Text size=\"2\">Speed</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.speed}%`,\n                  height: '8px',\n                  backgroundColor: '#22c55e',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.speed}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Strength</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.strength}%`,\n                  height: '8px',\n                  backgroundColor: '#3b82f6',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.strength}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Stamina</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.stamina}%`,\n                  height: '8px',\n                  backgroundColor: '#f59e0b',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.stamina}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Agility</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.agility}%`,\n                  height: '8px',\n                  backgroundColor: '#8b5cf6',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.agility}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Intelligence</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.intelligence}%`,\n                  height: '8px',\n                  backgroundColor: '#ec4899',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.intelligence}</Text>\r\n                </Flex>\r\n              </Box>\r\n            </Grid>\r\n          </Card>\r\n          \r\n          {/* Player Skills */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"3\">Skills</Heading>\r\n            \r\n            <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Text size=\"2\">Kicking</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.kicking}%`,\n                  height: '8px',\n                  backgroundColor: '#22c55e',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.kicking}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Marking</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.marking}%`,\n                  height: '8px',\n                  backgroundColor: '#3b82f6',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.marking}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Handball</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.handball}%`,\n                  height: '8px',\n                  backgroundColor: '#f59e0b',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.handball}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\">Tackling</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.attributes.tackling}%`,\n                  height: '8px',\n                  backgroundColor: '#8b5cf6',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.attributes.tackling}</Text>\r\n                </Flex>\r\n              </Box>\r\n            </Grid>\r\n          </Card>\r\n          \r\n          {/* Player Status */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"3\">Status</Heading>\r\n            \r\n            <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Form</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.form}%`,\n                  height: '8px',\n                  backgroundColor: selectedPlayer.form > 80 ? '#22c55e' : selectedPlayer.form > 60 ? '#f59e0b' : '#ef4444',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.form}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Fitness</Text>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                  width: `${selectedPlayer.fitness}%`,\n                  height: '8px',\n                  backgroundColor: selectedPlayer.fitness > 80 ? '#22c55e' : selectedPlayer.fitness > 60 ? '#f59e0b' : '#ef4444',\n                  borderRadius: '4px'\n                }} />\r\n                  <Text size=\"1\">{selectedPlayer.fitness}</Text>\r\n                </Flex>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Contract</Text>\r\n                <Text>{selectedPlayer.contract.yearsRemaining} years</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Salary</Text>\r\n                <Text>${selectedPlayer.contract.salary}k/yr</Text>\r\n              </Box>\r\n            </Grid>\r\n          </Card>\r\n          \r\n          {/* Player Statistics */}\r\n          <Card variant=\"surface\">\r\n            <Heading size=\"3\" mb=\"3\">Season Statistics</Heading>\r\n            \r\n            <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Games Played</Text>\r\n                <Text>{stats.gamesPlayed}</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Disposals</Text>\r\n                <Text>{stats.disposals} ({stats.gamesPlayed > 0 ? (stats.disposals / stats.gamesPlayed).toFixed(1) : '0'} avg)</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Marks</Text>\r\n                <Text>{stats.marks} ({stats.gamesPlayed > 0 ? (stats.marks / stats.gamesPlayed).toFixed(1) : '0'} avg)</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Tackles</Text>\r\n                <Text>{stats.tackles} ({stats.gamesPlayed > 0 ? (stats.tackles / stats.gamesPlayed).toFixed(1) : '0'} avg)</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Goals</Text>\r\n                <Text>{stats.goals} ({stats.gamesPlayed > 0 ? (stats.goals / stats.gamesPlayed).toFixed(1) : '0'} avg)</Text>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <Text size=\"2\" weight=\"bold\">Behinds</Text>\r\n                <Text>{stats.behinds} ({stats.gamesPlayed > 0 ? (stats.behinds / stats.gamesPlayed).toFixed(1) : '0'} avg)</Text>\r\n              </Box>\r\n            </Grid>\r\n          </Card>\r\n        </Grid>\r\n      </Card>;\n  };\n  return <Box>\r\n      <Heading size=\"6\" mb=\"4\">Players</Heading>\r\n      \r\n      <Card variant=\"surface\" mb=\"4\">\r\n        <Flex gap=\"3\" wrap=\"wrap\" mb=\"3\">\r\n          <Box style={{\n          flex: 1,\n          minWidth: '200px'\n        }}>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Filter by Team</Text>\r\n            <Select.Root value={selectedTeamId} onValueChange={setSelectedTeamId}>\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                <Select.Item value=\"all\">All Teams</Select.Item>\r\n                {teams.map(team => <Select.Item key={team.id} value={team.id}>{team.name}</Select.Item>)}\r\n              </Select.Content>\r\n            </Select.Root>\r\n          </Box>\r\n          \r\n          <Box style={{\n          flex: 1,\n          minWidth: '200px'\n        }}>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Filter by Position</Text>\r\n            <Select.Root value={selectedPosition} onValueChange={setSelectedPosition}>\r\n              <Select.Trigger />\r\n              <Select.Content>\r\n                <Select.Item value=\"all\">All Positions</Select.Item>\r\n                <Select.Item value=\"Forward\">Forwards</Select.Item>\r\n                <Select.Item value=\"Midfielder\">Midfielders</Select.Item>\r\n                <Select.Item value=\"Defender\">Defenders</Select.Item>\r\n                <Select.Item value=\"Ruck\">Rucks</Select.Item>\r\n                <Select.Item value=\"Utility\">Utilities</Select.Item>\r\n              </Select.Content>\r\n            </Select.Root>\r\n          </Box>\r\n          \r\n          <Box style={{\n          flex: 1,\n          minWidth: '200px'\n        }}>\r\n            <Text size=\"2\" mb=\"1\" weight=\"bold\">Search</Text>\r\n            <TextField.Root placeholder=\"Search players...\" value={searchQuery} onChange={e => setSearchQuery(e.target.value)} />\r\n          </Box>\r\n        </Flex>\r\n        \r\n        <Text size=\"2\" color=\"gray\">\r\n          Showing {sortedPlayers.length} of {allPlayers.length} players\r\n        </Text>\r\n      </Card>\r\n      \r\n      <Grid columns={{\n      initial: \"1\",\n      md: selectedPlayer ? \"2\" : \"1\"\n    }} gap=\"4\">\r\n        <Card variant=\"surface\">\r\n          <Table.Root>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.ColumnHeaderCell onClick={() => handleSortChange(\"name\")} style={{\n                cursor: 'pointer'\n              }}>\r\n                  Name {sortBy === \"name\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n                </Table.ColumnHeaderCell>\r\n                \r\n                <Table.ColumnHeaderCell onClick={() => handleSortChange(\"team\")} style={{\n                cursor: 'pointer'\n              }}>\r\n                  Team {sortBy === \"team\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n                </Table.ColumnHeaderCell>\r\n                \r\n                <Table.ColumnHeaderCell onClick={() => handleSortChange(\"position\")} style={{\n                cursor: 'pointer'\n              }}>\r\n                  Position {sortBy === \"position\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n                </Table.ColumnHeaderCell>\r\n                \r\n                <Table.ColumnHeaderCell onClick={() => handleSortChange(\"age\")} style={{\n                cursor: 'pointer'\n              }}>\r\n                  Age {sortBy === \"age\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n                </Table.ColumnHeaderCell>\r\n                \r\n                <Table.ColumnHeaderCell onClick={() => handleSortChange(\"rating\")} style={{\n                cursor: 'pointer'\n              }}>\r\n                  Rating {sortBy === \"rating\" && (sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\")}\r\n                </Table.ColumnHeaderCell>\r\n                \r\n                <Table.ColumnHeaderCell>\r\n                  Form\r\n                </Table.ColumnHeaderCell>\r\n                \r\n                <Table.ColumnHeaderCell>\r\n                  Stats\r\n                </Table.ColumnHeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n            \r\n            <Table.Body>\r\n              {sortedPlayers.map(player => {\n              const team = getTeamById(player.teamId);\n              if (!team) return null;\n\n              // Calculate overall rating\n              const overallRating = calculateOverallRating(player);\n\n              // Get player stats\n              const stats = playerStats[player.id] || {\n                disposals: 0,\n                marks: 0,\n                tackles: 0,\n                goals: 0,\n                behinds: 0,\n                gamesPlayed: 0\n              };\n              return <Table.Row key={player.id} style={{\n                cursor: 'pointer',\n                backgroundColor: selectedPlayer?.id === player.id ? 'rgba(59, 130, 246, 0.1)' : undefined\n              }} onClick={() => setSelectedPlayer(player)}>\r\n                    <Table.Cell>\r\n                      <Text weight={player.teamId === gameState.userTeamId ? \"bold\" : \"regular\"}>\r\n                        {player.name}\r\n                      </Text>\r\n                    </Table.Cell>\r\n                    \r\n                    <Table.Cell>\r\n                      <Flex gap=\"2\" align=\"center\">\r\n                        <Box style={{\n                      width: '12px',\n                      height: '12px',\n                      borderRadius: '50%',\n                      backgroundColor: team.colors.primary\n                    }} />\r\n                        <Text>{team.name}</Text>\r\n                      </Flex>\r\n                    </Table.Cell>\r\n                    \r\n                    <Table.Cell>\r\n                      <Badge size=\"1\">{player.position}</Badge>\r\n                    </Table.Cell>\r\n                    \r\n                    <Table.Cell>\r\n                      {player.age}\r\n                    </Table.Cell>\r\n                    \r\n                    <Table.Cell>\r\n                      <Box style={{\n                    width: '30px',\n                    height: '30px',\n                    borderRadius: '50%',\n                    backgroundColor: '#3b82f6',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    color: 'white',\n                    fontWeight: 'bold'\n                  }}>\r\n                        {overallRating}\r\n                      </Box>\r\n                    </Table.Cell>\r\n                    \r\n                    <Table.Cell>\r\n                      <Flex align=\"center\" gap=\"2\">\r\n                        <Box style={{\n                      width: `${player.form}%`,\n                      height: '8px',\n                      backgroundColor: player.form > 80 ? '#22c55e' : player.form > 60 ? '#f59e0b' : '#ef4444',\n                      borderRadius: '4px'\n                    }} />\r\n                        <Text size=\"1\">{player.form}</Text>\r\n                      </Flex>\r\n                    </Table.Cell>\r\n                    \r\n                    <Table.Cell>\r\n                      <Flex gap=\"2\">\r\n                        <Text size=\"2\">{stats.disposals} D</Text>\r\n                        <Text size=\"2\">{stats.goals} G</Text>\r\n                      </Flex>\r\n                    </Table.Cell>\r\n                  </Table.Row>;\n            })}\r\n            </Table.Body>\r\n          </Table.Root>\r\n        </Card>\r\n        \r\n        {selectedPlayer && renderPlayerDetails()}\r\n      </Grid>\r\n    </Box>;\n}\n_s(Players, \"THn8br6mNXum01w4yAWjZqJixHE=\");\n_c = Players;\nvar _c;\n$RefreshReg$(_c, \"Players\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\Club.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\Club.tsx\");\n  import.meta.hot.lastModified = \"1747543677750.3247\";\n}\n// REMIX HMR END\n\nimport { Card, Flex, Heading, Text, Box, Button, Separator, Grid, Table, Tabs, Progress } from \"@radix-ui/themes\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport default function Club({\n  gameState,\n  allPlayers\n}) {\n  // Get user team\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  if (!userTeam) {\n    return <Text>Error: Team not found</Text>;\n  }\n\n  // Get team players\n  const teamPlayers = allPlayers.filter(player => player.teamId === gameState.userTeamId);\n\n  // Calculate team salary cap usage\n  const totalSalary = teamPlayers.reduce((sum, player) => sum + player.contract.salary, 0);\n  const salaryCap = 10000; // $10M salary cap (example value)\n  const salaryCapPercentage = Math.min(100, totalSalary / salaryCap * 100);\n\n  // Club finances (example data)\n  const finances = {\n    balance: 15000000,\n    // $15M\n    weeklyRevenue: 850000,\n    // $850k\n    weeklyExpenses: 750000,\n    // $750k\n    sponsorships: [{\n      name: \"Major Sponsor\",\n      amount: 5000000,\n      duration: \"2 years\"\n    }, {\n      name: \"Secondary Sponsor\",\n      amount: 2500000,\n      duration: \"3 years\"\n    }, {\n      name: \"Minor Sponsor\",\n      amount: 1000000,\n      duration: \"1 year\"\n    }],\n    revenueBreakdown: {\n      ticketSales: 45,\n      sponsorships: 30,\n      merchandise: 15,\n      broadcasting: 10\n    },\n    expensesBreakdown: {\n      playerSalaries: 65,\n      staffSalaries: 15,\n      facilities: 10,\n      operations: 10\n    }\n  };\n\n  // Club facilities (example data)\n  const facilities = {\n    stadium: {\n      name: userTeam.homeGround,\n      capacity: 50000,\n      condition: 85,\n      modernization: 80,\n      fanAmenities: 75\n    },\n    trainingFacilities: {\n      condition: 70,\n      technology: 65,\n      recovery: 75,\n      gymQuality: 80\n    },\n    medicalFacilities: {\n      quality: 75,\n      staff: 70,\n      equipment: 80,\n      rehabilitation: 75\n    },\n    youthAcademy: {\n      quality: 65,\n      coaching: 70,\n      recruitment: 60,\n      development: 65\n    }\n  };\n\n  // Club staff (example data)\n  const staff = [{\n    id: \"1\",\n    name: \"John Smith\",\n    role: \"Head Coach\",\n    quality: 85,\n    specialization: \"Tactical\",\n    salary: 800\n  }, {\n    id: \"2\",\n    name: \"Sarah Johnson\",\n    role: \"Assistant Coach\",\n    quality: 75,\n    specialization: \"Player Development\",\n    salary: 400\n  }, {\n    id: \"3\",\n    name: \"Michael Brown\",\n    role: \"Fitness Coach\",\n    quality: 80,\n    specialization: \"Conditioning\",\n    salary: 350\n  }, {\n    id: \"4\",\n    name: \"David Wilson\",\n    role: \"Medical Officer\",\n    quality: 90,\n    specialization: \"Injury Prevention\",\n    salary: 500\n  }, {\n    id: \"5\",\n    name: \"Emma Davis\",\n    role: \"Scout\",\n    quality: 70,\n    specialization: \"Youth Talent\",\n    salary: 300\n  }, {\n    id: \"6\",\n    name: \"Robert Taylor\",\n    role: \"Physiotherapist\",\n    quality: 85,\n    specialization: \"Rehabilitation\",\n    salary: 400\n  }];\n\n  // Render club overview\n  const renderClubOverview = () => <Grid columns={{\n    initial: \"1\",\n    md: \"2\"\n  }} gap=\"4\">\r\n      <Card variant=\"surface\">\r\n        <Flex justify=\"between\" align=\"center\" mb=\"3\">\r\n          <Heading size=\"4\">{userTeam.name}</Heading>\r\n          <Box style={{\n          width: '40px',\n          height: '40px',\n          borderRadius: '50%',\n          backgroundColor: userTeam.colors.primary,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n          fontWeight: 'bold'\n        }}>\r\n            {userTeam.name.substring(0, 2).toUpperCase()}\r\n          </Box>\r\n        </Flex>\r\n        \r\n        <Separator size=\"4\" my=\"3\" />\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Home Ground</Text>\r\n            <Text>{userTeam.homeGround}</Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Established</Text>\r\n            <Text>1897</Text> {/* Example data */}\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Club Colors</Text>\r\n            <Flex gap=\"2\" align=\"center\">\r\n              <Box style={{\n              width: '20px',\n              height: '20px',\n              borderRadius: '4px',\n              backgroundColor: userTeam.colors.primary\n            }} />\r\n              <Box style={{\n              width: '20px',\n              height: '20px',\n              borderRadius: '4px',\n              backgroundColor: userTeam.colors.secondary || '#ffffff'\n            }} />\r\n            </Flex>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Current Season</Text>\r\n            <Text>Round {gameState.currentRound}</Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">League Position</Text>\r\n            {(() => {\n            const position = gameState.ladder.sort((a, b) => {\n              if (b.points !== a.points) return b.points - a.points;\n              return b.percentage - a.percentage;\n            }).findIndex(pos => pos.teamId === gameState.userTeamId) + 1;\n            return <Text>{position}{getOrdinalSuffix(position)}</Text>;\n          })()}\r\n          </Box>\r\n        </Grid>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Team Attributes</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Attack</Text>\r\n              <Text size=\"2\" weight=\"bold\">{userTeam.attributes.attack}</Text>\r\n            </Flex>\r\n            <Progress value={userTeam.attributes.attack} max={100} size=\"2\" color=\"green\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Midfield</Text>\r\n              <Text size=\"2\" weight=\"bold\">{userTeam.attributes.midfield}</Text>\r\n            </Flex>\r\n            <Progress value={userTeam.attributes.midfield} max={100} size=\"2\" color=\"blue\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Defense</Text>\r\n              <Text size=\"2\" weight=\"bold\">{userTeam.attributes.defense}</Text>\r\n            </Flex>\r\n            <Progress value={userTeam.attributes.defense} max={100} size=\"2\" color=\"orange\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Coaching</Text>\r\n              <Text size=\"2\" weight=\"bold\">{userTeam.attributes.coaching}</Text>\r\n            </Flex>\r\n            <Progress value={userTeam.attributes.coaching} max={100} size=\"2\" color=\"purple\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Overall</Text>\r\n              <Text size=\"2\" weight=\"bold\">\r\n                {Math.round((userTeam.attributes.attack + userTeam.attributes.midfield + userTeam.attributes.defense + userTeam.attributes.coaching) / 4)}\r\n              </Text>\r\n            </Flex>\r\n            <Progress value={Math.round((userTeam.attributes.attack + userTeam.attributes.midfield + userTeam.attributes.defense + userTeam.attributes.coaching) / 4)} max={100} size=\"2\" color=\"indigo\" />\r\n          </Box>\r\n        </Grid>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Salary Cap</Heading>\r\n        \r\n        <Box mb=\"3\">\r\n          <Flex justify=\"between\" mb=\"1\">\r\n            <Text size=\"2\">Salary Cap Usage</Text>\r\n            <Text size=\"2\" weight=\"bold\">${totalSalary}k / ${salaryCap}k</Text>\r\n          </Flex>\r\n          <Progress value={salaryCapPercentage} max={100} size=\"2\" color={salaryCapPercentage > 95 ? \"red\" : salaryCapPercentage > 85 ? \"orange\" : \"green\"} />\r\n        </Box>\r\n        \r\n        <Text size=\"2\" color=\"gray\">\r\n          {salaryCapPercentage >= 100 ? \"You are at the salary cap limit. You must reduce salaries before signing new players.\" : `You have $${salaryCap - totalSalary}k available under the salary cap.`}\r\n        </Text>\r\n        \r\n        <Separator size=\"4\" my=\"3\" />\r\n        \r\n        <Heading size=\"3\" mb=\"2\">Position Breakdown</Heading>\r\n        \r\n        <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n          {[\"Forward\", \"Midfielder\", \"Defender\", \"Ruck\", \"Utility\"].map(position => {\n          const positionPlayers = teamPlayers.filter(p => p.position === position);\n          const positionSalary = positionPlayers.reduce((sum, p) => sum + p.contract.salary, 0);\n          const percentage = Math.round(positionSalary / totalSalary * 100) || 0;\n          return <Box key={position}>\r\n                <Flex justify=\"between\">\r\n                  <Text size=\"2\">{position}s</Text>\r\n                  <Text size=\"2\">{percentage}%</Text>\r\n                </Flex>\r\n                <Flex align=\"center\" gap=\"2\">\r\n                  <Box style={{\n                width: `${percentage}%`,\n                height: '8px',\n                backgroundColor: position === \"Forward\" ? '#22c55e' : position === \"Midfielder\" ? '#3b82f6' : position === \"Defender\" ? '#f59e0b' : position === \"Ruck\" ? '#8b5cf6' : '#ec4899',\n                borderRadius: '4px'\n              }} />\r\n                  <Text size=\"1\">${positionSalary}k</Text>\r\n                </Flex>\r\n              </Box>;\n        })}\r\n        </Grid>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Squad Summary</Heading>\r\n        \r\n        <Grid columns=\"2\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Total Players</Text>\r\n            <Text>{teamPlayers.length}</Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Average Age</Text>\r\n            <Text>\r\n              {Math.round(teamPlayers.reduce((sum, p) => sum + p.age, 0) / teamPlayers.length)}\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Average Rating</Text>\r\n            <Text>\r\n              {Math.round(teamPlayers.reduce((sum, p) => {\n              const rating = (p.attributes.speed + p.attributes.strength + p.attributes.stamina + p.attributes.agility + p.attributes.intelligence + p.attributes.kicking + p.attributes.marking + p.attributes.handball + p.attributes.tackling) / 9;\n              return sum + rating;\n            }, 0) / teamPlayers.length)}\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Average Salary</Text>\r\n            <Text>${Math.round(totalSalary / teamPlayers.length)}k</Text>\r\n          </Box>\r\n        </Grid>\r\n        \r\n        <Separator size=\"4\" my=\"3\" />\r\n        \r\n        <Heading size=\"3\" mb=\"2\">Position Distribution</Heading>\r\n        \r\n        <Flex gap=\"2\" wrap=\"wrap\">\r\n          {[\"Forward\", \"Midfielder\", \"Defender\", \"Ruck\", \"Utility\"].map(position => {\n          const count = teamPlayers.filter(p => p.position === position).length;\n          const percentage = Math.round(count / teamPlayers.length * 100);\n          return <Box key={position} style={{\n            flex: 1,\n            minWidth: '120px'\n          }}>\r\n                <Text size=\"2\" weight=\"bold\">{position}s</Text>\r\n                <Text>{count} ({percentage}%)</Text>\r\n                <Box style={{\n              width: `${percentage}%`,\n              height: '8px',\n              backgroundColor: position === \"Forward\" ? '#22c55e' : position === \"Midfielder\" ? '#3b82f6' : position === \"Defender\" ? '#f59e0b' : position === \"Ruck\" ? '#8b5cf6' : '#ec4899',\n              borderRadius: '4px',\n              marginTop: '4px'\n            }} />\r\n              </Box>;\n        })}\r\n        </Flex>\r\n      </Card>\r\n    </Grid>;\n\n  // Render finances\n  const renderFinances = () => <Grid columns={{\n    initial: \"1\",\n    md: \"2\"\n  }} gap=\"4\">\r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Financial Overview</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Current Balance</Text>\r\n            <Text size=\"6\" weight=\"bold\">${formatCurrency(finances.balance)}</Text>\r\n          </Box>\r\n          \r\n          <Separator size=\"4\" my=\"1\" />\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Weekly Revenue</Text>\r\n            <Text color=\"green\">${formatCurrency(finances.weeklyRevenue)}</Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Weekly Expenses</Text>\r\n            <Text color=\"red\">${formatCurrency(finances.weeklyExpenses)}</Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Weekly Profit/Loss</Text>\r\n            <Text color={finances.weeklyRevenue > finances.weeklyExpenses ? \"green\" : \"red\"}>\r\n              ${formatCurrency(finances.weeklyRevenue - finances.weeklyExpenses)}\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Separator size=\"4\" my=\"1\" />\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Salary Cap Space</Text>\r\n            <Text>${(salaryCap - totalSalary).toLocaleString()}k</Text>\r\n          </Box>\r\n        </Grid>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Sponsorships</Heading>\r\n        \r\n        <Table.Root>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.ColumnHeaderCell>Sponsor</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Amount</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Duration</Table.ColumnHeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          \r\n          <Table.Body>\r\n            {finances.sponsorships.map((sponsor, index) => <Table.Row key={index}>\r\n                <Table.Cell>{sponsor.name}</Table.Cell>\r\n                <Table.Cell>${formatCurrency(sponsor.amount)}</Table.Cell>\r\n                <Table.Cell>{sponsor.duration}</Table.Cell>\r\n              </Table.Row>)}\r\n          </Table.Body>\r\n        </Table.Root>\r\n        \r\n        <Button variant=\"outline\" size=\"2\" mt=\"3\">Negotiate New Sponsorship</Button>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Revenue Breakdown</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          {Object.entries(finances.revenueBreakdown).map(([source, percentage]) => <Box key={source}>\r\n              <Flex justify=\"between\">\r\n                <Text size=\"2\" style={{\n              textTransform: 'capitalize'\n            }}>{source}</Text>\r\n                <Text size=\"2\">{percentage}%</Text>\r\n              </Flex>\r\n              <Box style={{\n            width: `${percentage}%`,\n            height: '8px',\n            backgroundColor: source === \"ticketSales\" ? '#22c55e' : source === \"sponsorships\" ? '#3b82f6' : source === \"merchandise\" ? '#f59e0b' : '#8b5cf6',\n            borderRadius: '4px'\n          }} />\r\n            </Box>)}\r\n        </Grid>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Expenses Breakdown</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          {Object.entries(finances.expensesBreakdown).map(([source, percentage]) => <Box key={source}>\r\n              <Flex justify=\"between\">\r\n                <Text size=\"2\" style={{\n              textTransform: 'capitalize'\n            }}>{source}</Text>\r\n                <Text size=\"2\">{percentage}%</Text>\r\n              </Flex>\r\n              <Box style={{\n            width: `${percentage}%`,\n            height: '8px',\n            backgroundColor: source === \"playerSalaries\" ? '#ef4444' : source === \"staffSalaries\" ? '#f97316' : source === \"facilities\" ? '#f59e0b' : '#8b5cf6',\n            borderRadius: '4px'\n          }} />\r\n            </Box>)}\r\n        </Grid>\r\n      </Card>\r\n    </Grid>;\n\n  // Render facilities\n  const renderFacilities = () => <Grid columns={{\n    initial: \"1\",\n    md: \"2\"\n  }} gap=\"4\">\r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Stadium</Heading>\r\n        \r\n        <Box mb=\"3\">\r\n          <Text size=\"2\" weight=\"bold\">{facilities.stadium.name}</Text>\r\n          <Text>Capacity: {facilities.stadium.capacity.toLocaleString()} seats</Text>\r\n        </Box>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Condition</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.stadium.condition}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.stadium.condition} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Modernization</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.stadium.modernization}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.stadium.modernization} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Fan Amenities</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.stadium.fanAmenities}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.stadium.fanAmenities} max={100} size=\"2\" />\r\n          </Box>\r\n        </Grid>\r\n        \r\n        <Flex gap=\"2\" mt=\"3\">\r\n          <Button variant=\"outline\" size=\"2\">Upgrade</Button>\r\n          <Button variant=\"outline\" size=\"2\">Maintenance</Button>\r\n        </Flex>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Training Facilities</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Condition</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.trainingFacilities.condition}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.trainingFacilities.condition} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Technology</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.trainingFacilities.technology}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.trainingFacilities.technology} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Recovery</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.trainingFacilities.recovery}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.trainingFacilities.recovery} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Gym Quality</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.trainingFacilities.gymQuality}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.trainingFacilities.gymQuality} max={100} size=\"2\" />\r\n          </Box>\r\n        </Grid>\r\n        \r\n        <Button variant=\"outline\" size=\"2\" mt=\"3\">Upgrade</Button>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Medical Facilities</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Quality</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.medicalFacilities.quality}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.medicalFacilities.quality} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Staff</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.medicalFacilities.staff}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.medicalFacilities.staff} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Equipment</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.medicalFacilities.equipment}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.medicalFacilities.equipment} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Rehabilitation</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.medicalFacilities.rehabilitation}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.medicalFacilities.rehabilitation} max={100} size=\"2\" />\r\n          </Box>\r\n        </Grid>\r\n        \r\n        <Button variant=\"outline\" size=\"2\" mt=\"3\">Upgrade</Button>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Youth Academy</Heading>\r\n        \r\n        <Grid columns=\"1\" gap=\"3\" width=\"auto\">\r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Quality</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.youthAcademy.quality}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.youthAcademy.quality} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Coaching</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.youthAcademy.coaching}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.youthAcademy.coaching} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Recruitment</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.youthAcademy.recruitment}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.youthAcademy.recruitment} max={100} size=\"2\" />\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\">\r\n              <Text size=\"2\">Development</Text>\r\n              <Text size=\"2\" weight=\"bold\">{facilities.youthAcademy.development}/100</Text>\r\n            </Flex>\r\n            <Progress value={facilities.youthAcademy.development} max={100} size=\"2\" />\r\n          </Box>\r\n        </Grid>\r\n        \r\n        <Flex gap=\"2\" mt=\"3\">\r\n          <Button variant=\"outline\" size=\"2\">Upgrade</Button>\r\n          <Button variant=\"outline\" size=\"2\">Scout Youth</Button>\r\n        </Flex>\r\n      </Card>\r\n    </Grid>;\n\n  // Render staff\n  const renderStaff = () => <Grid columns={{\n    initial: \"1\"\n  }} gap=\"4\">\r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Club Staff</Heading>\r\n        \r\n        <Table.Root>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.ColumnHeaderCell>Name</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Role</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Specialization</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Quality</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Salary (k)</Table.ColumnHeaderCell>\r\n              <Table.ColumnHeaderCell>Actions</Table.ColumnHeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n          \r\n          <Table.Body>\r\n            {staff.map(member => <Table.Row key={member.id}>\r\n                <Table.Cell>\r\n                  <Text weight=\"bold\">{member.name}</Text>\r\n                </Table.Cell>\r\n                <Table.Cell>{member.role}</Table.Cell>\r\n                <Table.Cell>{member.specialization}</Table.Cell>\r\n                <Table.Cell>\r\n                  <Flex align=\"center\" gap=\"2\">\r\n                    <Box style={{\n                  width: `${member.quality}%`,\n                  height: '8px',\n                  backgroundColor: member.quality > 85 ? '#22c55e' : member.quality > 70 ? '#3b82f6' : '#f59e0b',\n                  borderRadius: '4px'\n                }} />\r\n                    <Text size=\"2\">{member.quality}</Text>\r\n                  </Flex>\r\n                </Table.Cell>\r\n                <Table.Cell>${member.salary}k</Table.Cell>\r\n                <Table.Cell>\r\n                  <Flex gap=\"2\">\r\n                    <Button variant=\"outline\" size=\"1\">Details</Button>\r\n                    <Button variant=\"outline\" size=\"1\">Replace</Button>\r\n                  </Flex>\r\n                </Table.Cell>\r\n              </Table.Row>)}\r\n          </Table.Body>\r\n        </Table.Root>\r\n        \r\n        <Button variant=\"solid\" size=\"2\" mt=\"3\">Hire New Staff</Button>\r\n      </Card>\r\n      \r\n      <Card variant=\"surface\">\r\n        <Heading size=\"4\" mb=\"3\">Staff Budget</Heading>\r\n        \r\n        <Grid columns={{\n        initial: \"1\",\n        md: \"2\"\n      }} gap=\"4\">\r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Total Staff Salary</Text>\r\n            <Text size=\"6\" weight=\"bold\">${staff.reduce((sum, member) => sum + member.salary, 0)}k</Text>\r\n            <Text size=\"2\" color=\"gray\">per year</Text>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text size=\"2\" weight=\"bold\">Staff Budget Allocation</Text>\r\n            <Grid columns=\"1\" gap=\"2\" width=\"auto\">\r\n              {[{\n              role: \"Coaching\",\n              percentage: 45\n            }, {\n              role: \"Medical\",\n              percentage: 25\n            }, {\n              role: \"Scouting\",\n              percentage: 15\n            }, {\n              role: \"Administration\",\n              percentage: 15\n            }].map(item => <Box key={item.role}>\r\n                  <Flex justify=\"between\">\r\n                    <Text size=\"2\">{item.role}</Text>\r\n                    <Text size=\"2\">{item.percentage}%</Text>\r\n                  </Flex>\r\n                  <Box style={{\n                width: `${item.percentage}%`,\n                height: '8px',\n                backgroundColor: item.role === \"Coaching\" ? '#22c55e' : item.role === \"Medical\" ? '#3b82f6' : item.role === \"Scouting\" ? '#f59e0b' : '#8b5cf6',\n                borderRadius: '4px'\n              }} />\r\n                </Box>)}\r\n            </Grid>\r\n          </Box>\r\n        </Grid>\r\n      </Card>\r\n    </Grid>;\n\n  // Helper function to get ordinal suffix\n  function getOrdinalSuffix(num) {\n    const j = num % 10;\n    const k = num % 100;\n    if (j === 1 && k !== 11) {\n      return \"st\";\n    }\n    if (j === 2 && k !== 12) {\n      return \"nd\";\n    }\n    if (j === 3 && k !== 13) {\n      return \"rd\";\n    }\n    return \"th\";\n  }\n\n  // Helper function to format currency\n  function formatCurrency(amount) {\n    if (amount >= 1000000) {\n      return (amount / 1000000).toFixed(2) + \"M\";\n    } else if (amount >= 1000) {\n      return (amount / 1000).toFixed(1) + \"k\";\n    } else {\n      return amount.toString();\n    }\n  }\n  return <Box>\r\n      <Heading size=\"6\" mb=\"4\">Club</Heading>\r\n      \r\n      <Tabs.Root defaultValue=\"overview\">\r\n        <Tabs.List>\r\n          <Tabs.Trigger value=\"overview\">Overview</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"finances\">Finances</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"facilities\">Facilities</Tabs.Trigger>\r\n          <Tabs.Trigger value=\"staff\">Staff</Tabs.Trigger>\r\n        </Tabs.List>\r\n        \r\n        <Box pt=\"4\">\r\n          <Tabs.Content value=\"overview\">\r\n            {renderClubOverview()}\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"finances\">\r\n            {renderFinances()}\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"facilities\">\r\n            {renderFacilities()}\r\n          </Tabs.Content>\r\n          \r\n          <Tabs.Content value=\"staff\">\r\n            {renderStaff()}\r\n          </Tabs.Content>\r\n        </Box>\r\n      </Tabs.Root>\r\n    </Box>;\n}\n_c = Club;\nvar _c;\n$RefreshReg$(_c, \"Club\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\SimulationCalendar.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\SimulationCalendar.tsx\");\n  import.meta.hot.lastModified = \"1747543677759.8467\";\n}\n// REMIX HMR END\n\nimport { Box, Heading, Text, Grid, Button, Card, Flex, Separator } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nimport { teams } from \"~/data/AFLManager/teams\";\n\n// Helper function to format date\nconst formatDateDisplay = date => {\n  const [year, month, day] = date.split(\"-\");\n  return `${day}/${month}/${year}`;\n};\n\n// Helper function to get weekday name\nconst getWeekdayName = date => {\n  const dateObj = new Date(date);\n  return dateObj.toLocaleDateString('en-AU', {\n    weekday: 'long'\n  });\n};\nexport default function SimulationCalendar({\n  gameState,\n  allPlayers,\n  onAdvanceDay,\n  onScheduleTraining,\n  onViewPressConference,\n  onResign\n}) {\n  _s();\n  const [selectedWeek, setSelectedWeek] = useState(0); // 0 = current week\n\n  // Generate calendar days for the selected week\n  const generateWeekDays = () => {\n    // Start from the current day in the game\n    const startDate = new Date(gameState.currentDate);\n\n    // Adjust for selected week (future weeks)\n    startDate.setDate(startDate.getDate() + selectedWeek * 7);\n\n    // Generate 7 days starting from the adjusted start date\n    const weekDays = [];\n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(startDate);\n      currentDate.setDate(startDate.getDate() + i);\n      const dateString = currentDate.toISOString().split('T')[0];\n\n      // Determine if this day has a match\n      const hasMatch = gameState.seasonFixtures.some(fixture => fixture.date === dateString && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId));\n\n      // Determine if this day has training\n      const hasTraining = gameState.trainingSessions && gameState.trainingSessions.some(session => session.date === dateString);\n\n      // Determine if this day has press conference\n      const pressEvents = gameState.pressConferences?.filter(presser => presser.date === dateString && !presser.completed) || [];\n\n      // Check if day is in the past\n      const isPastDay = new Date(dateString) < new Date(gameState.currentDate);\n\n      // Check if the day is today\n      const isToday = dateString === gameState.currentDate;\n\n      // Get fixture details if there is a match this day\n      const todayFixture = gameState.seasonFixtures.find(fixture => fixture.date === dateString && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId));\n      const opponentId = todayFixture ? todayFixture.homeTeamId === gameState.userTeamId ? todayFixture.awayTeamId : todayFixture.homeTeamId : null;\n      const opponent = opponentId ? teams.find(team => team.id === opponentId)?.name : null;\n      const isHome = todayFixture?.homeTeamId === gameState.userTeamId;\n\n      // Get training details if there is training this day\n      const trainingSession = gameState.trainingSessions?.find(session => session.date === dateString);\n      weekDays.push({\n        date: dateString,\n        dayName: getWeekdayName(dateString),\n        isToday,\n        isPast: isPastDay,\n        hasMatch,\n        hasTraining,\n        pressEvents,\n        opponent,\n        isHome,\n        trainingSession\n      });\n    }\n    return weekDays;\n  };\n  const weekDays = generateWeekDays();\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n  return <Box>\r\n      <Flex justify=\"between\" align=\"center\" mb=\"4\">\r\n        <Heading size=\"6\">Season Calendar</Heading>\r\n        <Flex gap=\"2\">\r\n          <Button variant=\"outline\" onClick={() => setSelectedWeek(Math.max(0, selectedWeek - 1))} disabled={selectedWeek === 0}>\r\n            Previous Week\r\n          </Button>\r\n          <Button variant=\"outline\" onClick={() => setSelectedWeek(selectedWeek + 1)}>\r\n            Next Week\r\n          </Button>\r\n          <Button color=\"red\" variant=\"outline\" onClick={onResign}>\r\n            Resign from {userTeam?.name || \"Team\"}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      \r\n      <Grid columns=\"7\" gap=\"3\" mb=\"4\">\r\n        {weekDays.map(day => <Card key={day.date} style={{\n        opacity: day.isPast ? 0.5 : 1,\n        backgroundColor: day.isToday ? '#2f4f4f' : '#1a1a1a',\n        border: day.isToday ? '2px solid #4caf50' : '1px solid #333',\n        height: '180px'\n      }}>\r\n            <Flex direction=\"column\" gap=\"1\" height=\"100%\">\r\n              <Flex justify=\"between\" align=\"center\">\r\n                <Text weight=\"bold\">{day.dayName}</Text>\r\n                <Text size=\"1\">{formatDateDisplay(day.date)}</Text>\r\n              </Flex>\r\n              \r\n              <Separator size=\"4\" mb=\"1\" />\r\n              \r\n              <Box style={{\n            flex: 1\n          }}>\r\n                {day.hasMatch && <Flex direction=\"column\" gap=\"1\" mb=\"2\">\r\n                    <Text size=\"2\" color=\"crimson\" weight=\"bold\">Match Day</Text>\r\n                    <Text size=\"1\">\r\n                      vs {day.opponent}\r\n                      {day.isHome ? ' (Home)' : ' (Away)'}\r\n                    </Text>\r\n                  </Flex>}\r\n                \r\n                {day.hasTraining && day.trainingSession && <Flex direction=\"column\" gap=\"1\" mb=\"2\">\r\n                    <Text size=\"2\" color=\"orange\" weight=\"bold\">Training</Text>\r\n                    <Text size=\"1\">\r\n                      {day.trainingSession.focus} ({day.trainingSession.intensity})\r\n                    </Text>\r\n                  </Flex>}\r\n                \r\n                {day.pressEvents.length > 0 && <Flex direction=\"column\" gap=\"1\" mb=\"2\">\r\n                    <Text size=\"2\" color=\"blue\" weight=\"bold\">Press Conference</Text>\r\n                    <Text size=\"1\">{day.pressEvents.length} event(s)</Text>\r\n                  </Flex>}\r\n              </Box>\r\n              \r\n              <Flex gap=\"1\" justify=\"end\" mt=\"auto\">\r\n                {!day.isPast && !day.hasMatch && <Button size=\"1\" variant=\"outline\" onClick={() => onScheduleTraining(day.date)} disabled={day.hasTraining}>\r\n                    {day.hasTraining ? 'Scheduled' : 'Training'}\r\n                  </Button>}\r\n                \r\n                {day.pressEvents.length > 0 && !day.isPast && <Button size=\"1\" color=\"blue\" onClick={() => onViewPressConference(day.pressEvents[0].id)}>\r\n                    Press\r\n                  </Button>}\r\n                \r\n                {day.isToday && <Button size=\"1\" color=\"green\" onClick={onAdvanceDay}>\r\n                    Next Day\r\n                  </Button>}\r\n              </Flex>\r\n            </Flex>\r\n          </Card>)}\r\n      </Grid>\r\n      \r\n      <Box my=\"4\">\r\n        <Heading size=\"5\" mb=\"2\">Team Schedule Overview</Heading>\r\n        <Card>\r\n          <Flex direction=\"column\" gap=\"3\">\r\n            <Text>\r\n              Next Match: {gameState.seasonFixtures.filter(fixture => new Date(fixture.date) >= new Date(gameState.currentDate) && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0] ? `${formatDateDisplay(gameState.seasonFixtures.filter(fixture => new Date(fixture.date) >= new Date(gameState.currentDate) && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0].date)} vs ${teams.find(team => team.id === (gameState.seasonFixtures.filter(fixture => new Date(fixture.date) >= new Date(gameState.currentDate) && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0].homeTeamId === gameState.userTeamId ? gameState.seasonFixtures.filter(fixture => new Date(fixture.date) >= new Date(gameState.currentDate) && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0].awayTeamId : gameState.seasonFixtures.filter(fixture => new Date(fixture.date) >= new Date(gameState.currentDate) && (fixture.homeTeamId === gameState.userTeamId || fixture.awayTeamId === gameState.userTeamId)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0].homeTeamId))?.name}` : 'None scheduled'}\r\n            </Text>\r\n            \r\n            <Text>\r\n              Upcoming Training: {gameState.trainingSessions && gameState.trainingSessions.filter(session => new Date(session.date) >= new Date(gameState.currentDate)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0] ? `${formatDateDisplay(gameState.trainingSessions.filter(session => new Date(session.date) >= new Date(gameState.currentDate)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0].date)} (${gameState.trainingSessions.filter(session => new Date(session.date) >= new Date(gameState.currentDate)).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0].focus})` : 'None scheduled'}\r\n            </Text>\r\n            \r\n            <Text>\r\n              Pending Press Conferences: {gameState.pressConferences?.filter(presser => new Date(presser.date) >= new Date(gameState.currentDate) && !presser.completed).length || 0}\r\n            </Text>\r\n          </Flex>\r\n        </Card>\r\n      </Box>\r\n    </Box>;\n}\n_s(SimulationCalendar, \"Y9XElcUJLbPIurNn7T4x6bqzCik=\");\n_c = SimulationCalendar;\nvar _c;\n$RefreshReg$(_c, \"SimulationCalendar\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\Training.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\Training.tsx\");\n  import.meta.hot.lastModified = \"1747543677761.1943\";\n}\n// REMIX HMR END\n\nimport { Box, Heading, Text, Grid, Button, Card, Flex, RadioGroup } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nexport default function Training({\n  gameState,\n  allPlayers,\n  selectedDate,\n  onScheduleTraining,\n  onCancel\n}) {\n  _s();\n  const [selectedFocus, setSelectedFocus] = useState(\"fitness\");\n  const [selectedIntensity, setSelectedIntensity] = useState(\"medium\");\n  const [selectedPlayers, setSelectedPlayers] = useState([]);\n  const teamPlayers = allPlayers.filter(player => player.teamId === gameState.userTeamId);\n\n  // Handle player selection toggle\n  const togglePlayerSelection = playerId => {\n    if (selectedPlayers.includes(playerId)) {\n      setSelectedPlayers(selectedPlayers.filter(id => id !== playerId));\n    } else {\n      setSelectedPlayers([...selectedPlayers, playerId]);\n    }\n  };\n\n  // Handle select all players\n  const selectAllPlayers = () => {\n    setSelectedPlayers(teamPlayers.map(player => player.id));\n  };\n\n  // Handle deselect all players\n  const deselectAllPlayers = () => {\n    setSelectedPlayers([]);\n  };\n\n  // Handle schedule training submission\n  const handleSubmit = () => {\n    onScheduleTraining(selectedDate, selectedFocus, selectedIntensity, selectedPlayers.length > 0 ? selectedPlayers : teamPlayers.map(player => player.id));\n  };\n  return <Box>\r\n      <Card style={{\n      maxWidth: '800px',\n      margin: '0 auto'\n    }}>\r\n        <Flex direction=\"column\" gap=\"4\">\r\n          <Heading size=\"5\">Schedule Training Session</Heading>\r\n          <Text>Date: {selectedDate}</Text>\r\n          \r\n          <Box>\r\n            <Text weight=\"bold\" mb=\"2\">Training Focus</Text>\r\n            <RadioGroup.Root value={selectedFocus} onValueChange={value => setSelectedFocus(value)}>\r\n              <Flex gap=\"3\" wrap=\"wrap\">\r\n                <RadioGroup.Item value=\"attack\">\r\n                  Attack\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"defense\">\r\n                  Defense\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"fitness\">\r\n                  Fitness\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"teamwork\">\r\n                  Teamwork\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"set_pieces\">\r\n                  Set Pieces\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"recovery\">\r\n                  Recovery\r\n                </RadioGroup.Item>\r\n              </Flex>\r\n            </RadioGroup.Root>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Text weight=\"bold\" mb=\"2\">Training Intensity</Text>\r\n            <RadioGroup.Root value={selectedIntensity} onValueChange={value => setSelectedIntensity(value)}>\r\n              <Flex gap=\"3\" wrap=\"wrap\">\r\n                <RadioGroup.Item value=\"light\">\r\n                  Light\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"medium\">\r\n                  Medium\r\n                </RadioGroup.Item>\r\n                <RadioGroup.Item value=\"intense\">\r\n                  Intense\r\n                </RadioGroup.Item>\r\n              </Flex>\r\n            </RadioGroup.Root>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Flex justify=\"between\" align=\"center\">\r\n              <Text weight=\"bold\">Player Selection</Text>\r\n              <Flex gap=\"2\">\r\n                <Button variant=\"outline\" size=\"1\" onClick={selectAllPlayers}>\r\n                  Select All\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"1\" onClick={deselectAllPlayers}>\r\n                  Deselect All\r\n                </Button>\r\n              </Flex>\r\n            </Flex>\r\n            \r\n            <Text size=\"1\" color=\"gray\" mb=\"2\">\r\n              {selectedPlayers.length} of {teamPlayers.length} players selected\r\n            </Text>\r\n            \r\n            <Card style={{\n            maxHeight: '300px',\n            overflowY: 'auto'\n          }}>\r\n              <Grid columns=\"2\" gap=\"2\">\r\n                {teamPlayers.map(player => <Card key={player.id} style={{\n                cursor: 'pointer',\n                backgroundColor: selectedPlayers.includes(player.id) ? '#2a4c6d' : '#333'\n              }} onClick={() => togglePlayerSelection(player.id)}>\r\n                    <Flex gap=\"2\" align=\"center\">\r\n                      <Box style={{\n                    width: '20px',\n                    height: '20px',\n                    borderRadius: '50%',\n                    backgroundColor: selectedPlayers.includes(player.id) ? '#60a5fa' : '#555',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                  }}>\r\n                        {selectedPlayers.includes(player.id) && <span style={{\n                      color: 'white',\n                      fontSize: '12px'\n                    }}>\u2713</span>}\r\n                      </Box>\r\n                      <Box>\r\n                        <Text weight=\"bold\">{player.name}</Text>\r\n                        <Text size=\"1\">\r\n                          {player.position} | Rating: {player.form}\r\n                        </Text>\r\n                      </Box>\r\n                    </Flex>\r\n                  </Card>)}\r\n              </Grid>\r\n            </Card>\r\n          </Box>\r\n          \r\n          <Flex gap=\"2\" justify=\"end\" mt=\"4\">\r\n            <Button variant=\"outline\" onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleSubmit}>\r\n              Schedule Training\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n      </Card>\r\n    </Box>;\n}\n_s(Training, \"CjIrLMXoAjl6TlsRZEsciM4dbqo=\");\n_c = Training;\nvar _c;\n$RefreshReg$(_c, \"Training\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\PressConference.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\PressConference.tsx\");\n  import.meta.hot.lastModified = \"1747543677758.8257\";\n}\n// REMIX HMR END\n\nimport { Box, Heading, Text, Button, Card, Flex, Separator, RadioGroup } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nexport default function PressConference({\n  gameState,\n  presserId,\n  onComplete,\n  onCancel\n}) {\n  _s();\n  // Find the press conference\n  const presser = gameState.pressConferences.find(pc => pc.id === presserId);\n\n  // Selected answers for each question\n  const [selectedAnswers, setSelectedAnswers] = useState(presser ? presser.questions.map(q => q.options[0]) : []);\n  if (!presser) {\n    return <Box>\r\n        <Card style={{\n        maxWidth: '800px',\n        margin: '0 auto'\n      }}>\r\n          <Heading size=\"5\">Press Conference Error</Heading>\r\n          <Text>Could not find the requested press conference.</Text>\r\n          <Button onClick={onCancel} mt=\"4\">Return to Calendar</Button>\r\n        </Card>\r\n      </Box>;\n  }\n\n  // Handle answer selection\n  const handleSelectAnswer = (questionIndex, answer) => {\n    const newAnswers = [...selectedAnswers];\n    newAnswers[questionIndex] = answer;\n    setSelectedAnswers(newAnswers);\n  };\n\n  // Handle press conference completion\n  const handleComplete = () => {\n    onComplete(presserId, selectedAnswers);\n  };\n  return <Box>\r\n      <Card style={{\n      maxWidth: '800px',\n      margin: '0 auto'\n    }}>\r\n        <Flex direction=\"column\" gap=\"4\">\r\n          <Flex justify=\"between\" align=\"baseline\">\r\n            <Heading size=\"5\">Press Conference</Heading>\r\n            <Text size=\"2\" color=\"gray\">{presser.date}</Text>\r\n          </Flex>\r\n          \r\n          <Box>\r\n            <Text weight=\"bold\" size=\"4\" mb=\"2\">{presser.topic}</Text>\r\n            <Text size=\"2\" color=\"gray\" mb=\"4\">\r\n              Answer the questions from the media carefully. Your responses will affect team morale,\r\n              fan support, and board confidence.\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Separator size=\"4\" />\r\n          \r\n          {presser.questions.map((question, index) => <Box key={index} mb=\"4\">\r\n              <Text weight=\"bold\" mb=\"2\">\r\n                <Text color=\"blue\" style={{\n              display: 'inline'\n            }}>Reporter: </Text>\r\n                {question.question}\r\n              </Text>\r\n              \r\n              <RadioGroup.Root value={selectedAnswers[index]} onValueChange={value => handleSelectAnswer(index, value)}>\r\n                <Flex direction=\"column\" gap=\"2\">\r\n                  {question.options.map((option, optionIndex) => <RadioGroup.Item key={optionIndex} value={option} style={{\n                padding: '8px 12px',\n                borderRadius: '4px',\n                backgroundColor: selectedAnswers[index] === option ? '#2a4c6d' : 'transparent',\n                border: '1px solid #444'\n              }}>\r\n                      {option}\r\n                    </RadioGroup.Item>)}\r\n                </Flex>\r\n              </RadioGroup.Root>\r\n            </Box>)}\r\n          \r\n          <Flex gap=\"2\" justify=\"end\" mt=\"4\">\r\n            <Button variant=\"outline\" onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleComplete}>\r\n              Complete Press Conference\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n      </Card>\r\n    </Box>;\n}\n_s(PressConference, \"edNz80yB+7Zy1wAZ25Bo31c7mDQ=\");\n_c = PressConference;\nvar _c;\n$RefreshReg$(_c, \"PressConference\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\AFLManager\\\\\\\\Resignation.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\AFLManager\\\\Resignation.tsx\");\n  import.meta.hot.lastModified = \"1747543677758.8257\";\n}\n// REMIX HMR END\n\nimport { Box, Heading, Text, Button, Card, Flex, TextArea } from \"@radix-ui/themes\";\nimport { useState } from \"react\";\nimport { teams } from \"~/data/AFLManager/teams\";\nexport default function Resignation({\n  gameState,\n  onConfirmResign,\n  onCancel\n}) {\n  _s();\n  const [resignReason, setResignReason] = useState(\"\");\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const userTeam = teams.find(team => team.id === gameState.userTeamId);\n\n  // Handle initial resignation request\n  const handleResignRequest = () => {\n    setShowConfirmation(true);\n  };\n\n  // Handle confirming resignation\n  const handleConfirmResign = () => {\n    onConfirmResign(resignReason);\n  };\n  if (!showConfirmation) {\n    return <Box>\r\n        <Card style={{\n        maxWidth: '800px',\n        margin: '0 auto'\n      }}>\r\n          <Flex direction=\"column\" gap=\"4\">\r\n            <Heading size=\"5\" color=\"red\">Considering Resignation</Heading>\r\n            \r\n            <Text>\r\n              Are you sure you want to resign as coach of {userTeam?.name}? This action cannot be undone.\r\n            </Text>\r\n            \r\n            <Text size=\"2\" color=\"gray\">\r\n              Your resignation will end your current career, and you'll need to start a new game.\r\n            </Text>\r\n            \r\n            <Box>\r\n              <Text weight=\"bold\" mb=\"2\">Reason for Resignation:</Text>\r\n              <TextArea placeholder=\"Please provide a reason for your resignation...\" value={resignReason} onChange={e => setResignReason(e.target.value)} style={{\n              width: '100%',\n              minHeight: '120px'\n            }} />\r\n            </Box>\r\n            \r\n            <Flex gap=\"2\" justify=\"end\" mt=\"4\">\r\n              <Button variant=\"outline\" onClick={onCancel}>\r\n                Cancel\r\n              </Button>\r\n              <Button color=\"red\" onClick={handleResignRequest} disabled={resignReason.trim().length === 0}>\r\n                Submit Resignation\r\n              </Button>\r\n            </Flex>\r\n          </Flex>\r\n        </Card>\r\n      </Box>;\n  }\n  return <Box>\r\n      <Card style={{\n      maxWidth: '800px',\n      margin: '0 auto'\n    }}>\r\n        <Flex direction=\"column\" gap=\"4\">\r\n          <Heading size=\"5\" color=\"red\">Confirm Resignation</Heading>\r\n          \r\n          <Text>\r\n            You are about to resign as head coach of {userTeam?.name}.\r\n            This will end your current career. Are you absolutely sure?\r\n          </Text>\r\n          \r\n          <Box style={{\n          padding: '16px',\n          backgroundColor: '#332222',\n          borderRadius: '4px',\n          border: '1px solid #663333'\n        }}>\r\n            <Text weight=\"bold\" mb=\"2\">Your Resignation Statement:</Text>\r\n            <Text style={{\n            fontStyle: 'italic'\n          }}>\"{resignReason}\"</Text>\r\n          </Box>\r\n          \r\n          <Text size=\"2\" color=\"gray\">\r\n            Career statistics:\r\n          </Text>\r\n          \r\n          <Box>\r\n            <Flex direction=\"column\" gap=\"1\">\r\n              <Text>Seasons: {1}</Text>\r\n              <Text>\r\n                Win-Loss Record: {gameState.ladder.find(pos => pos.teamId === gameState.userTeamId)?.wins || 0}-\r\n                {gameState.ladder.find(pos => pos.teamId === gameState.userTeamId)?.losses || 0}\r\n              </Text>\r\n              <Text>\r\n                Final Position: {gameState.ladder.sort((a, b) => {\n                if (b.points !== a.points) return b.points - a.points;\n                return b.percentage - a.percentage;\n              }).findIndex(pos => pos.teamId === gameState.userTeamId) + 1}\r\n              </Text>\r\n            </Flex>\r\n          </Box>\r\n          \r\n          <Flex gap=\"2\" justify=\"end\" mt=\"4\">\r\n            <Button variant=\"outline\" onClick={() => setShowConfirmation(false)}>\r\n              Go Back\r\n            </Button>\r\n            <Button color=\"red\" onClick={handleConfirmResign}>\r\n              Confirm Resignation\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n      </Card>\r\n    </Box>;\n}\n_s(Resignation, \"gUx7m5bEJaDybqgMCM0n5Zvq9IM=\");\n_c = Resignation;\nvar _c;\n$RefreshReg$(_c, \"Resignation\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "p", "scoreDifference", "playerStats", "o", "p", "e", "import_react", "import_jsx_dev_runtime", "_s", "teamStats", "playerStats", "p", "o", "_c", "import_react", "import_jsx_dev_runtime", "_s", "playerStats", "p", "o", "e", "_c", "import_jsx_dev_runtime", "o", "p", "_c", "import_react", "import_jsx_dev_runtime", "_s", "weekDays", "p", "o", "_c", "import_react", "import_jsx_dev_runtime", "_s", "p", "o", "_c", "import_react", "import_jsx_dev_runtime", "_s", "p", "o", "_c", "import_react", "import_jsx_dev_runtime", "_s", "p", "o", "r", "e", "_c", "import_jsx_dev_runtime", "_s", "p", "_c", "e", "_c2"]
}
